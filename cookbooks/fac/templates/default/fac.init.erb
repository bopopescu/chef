#!/bin/env bash
set -e
#
# init script for a Java application
# - it is dynamically generated by Chef for the FAC-App-Family
# Check the application status
#
# This function checks if the application is running
check_status() {

  pidfile=/var/run/fac/<%= @fac_app %>.pid
  # Test if pid file has contents

  if [[ -s $pidfile ]] ; then
    echo 1
  else
    echo 0
  fi
}

# Starts the application
start() {

  # At first checks if the application is already started calling the check_status
  # function
  running=`check_status`

  if [ $running -ne 0 ] ; then
    echo "The application (<%= @fac_app %>) is already started"
    exit 1
  fi

  # If the application isn't running, starts it
  echo -n "Starting application (<%= @fac_app %>): "

  # Redirects default and error output to a log file
  java -Xmx4G -jar <%= @jarfile %> initialOverlap='200' >> /dev/null 2>&1 &
  pgrep -f 'java -Xmx4G -jar <%= @jarfile %> initialOverlap=200' > /var/run/fac/<%= @fac_app %>.pid
  echo "OK"
}

# Stops the application
stop() {

  # Like as the start function, checks the application status
  running=`check_status`

  if [ $running -eq 0 ] ; then
    echo "Application (<%= @fac_app %>) is already stopped"
    exit 1
  fi

  # Kills the application process
  echo -n "Stopping application (<%= @fac_app %>): "
  kill -SIGTERM `cat /var/run/fac/<%= @fac_app %>.pid` &
  echo -n > /var/run/fac/<%= @fac_app %>.pid
  echo "OK"
}

# Show the application status
status() {

  # The check_status function, again...
  running=`check_status`

  # If the PID was returned means the application is running
  if [ $running -ne 0 ] ; then
    echo "Application (<%= @fac_app %>) is started"
  else
    echo "Application (<%= @fac_app %>) is stopped"
  fi

}

# Main logic, a simple case to call functions
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart|reload)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|reload|status}"
    exit 1
esac

exit 0
