// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, BaseColl, FilterBar, Messages, Pagination, Panel, URL_PREFIX, listTemplate, resultTemplate, _;
    URL_PREFIX = '/api/v1';
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    listTemplate = require('text!templates/fc-list.html');
    resultTemplate = require('text!templates/fc-list-results.html');
    _.templateSettings = {
      interpolate: /\{\{(.+?)\}\}/g
    };
    BaseColl = (function(_super) {

      __extends(BaseColl, _super);

      function BaseColl() {
        return BaseColl.__super__.constructor.apply(this, arguments);
      }

      BaseColl.prototype.metastate = null;

      BaseColl.prototype.pageSize = 25;

      BaseColl.prototype.initialize = function() {
        var _this = this;
        this.metastate = new Backbone.Model();
        return this.metastate.on('change', function(e) {
          return _this.fetch();
        });
      };

      BaseColl.prototype.parse = function(response) {
        var k, v, _ref;
        if (response.meta) {
          _ref = response.meta;
          for (k in _ref) {
            if (!__hasProp.call(_ref, k)) continue;
            v = _ref[k];
            this[k] = v;
          }
        }
        if (response.result) {
          return response.result;
        }
        throw Error("No result attribute in response.");
      };

      BaseColl.prototype.pages = function() {
        return Math.floor(this.records / this.limit);
      };

      BaseColl.prototype.page = function() {
        return Math.floor(this.offset / this.limit) + 1;
      };

      BaseColl.prototype.pageTo = function(page) {
        return this.metastate.set({
          limit: this.pageSize,
          offset: (page * this.pageSize) - this.pageSize
        });
      };

      BaseColl.prototype.fetch = function(options) {
        options = options ? _.clone(options) : {};
        options.data = _.extend(options.data || {}, this.metastate.attributes);
        return BaseColl.__super__.fetch.call(this, options);
      };

      return BaseColl;

    })(Backbone.Collection);
    FilterBar = (function(_super) {

      __extends(FilterBar, _super);

      function FilterBar() {
        return FilterBar.__super__.constructor.apply(this, arguments);
      }

      FilterBar.prototype.state = new Backbone.Model();

      FilterBar.prototype.cycle = [null, true, false];

      FilterBar.prototype.events = {
        "click .btn": "updateState"
      };

      FilterBar.prototype.initialize = function() {
        var button, _i, _len, _ref;
        _ref = this.$el.find('.btn[data-name]');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          this.state.set($(button).data('name'), null, {
            silent: true
          });
        }
        return this.state.on('change', this.render, this);
      };

      FilterBar.prototype.updateState = function(e) {
        var btn, func, name, next, value, _ref;
        e.preventDefault();
        btn = $(e.target);
        if (!btn.hasClass('btn')) {
          btn = btn.closest('.btn');
        }
        func = btn.data('func');
        if (func) {
          if (func === 'reset') {
            _ref = this.state.attributes;
            for (name in _ref) {
              if (!__hasProp.call(_ref, name)) continue;
              value = _ref[name];
              this.state.set(name, null, {
                silent: true
              });
            }
            this.state.change();
          }
        }
        name = btn.data('name');
        if (!name) {
          return;
        }
        next = this.cycle.indexOf(this.state.get(name)) + 1;
        if (next > this.cycle.length - 1) {
          next = 0;
        }
        return this.state.set(name, this.cycle[next]);
      };

      FilterBar.prototype.render = function() {
        var button, e, state, _i, _len, _ref, _results;
        _ref = this.$el.find('.btn[data-name]');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          e = $(button);
          state = this.state.get(e.data('name'));
          e.removeClass('btn-success').removeClass('btn-danger').removeClass('active');
          if (state === true) {
            e.addClass('btn-success active');
          }
          if (state === false) {
            _results.push(e.addClass('btn-danger active'));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return FilterBar;

    })(Backbone.View);
    Pagination = (function(_super) {

      __extends(Pagination, _super);

      function Pagination() {
        return Pagination.__super__.constructor.apply(this, arguments);
      }

      Pagination.prototype.initialize = function() {
        var _this = this;
        return this.collection.on('reset', function(e) {
          return _this.render();
        });
      };

      Pagination.prototype.render = function() {
        var addPage, p, page, pager, pages, x, _i;
        pages = this.collection.pages();
        page = this.collection.page();
        pager = $('<ul/>');
        if (this.collection.length === 0) {
          pager.append("<li class=\"disabled\"><a href=\"#page/" + page + "/\">No results</a></li>");
        } else if (pages <= 1) {
          pager.append("<li class=\"disabled\"><a href=\"#page/" + page + "/\">All Results Shown</a></li>");
        } else {
          p = $("<li><a href=\"#page/" + (page - 1 < 1 ? 1 : page - 1) + "/\">Prev</a></li>");
          if (page === 1) {
            p.addClass('disabled');
          }
          pager.append(p);
          addPage = function(num) {
            var pageButton;
            pageButton = $("<li><a href=\"\#page/" + num + "/\">" + num + "</a></li>");
            if (num === page) {
              pageButton.addClass('active');
            }
            return pager.append(pageButton);
          };
          for (x = _i = 1; 1 <= pages ? _i <= pages : _i >= pages; x = 1 <= pages ? ++_i : --_i) {
            addPage(x);
          }
          p = $("<li><a href=\"#page/" + (page + 1 < pages ? page + 1 : pages) + "/\">Next</a></li>");
          if (page === pages) {
            p.addClass('disabled');
          }
          pager.append(p);
        }
        return this.$el.html(pager);
      };

      return Pagination;

    })(Backbone.View);
    Panel = (function(_super) {

      __extends(Panel, _super);

      function Panel() {
        return Panel.__super__.constructor.apply(this, arguments);
      }

      Panel.prototype.tagName = 'div';

      Panel.prototype.attributes = {
        "class": 'stack'
      };

      Panel.prototype.initialize = function(options) {
        Panel.__super__.initialize.call(this, options);
        this.inner = $('<div class="panel"/>');
        if (!(this.stack != null)) {
          return this.stack = (options && options.stack) || [];
        }
      };

      Panel.prototype.render = function() {
        return this.renderStack();
      };

      Panel.prototype.renderStack = function() {
        var element, panel, panelStr, title, url, _i, _len, _ref;
        this.$el.empty();
        this.inner = $('<div class="panel"/>');
        if (this.stack && this.stack.length > 0) {
          _ref = this.stack.reverse();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            element = _ref[_i];
            title = element[0], url = element[1];
            panelStr = "<div class=\"panel inactive\"><header><a href=\"" + url + "\">" + title + "</a></header></panel>";
            panel = panel ? panel.append(panelStr) : $(panelStr);
          }
          return this.$el.append(panel.append(this.inner));
        } else {
          return this.$el.append(this.inner);
        }
      };

      return Panel;

    })(Backbone.View);
    Messages = (function() {

      function Messages() {}

      Messages.prototype.message = function(text, type) {
        return $('.top-right').notify({
          type: type,
          message: {
            text: text
          }
        }).show();
      };

      Messages.prototype.success = function(text) {
        return this.message(text, 'success');
      };

      Messages.prototype.error = function(text) {
        return this.message(text, 'error');
      };

      Messages.prototype.info = function(text) {
        return this.message(text, 'info');
      };

      return Messages;

    })();
    return {
      messages: new Messages(),
      Panel: Panel,
      Pagination: Pagination,
      Model: Backbone.Model,
      Collection: BaseColl,
      FilterBar: FilterBar
    };
  });

}).call(this);
