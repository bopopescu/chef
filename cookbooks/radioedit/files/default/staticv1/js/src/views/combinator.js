// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, CombinatorView, TargetGroup, TargetsHierarchyCollection, base, combinatorPickerTemplate, combinatorSorterTemplate, combinatorTemplate, models;
    $ = require('jquery');
    base = require('src/base');
    TargetsHierarchyCollection = require('src/TargetsHierarchyCollection');
    TargetGroup = require('src/models/TargetGroup');
    models = require('src/models');
    require('jquery.ui');
    combinatorTemplate = require('eco/combinator/base');
    combinatorPickerTemplate = require('eco/combinator/picker');
    combinatorSorterTemplate = require('eco/combinator/sorter');
    CombinatorView = (function(_super) {

      __extends(CombinatorView, _super);

      function CombinatorView() {
        return CombinatorView.__super__.constructor.apply(this, arguments);
      }

      CombinatorView.prototype.attributes = function() {
        base.Panel.prototype.attributes["class"] += ' combinatorContainer';
        return base.Panel.prototype.attributes;
      };

      CombinatorView.prototype.initialize = function() {
        var _this = this;
        this.collection = new TargetsHierarchyCollection();
        this.collection.fetch().done(function() {
          return _this.render();
        });
        this.model = new TargetGroup.TargetGroup();
        this.model.on('change:targets', this.renderSorter, this);
        return this.model.on('error', function(model, error) {
          var message;
          message = '';
          if (_.isString(error)) {
            message = error;
          } else {
            message = JSON.parse(error.responseText).message;
          }
          return base.messages.error(message);
        });
      };

      CombinatorView.prototype.events = {
        'keyup input#nameSpaceAutocomplete': 'nameSpaceInputChange',
        'sortupdate ul#sortable': 'sortUpdated',
        'submit .targetGroupForm': 'submitTargetGroup'
      };

      CombinatorView.prototype.render = function() {
        CombinatorView.__super__.render.call(this);
        this.inner.html(combinatorTemplate({
          subTree: this.collection.tree
        })).find('#nameSpaceAutocomplete').focus();
        return this.renderPicker(this.collection.tree).renderSorter();
      };

      CombinatorView.prototype.renderPicker = function(subTree) {
        this.inner.find('.pickerContainer').html(combinatorPickerTemplate({
          subTree: subTree
        }));
        return this;
      };

      CombinatorView.prototype.renderSorter = function() {
        this.inner.find('#sortable').sortable('destroy');
        this.inner.find('.sorterContainer').html(combinatorSorterTemplate({
          targetGroup: this.model
        }));
        this.inner.find('#sortable').sortable();
        this.inner.find('#sortable').disableSelection();
        return this;
      };

      CombinatorView.prototype.selectItem = function(event, value) {
        var tree;
        tree = this.collection.tree.getSubTree(value);
        if (tree.isLeaf()) {
          this.model.get('targets').push(tree.getFullPath());
          this.model.trigger('change:targets');
        }
        this.renderPicker(tree);
        return this.inner.find('#nameSpaceAutocomplete').val(value).focus();
      };

      CombinatorView.prototype.nameSpaceInputChange = function(event) {
        var value;
        value = $(event.target).attr('value');
        return this.renderPicker(this.collection.tree.getSubTree(value));
      };

      CombinatorView.prototype.sortUpdated = function(event, ui) {
        var targets;
        targets = $.makeArray($(event.target).find('li').map(function() {
          return $(this).data('target');
        }));
        return this.model.set('targets', targets, {
          silent: true
        });
      };

      CombinatorView.prototype.removeTarget = function(event) {
        this.model.get('targets').splice($(event.target).parents('li').index(), 1);
        return this.model.trigger('change:targets');
      };

      CombinatorView.prototype.submitTargetGroup = function(event) {
        var data, item, _i, _len,
          _this = this;
        event.preventDefault();
        data = $(event.target).serializeArray();
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          this.model.set(item.name, item.value);
        }
        return this.model.save().success(function() {
          base.messages.success('Target Group Created');
          return _this.model.clear({
            silent: true
          }).set(_.result(_this.model, 'defaults'));
        });
      };

      CombinatorView.prototype.onClose = function() {
        return this.model.off();
      };

      return CombinatorView;

    })(base.Panel);
    return {
      CombinatorView: CombinatorView
    };
  });

}).call(this);
