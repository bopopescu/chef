// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var CatalogCollection, CatalogEntry, PRIVATE_URL_PREFIX, PUBLIC_URL_PREFIX, TargetCollection, TargetItemImageModel, TargetItemModel, TargetItemsCollection, TargetModel, TargetVersionColletion, base, _;
    PRIVATE_URL_PREFIX = '/api/v1/private';
    PUBLIC_URL_PREFIX = '/api/v1/public';
    base = require('src/base');
    _ = require('underscore');
    TargetItemModel = (function(_super) {

      __extends(TargetItemModel, _super);

      function TargetItemModel() {
        return TargetItemModel.__super__.constructor.apply(this, arguments);
      }

      TargetItemModel.prototype.catalog = null;

      TargetItemModel.prototype.defaults = {
        enabled: true,
        title: 'A New Item',
        subtitle: 'Enter a Subtitle which may be displayed on long format views.'
      };

      return TargetItemModel;

    })(Backbone.Model);
    TargetItemsCollection = (function(_super) {

      __extends(TargetItemsCollection, _super);

      function TargetItemsCollection() {
        return TargetItemsCollection.__super__.constructor.apply(this, arguments);
      }

      TargetItemsCollection.prototype.model = TargetItemModel;

      return TargetItemsCollection;

    })(Backbone.Collection);
    TargetModel = (function(_super) {

      __extends(TargetModel, _super);

      function TargetModel() {
        return TargetModel.__super__.constructor.apply(this, arguments);
      }

      TargetModel.prototype.idAttribute = '_id';

      TargetModel.prototype.dirty = false;

      TargetModel.prototype.defaults = {
        description: "Enter a description to identify this target.",
        enabled: true
      };

      TargetModel.prototype.urlRoot = function() {
        return PRIVATE_URL_PREFIX + '/target/' + this.get('name');
      };

      TargetModel.prototype.initialize = function() {
        return this.items = new TargetItemsCollection([], {
          parentModel: this
        });
      };

      TargetModel.prototype["delete"] = function() {
        var _this = this;
        return this.destroy({
          success: function() {
            return _this.fetch();
          },
          error: function() {
            return _this.fetch();
          }
        });
      };

      TargetModel.prototype.updateItemsCollection = function() {
        return this.items.reset(this.get('items'));
      };

      TargetModel.prototype.work = function(callback) {
        var copy;
        if (callback == null) {
          callback = function(data, textStatus, jqXHR) {};
        }
        copy = this.clone();
        copy.unset(copy.idAttribute);
        copy.set('version_tags', ["work." + USER.username]);
        copy.save().done(callback);
      };

      TargetModel.prototype.tag = function(newTag) {
        return this.set('version_tags', [newTag]).save();
      };

      TargetModel.prototype.isWorkingCopy = function() {
        var isWorkingCopy, item, itemParts, _i, _len, _ref;
        isWorkingCopy = false;
        _ref = this.get('version_tags');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          itemParts = item.split('.');
          if (itemParts.length === 2 && itemParts[0] === 'work') {
            isWorkingCopy = true;
            break;
          }
        }
        return isWorkingCopy;
      };

      return TargetModel;

    })(base.Model);
    TargetVersionColletion = (function(_super) {

      __extends(TargetVersionColletion, _super);

      function TargetVersionColletion() {
        return TargetVersionColletion.__super__.constructor.apply(this, arguments);
      }

      TargetVersionColletion.prototype.model = TargetModel;

      TargetVersionColletion.prototype.initialize = function(models, options) {
        TargetVersionColletion.__super__.initialize.call(this, models, options);
        return this.targetName = options.name;
      };

      TargetVersionColletion.prototype.url = function() {
        return PRIVATE_URL_PREFIX + '/target/' + this.targetName + '/';
      };

      return TargetVersionColletion;

    })(base.Collection);
    TargetCollection = (function(_super) {

      __extends(TargetCollection, _super);

      function TargetCollection() {
        return TargetCollection.__super__.constructor.apply(this, arguments);
      }

      TargetCollection.prototype.model = TargetModel;

      TargetCollection.prototype.initialize = function(models, options) {
        TargetCollection.__super__.initialize.call(this, models, options);
        return this.options = options || {};
      };

      TargetCollection.prototype.url = function() {
        var baseUrl, param, params, queryStringParts, supportedParams, value;
        baseUrl = this.options["public"] != null ? "" + PUBLIC_URL_PREFIX + "/target/" : "" + PRIVATE_URL_PREFIX + "/target/";
        supportedParams = ['fields', 'limit', 'offset', 'q', 'sort'];
        if ((this.options["public"] != null) && (this.options.q != null)) {
          baseUrl += "" + this.options.q;
          supportedParams.splice(_.indexOf(supportedParams, 'q'), 1);
        }
        params = _.pick(this.options, supportedParams);
        queryStringParts = [];
        if (!_.isEmpty(params)) {
          for (param in params) {
            if (!__hasProp.call(params, param)) continue;
            value = params[param];
            queryStringParts.push("" + (encodeURIComponent(param)) + "=" + (encodeURIComponent(value)));
          }
          baseUrl += "?" + (queryStringParts.join('&'));
        }
        return baseUrl;
      };

      return TargetCollection;

    })(base.Collection);
    CatalogEntry = (function(_super) {

      __extends(CatalogEntry, _super);

      function CatalogEntry() {
        return CatalogEntry.__super__.constructor.apply(this, arguments);
      }

      CatalogEntry.prototype.urlRoot = PRIVATE_URL_PREFIX + '/catalog/';

      CatalogEntry.prototype.getImg = function(size) {
        if (size == null) {
          size = 50;
        }
        return "http://img.iheart.com/sca/imscale?w=" + size + "&img=" + (this.get('img'));
      };

      return CatalogEntry;

    })(base.Model);
    CatalogCollection = (function(_super) {

      __extends(CatalogCollection, _super);

      function CatalogCollection() {
        return CatalogCollection.__super__.constructor.apply(this, arguments);
      }

      CatalogCollection.prototype.model = CatalogEntry;

      CatalogCollection.prototype.url = PRIVATE_URL_PREFIX + '/catalog/';

      return CatalogCollection;

    })(base.Collection);
    TargetItemImageModel = (function(_super) {

      __extends(TargetItemImageModel, _super);

      function TargetItemImageModel() {
        return TargetItemImageModel.__super__.constructor.apply(this, arguments);
      }

      TargetItemImageModel.prototype.defaults = {
        base_url: '',
        image_id: '',
        ops: [],
        extension: ''
      };

      TargetItemImageModel.prototype.getOriginalImageUrl = function() {
        if (this.get('image_id').length) {
          return "" + (this.get('base_url')) + (this.get('image_id')) + "." + (this.get('extension'));
        }
      };

      TargetItemImageModel.prototype.getNewImageUrl = function(type) {
        var op, operations, ops;
        ops = this.get('ops');
        if (!ops.length) {
          return;
        }
        operations = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ops.length; _i < _len; _i++) {
            op = ops[_i];
            _results.push("" + op.op + "(" + (op.args.join(',')) + ")");
          }
          return _results;
        })()).join(',');
        if (operations.length !== 0) {
          operations += '/';
        }
        return "" + (this.get('base_url')) + operations + (this.get('image_id')) + "." + (this.get('extension'));
      };

      return TargetItemImageModel;

    })(Backbone.Model);
    return {
      TargetModel: TargetModel,
      TargetVersion: TargetVersionColletion,
      TargetCollection: TargetCollection,
      CatalogCollection: CatalogCollection,
      TargetVersionColletion: TargetVersionColletion,
      TargetItemsCollection: TargetItemsCollection,
      TargetItemModel: TargetItemModel,
      TargetItemImageModel: TargetItemImageModel
    };
  });

}).call(this);
