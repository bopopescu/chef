// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, ANCHOR, AnchorView, BACK, Backbone, FileUploadView, ImageUploadAnchorView, NEXT, UPLOAD, bootstrapModalTemplate, cropProgressTemplate, fileUploadFormTemplate, models, _;
    Backbone = require('backbone');
    models = require('src/models');
    _ = require('underscore');
    $ = require('jquery');
    require('fileUpload/jquery.fileupload-ui');
    fileUploadFormTemplate = require('eco/bits/FileUploadForm');
    cropProgressTemplate = require('eco/crop/progress');
    bootstrapModalTemplate = require('eco/bootstrap-modal');
    UPLOAD = 'upload';
    ANCHOR = 'anchor';
    BACK = 'leftChevron';
    NEXT = 'rightChevron';
    ImageUploadAnchorView = (function(_super) {

      __extends(ImageUploadAnchorView, _super);

      function ImageUploadAnchorView() {
        return ImageUploadAnchorView.__super__.constructor.apply(this, arguments);
      }

      ImageUploadAnchorView.prototype.className = 'cropTabView';

      ImageUploadAnchorView.prototype.template = bootstrapModalTemplate;

      ImageUploadAnchorView.prototype.cropProgressTemplate = cropProgressTemplate;

      ImageUploadAnchorView.prototype.targetItemModel = null;

      ImageUploadAnchorView.prototype.targetItemImageModel = null;

      ImageUploadAnchorView.prototype.currentSubView = null;

      ImageUploadAnchorView.prototype.events = {
        'click .btn.btn-primary': 'saveChanges'
      };

      ImageUploadAnchorView.prototype.initialize = function(options, targetItemModel) {
        if (!(targetItemModel instanceof Backbone.Model)) {
          throw new Error('Need an instance of Backbone.Model');
        }
        this.targetItemModel = targetItemModel;
        this.targetItemImageModel = new models.TargetItemImageModel(this.targetItemModel.get('img_meta'));
        this.render();
      };

      ImageUploadAnchorView.prototype.render = function() {
        var _this = this;
        this.$el.html(this.template({
          headerText: 'Crop Image',
          extraClasses: ' wideModal',
          bodyHtml: this.cropProgressTemplate()
        }));
        $('body').append(this.el);
        this.renderSubView(new FileUploadView({
          model: this.targetItemImageModel
        }));
        this.$el.find('.modal').modal().on('hidden', function() {
          return _this.close();
        });
        this.$el.find('.btn.btn-primary').addClass('disabled').attr('disabled', 'disabled');
        return this;
      };

      ImageUploadAnchorView.prototype.renderSubView = function(newView) {
        this.onClose();
        this.currentSubView = newView;
        this.currentSubView.on('anchorPicked', this.anchorPicked, this);
        this.currentSubView.on('uploadReady', this.uploadReady, this);
        this.currentSubView.on('uploadFinished', this.uploadFinished, this);
        this.$el.find('.cropImageContainer').html(this.currentSubView.render().el);
      };

      ImageUploadAnchorView.prototype.anchorPicked = function() {
        this.$el.find('.btn.btn-primary').removeClass('disabled').removeAttr('disabled');
      };

      ImageUploadAnchorView.prototype.uploadReady = function() {
        if (!this.targetItemImageModel.getOriginalImageUrl()) {
          return this.$el.find("." + NEXT).addClass('disabled');
        }
      };

      ImageUploadAnchorView.prototype.uploadFinished = function() {
        this.$el.find('.btn.btn-primary').addClass('disabled').attr('disabled', 'disabled');
        return this.$el.find("." + NEXT).removeClass('disabled');
      };

      ImageUploadAnchorView.prototype.saveChanges = function() {
        var newImageUrl;
        if (newImageUrl = this.targetItemImageModel.getNewImageUrl('default')) {
          this.targetItemModel.set({
            image_url: newImageUrl,
            img_meta: this.targetItemImageModel.attributes
          });
        }
        this.$el.find('.modal').modal('hide');
      };

      ImageUploadAnchorView.prototype.step = function(event, new_step) {
        var button, newSpotInWizard, otherButton, previousSpotInWizard, spotInWizard, updateProgressiveDisclosure, wizard, wizardKeys,
          _this = this;
        button = $(event.currentTarget);
        if (button.hasClass('disabled')) {
          return;
        }
        updateProgressiveDisclosure = function() {
          var completedStep, progress, progressBar;
          completedStep = _this.$el.find("div[data-step='" + new_step + "']");
          progress = completedStep.css('left');
          progressBar = _this.$el.find('.progress .bar');
          completedStep.next('.step').removeClass('step-full').addClass('step-empty');
          progressBar.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function() {
            completedStep.removeClass('step-empty').addClass('step-full');
            return progressBar.off();
          });
          progressBar.css('width', progress);
        };
        otherButton = this.$el.find("." + (_.find([BACK, NEXT], function(direction) {
          return !button.hasClass(direction);
        })));
        otherButton.removeClass('disabled');
        wizard = {};
        wizard[UPLOAD] = FileUploadView;
        wizard[ANCHOR] = AnchorView;
        wizardKeys = button.hasClass(BACK) ? _.keys(wizard).reverse() : _.keys(wizard);
        spotInWizard = _.indexOf(wizardKeys, new_step);
        newSpotInWizard = spotInWizard + 1;
        previousSpotInWizard = spotInWizard - 1;
        if (newSpotInWizard === wizardKeys.length) {
          button.addClass('disabled');
        } else {
          button.data('args', wizardKeys[newSpotInWizard]);
        }
        otherButton.data('args', wizardKeys[previousSpotInWizard]);
        updateProgressiveDisclosure();
        this.renderSubView(new wizard[new_step]({
          model: this.targetItemImageModel
        }));
      };

      ImageUploadAnchorView.prototype.onClose = function() {
        var _ref;
        if ((_ref = this.currentSubView) != null) {
          _ref.off().close();
        }
        return this.currentSubView = null;
      };

      return ImageUploadAnchorView;

    })(Backbone.View);
    AnchorView = (function(_super) {

      __extends(AnchorView, _super);

      function AnchorView() {
        return AnchorView.__super__.constructor.apply(this, arguments);
      }

      AnchorView.prototype.className = 'anchorContainer';

      AnchorView.prototype.getAnchorImageDimensions = null;

      AnchorView.prototype.initialize = function() {
        this.$el.addClass('thumbnail');
        this.getAnchorImageDimensions = this.imageDimensionsWrapper();
      };

      AnchorView.prototype.render = function() {
        this.$el.html(this.make('img', {
          'src': this.model.getOriginalImageUrl(),
          'alt': '',
          'data-callback': 'handleImageClick'
        }));
        this.renderAnchorFromModel();
        return this;
      };

      AnchorView.prototype.renderAnchorFromModel = function() {
        var anchor, image, op,
          _this = this;
        anchor = (function() {
          var _i, _len, _ref, _results;
          _ref = this.model.get('ops');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            op = _ref[_i];
            if (op.op === 'anchor') {
              _results.push(op);
            }
          }
          return _results;
        }).call(this);
        if (anchor.length) {
          image = this.$el.find('img');
          this.getAnchorImageDimensions(this.model.getOriginalImageUrl(), function(dimensions) {
            var heightRatio, widthRatio;
            widthRatio = image.width() / dimensions.width;
            heightRatio = image.height() / dimensions.height;
            return _this.markAnchor(Math.floor(anchor[0].args[0] * widthRatio), Math.floor(anchor[0].args[1] * heightRatio));
          });
        }
      };

      AnchorView.prototype.markAnchor = function(xCoordinate, yCoordinate) {
        var anchorClass, anchorPoint, getCoordinates,
          _this = this;
        anchorClass = 'anchorPoint';
        getCoordinates = function(anchorElement) {
          return {
            left: "" + (xCoordinate - (anchorElement.outerWidth() / 4)) + "px",
            top: "" + (yCoordinate - (anchorElement.outerHeight() / 4)) + "px"
          };
        };
        if ((anchorPoint = this.$el.find("." + anchorClass)).length) {
          anchorPoint.animate(getCoordinates(anchorPoint));
        } else {
          anchorPoint = $(this.make('div', {
            style: "display: hidden;",
            "class": anchorClass
          }));
          this.$el.append(anchorPoint);
          anchorPoint.css(getCoordinates(anchorPoint)).fadeIn();
        }
      };

      AnchorView.prototype.handleImageClick = function(event) {
        var imageOffset, xCoordinate, yCoordinate,
          _this = this;
        imageOffset = $(event.target).offset();
        xCoordinate = Math.abs(event.pageX - (imageOffset.left - parseInt($(event.target).css('margin-left'))));
        yCoordinate = Math.abs(event.pageY - imageOffset.top);
        this.getAnchorImageDimensions(this.model.getOriginalImageUrl(), function(dimensions) {
          var anchor, args, heightRatio, image, op, ops, widthRatio;
          image = _this.$el.find('img');
          widthRatio = dimensions.width / image.width();
          heightRatio = dimensions.height / image.height();
          ops = _this.model.get('ops');
          anchor = (function() {
            var _i, _len, _ref, _results;
            _ref = this.model.get('ops');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              op = _ref[_i];
              if (op.op === 'anchor') {
                _results.push(op);
              }
            }
            return _results;
          }).call(_this);
          args = [String(Math.floor(widthRatio * xCoordinate)), String(Math.floor(heightRatio * yCoordinate))];
          if (anchor.length) {
            anchor[0].args = args;
          } else {
            ops.push({
              op: 'anchor',
              args: args
            });
          }
          return _this.trigger('anchorPicked');
        });
        this.markAnchor(xCoordinate, yCoordinate);
      };

      AnchorView.getTrueImageDimensions = function(url, callback) {
        $('<img/>').attr('src', url).load(function() {
          return callback({
            width: this.width,
            height: this.height
          });
        });
      };

      AnchorView.prototype.imageDimensionsWrapper = function() {
        var dimensions,
          _this = this;
        dimensions = null;
        return (function() {
          return function(url, callback) {
            var wrappedCallback;
            if (dimensions != null) {
              return callback(dimensions);
            } else {
              wrappedCallback = function(newDimensions) {
                dimensions = newDimensions;
                return callback(dimensions);
              };
              return AnchorView.getTrueImageDimensions(url, wrappedCallback);
            }
          };
        })();
      };

      return AnchorView;

    })(Backbone.View);
    FileUploadView = (function(_super) {

      __extends(FileUploadView, _super);

      function FileUploadView() {
        return FileUploadView.__super__.constructor.apply(this, arguments);
      }

      FileUploadView.prototype.template = fileUploadFormTemplate;

      FileUploadView.prototype.model = null;

      FileUploadView.prototype.uploader = null;

      FileUploadView.prototype.uploadEndPoint = '/api/v1/private/image/';

      FileUploadView.prototype.render = function() {
        this.onClose();
        this.$el.html(this.template({
          imgSrc: this.model.getOriginalImageUrl(),
          action: this.uploadEndPoint
        }));
        this.initializeFileUpload();
        return this;
      };

      FileUploadView.prototype.initializeFileUpload = function() {
        var _this = this;
        this.uploader = this.$el;
        this.uploader.fileupload({
          maxNumberOfFiles: 1,
          autoUpload: true,
          uploadTemplateId: null,
          downloadTemplateId: null,
          uploadTemplate: function() {},
          downloadTemplate: function() {},
          done: function(e, data) {
            return _this.model.set(data.result);
          },
          stop: function(e) {
            _this.render();
            return _this.trigger('uploadFinished');
          }
        });
        this.trigger('uploadReady');
      };

      FileUploadView.prototype.onClose = function() {
        var _ref;
        if ((_ref = this.uploader) != null) {
          _ref.fileupload('destroy');
        }
      };

      return FileUploadView;

    })(Backbone.View);
    return {
      ImageUploadAnchorView: ImageUploadAnchorView,
      AnchorView: AnchorView,
      FileUploadView: FileUploadView
    };
  });

}).call(this);
