// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var Backbone, rivets, runType;
    Backbone = require('backbone');
    rivets = require('rivets');
    runType = function(obj, keypath, callbacks) {
      var cid, property, _ref;
      if (obj instanceof Backbone.Model) {
        return callbacks.model();
      } else if (obj instanceof Backbone.Collection) {
        _ref = keypath.split('.'), cid = _ref[0], property = _ref[1];
        return callbacks.collection(cid, property);
      }
    };
    rivets.configure({
      adapter: {
        subscribe: function(obj, keypath, callback) {
          runType(obj, keypath, {
            model: function() {
              callback.wrapped = function(m, v) {
                return callback(v);
              };
              return obj.on("change:" + keypath, callback.wrapped);
            },
            collection: function(cid, property) {
              callback.wrapped = function(m, v) {
                if (m.cid === cid) {
                  return callback(v);
                }
              };
              return obj.on("change:" + property, callback.wrapped);
            }
          });
        },
        unsubscribe: function(obj, keypath, callback) {
          runType(obj, keypath, {
            model: function() {
              return obj.off("change:" + keypath, callback.wrapped);
            },
            collection: function(cid, property) {
              return obj.off("change:" + property, callback.wrapped);
            }
          });
        },
        read: function(obj, keypath) {
          return runType(obj, keypath, {
            model: function() {
              return obj.get(keypath);
            },
            collection: function(cid, property) {
              return obj.getByCid(cid).get(property);
            }
          });
        },
        publish: function(obj, keypath, value) {
          runType(obj, keypath, {
            model: function() {
              return obj.set(keypath, value);
            },
            collection: function(cid, property) {
              return obj.getByCid(cid).set(property, value);
            }
          });
        }
      },
      formatters: {
        list: function(items) {
          var item, out, _i, _len;
          out = '';
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            out += "<li>" + item + "</li>";
          }
          return out;
        }
      }
    });
    return rivets;
  });

}).call(this);
