// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, AttachArtistModal, Backbone, FCList, FeaturedContentBaseView, FeaturedContentEditView, FeaturedContentListView, FeaturedContentViewView, Handlebars, TargetGroupModule, TargetItem, TargetItemBase, TargetItemView, Workspace, attachArtistModalTemplate, attachResultsTemplate, attachTemplate, autosize, base, bootstrapModalTemplate, combinatorView, crop, datePickerInputComponent, dateRangePicker, defaultStyles, editBigDescription, editItemTemplate, editToolbarTemplate, featuredContentViewBaseTemplate, headerTemplate, listTemplate, log, models, resultTemplate, router, run, targets, textStyles, treeview, viewBigDescription, viewItemTemplate, viewToolbarTemplate, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Handlebars = require('handlebars');
    base = require('src/base');
    models = require('src/models');
    dateRangePicker = require('dateRangePicker/views');
    combinatorView = require('src/views/combinator');
    TargetGroupModule = require('src/views/TargetGroup');
    crop = require('src/crop');
    headerTemplate = require('eco/featured/header');
    viewToolbarTemplate = require('eco/featured/view/toolbar');
    editToolbarTemplate = require('eco/featured/edit/toolbar');
    viewBigDescription = require('eco/featured/view/big_description');
    editBigDescription = require('eco/featured/edit/big_description');
    attachTemplate = require('eco/featured/attachment');
    listTemplate = require('text!templates/fc-list.html');
    featuredContentViewBaseTemplate = require('eco/featured/single-base');
    editItemTemplate = require('eco/featured/edit/item');
    viewItemTemplate = require('eco/featured/view/item');
    resultTemplate = Handlebars.compile(require('text!templates/fc-list-results.html'));
    attachResultsTemplate = require('eco/featured/attach-results');
    attachArtistModalTemplate = require('eco/featured/attach-artist-modal');
    datePickerInputComponent = require('eco/bits/DatePickerInputComponent');
    bootstrapModalTemplate = require('eco/bootstrap-modal');
    treeview = require('src/tree/views');
    log = console.log;
    require('../../lib/backboneExtensions/backbone.view.actionPanel');
    Handlebars.registerHelper('encode', function(text) {
      return encodeURIComponent(text);
    });
    textStyles = ['fontFamily', 'fontSize', 'fontWeight', 'fontStyle', 'letterSpacing', 'textTransform', 'wordSpacing', 'textIndent', 'lineHeight', 'padding'];
    defaultStyles = {
      'position': 'absolute',
      '-moz-box-sizing': 'content-box',
      '-webkit-box-sizing': 'content-box',
      'box-sizing': 'content-box',
      'word-wrap': 'break-word',
      'overflow': 'hidden'
    };
    autosize = function(e) {
      var $area, $clone, active, boxOffset, maxHeight, minHeight, style, uuid, _doResize, _i, _len;
      $area = $(e.target);
      boxOffset = 0;
      minHeight = 25;
      maxHeight = parseInt($area.css('maxHeight'), 10);
      if ($area.data('clone') != null) {
        $clone = $('#' + $area.data('clone'));
      } else {
        uuid = Math.floor(Math.random() * 1e16);
        $area.data('clone', uuid).attr('data-cloneid', uuid);
        $clone = $('<textarea class="mirror" style="height: 0 !important; min-height: 0 !important;"/>').attr('id', uuid).css(defaultStyles);
        for (_i = 0, _len = textStyles.length; _i < _len; _i++) {
          style = textStyles[_i];
          $clone.css(style, $area.css(style));
        }
        $('body').append($clone);
      }
      $('textarea.mirror').each(function(i, e) {
        if ($("textarea[data-cloneid=" + e.id + "]").length < 1) {
          return $(e).remove();
        }
      });
      active = false;
      _doResize = function(area, clone) {
        var height, overflow;
        if (!active) {
          active = true;
          clone.value = area.value;
          clone.style.overflowY = area.style.overflowY;
          clone.style.width = $area.css('width');
          clone.scrollTop = 0;
          clone.scrollTop = 9e4;
          height = clone.scrollTop;
          overflow = 'hidden';
          if (height > maxHeight) {
            height = maxHeight;
            overflow = 'scroll';
          } else if (height < minHeight) {
            height = minHeight;
          }
          area.style.overflowY = overflow;
          area.style.height = height + boxOffset + 'px';
          return setTimeout((function() {
            return active = false;
          }), 1);
        }
      };
      return _doResize($area[0], $clone[0]);
    };
    $('body').on('input autoresize', 'textarea', autosize);
    Workspace = (function(_super) {

      __extends(Workspace, _super);

      function Workspace() {
        return Workspace.__super__.constructor.apply(this, arguments);
      }

      Workspace.prototype.routes = {
        '': 'list',
        'page/:page/': 'page',
        'edit/:name/': 'versions',
        'edit/:name/:version': 'edit',
        'target/:name/:version': 'target',
        'combinator/': 'combinator',
        'targetgroup/': 'targetGroup',
        'targetgroup/:name': 'targetGroupItem',
        'treeview/': 'treeview'
      };

      Workspace.prototype.currentView = null;

      Workspace.prototype.switchView = function(newView) {
        if (this.currentView) {
          $('[data-tip]', this.currentView.$el.find('.toolbar')).tooltip('hide');
          this.currentView.close();
        }
        this.currentView = newView;
        return this.currentView;
      };

      Workspace.prototype.list = function() {
        this.switchView(new FeaturedContentListView());
        $('#main').html(this.currentView.el);
        return targets.fetch();
      };

      Workspace.prototype.page = function(page) {
        this.switchView(new FeaturedContentListView());
        $('#container').html(this.currentView.el);
        return targets.pageTo(page);
      };

      Workspace.prototype.target = function(name, version) {
        var target,
          _this = this;
        target = new models.TargetModel({
          name: name,
          _id: version
        });
        return target.fetch({
          success: function() {
            var newView;
            newView = target.isWorkingCopy() ? FeaturedContentEditView : FeaturedContentViewView;
            _this.switchView(new newView({
              model: target,
              stack: [['<h1>Featured Content Directory</h1>', '#']]
            }));
            $('#main').html(_this.currentView.el);
            if (_this.currentView instanceof FeaturedContentEditView) {
              return $('textarea').trigger('autoresize');
            }
          }
        });
      };

      Workspace.prototype.combinator = function() {
        this.switchView(new combinatorView.CombinatorView());
        return $('#main').html(this.currentView.el);
      };

      Workspace.prototype.treeview = function() {
        this.switchView(new treeview());
        return $('#main').html(this.currentView.el);
      };

      Workspace.prototype.targetGroup = function() {
        this.switchView(new TargetGroupModule.TargetGroup());
        return $('#main').html(this.currentView.el);
      };

      Workspace.prototype.targetGroupItem = function(name) {
        this.switchView(new TargetGroupModule.TargetGroupEdit({
          name: name
        }));
        return $('#main').html(this.currentView.el);
      };

      return Workspace;

    })(Backbone.Router);
    FeaturedContentListView = (function(_super) {

      __extends(FeaturedContentListView, _super);

      function FeaturedContentListView() {
        return FeaturedContentListView.__super__.constructor.apply(this, arguments);
      }

      FeaturedContentListView.prototype.title = "Featured Content Editor";

      FeaturedContentListView.prototype.openNew = false;

      FeaturedContentListView.prototype.template = listTemplate;

      FeaturedContentListView.prototype.events = {
        "click a.show-new-well": "toggleNew",
        "click button#mytargets": "popSearch",
        "click button#testtargets": "popSearch",
        "change #search": "updateFilter",
        "keyup #search": "updateFilterManual",
        "click #listfilt": "updateFilter",
        "submit #new-target": "newTarget"
      };

      FeaturedContentListView.prototype.initialize = function(options) {
        FeaturedContentListView.__super__.initialize.call(this, options);
        return this.render();
      };

      FeaturedContentListView.prototype.popSearch = function(e) {
        e = $(e.target);
        if (e.is('#mytargets')) {
          $('#search').attr('value', '@work.' + USER.username);
        } else if (e.is('#testtargets')) {
          $('#search').attr('value', '@testing');
        }
        return $('#search').change();
      };

      FeaturedContentListView.prototype.updateFilterManual = function(e) {
        if (e.keyCode === 13) {
          return $('#search').change();
        }
      };

      FeaturedContentListView.prototype.updateFilter = function(e) {
        var k, key, search, state, v, _ref;
        state = targets.metastate;
        search = $('#search').attr('value');
        _ref = this.filterBar.state.attributes;
        for (k in _ref) {
          v = _ref[k];
          key = "f." + k;
          if (v !== null) {
            state.set(key, v, {
              silent: true
            });
          } else {
            state.unset(key, {
              silent: true
            });
          }
        }
        if (search) {
          state.set('q', search, {
            silent: true
          });
        } else {
          state.unset('q', {
            silent: true
          });
        }
        return state.change();
      };

      FeaturedContentListView.prototype.toggleNew = function(e) {
        if (e) {
          e.preventDefault();
        }
        this.openNew = !this.openNew;
        $('#new-target').toggle(this.openNew).find('input[type=text]').val('').focus();
        return $('a.show-new-well').toggleClass('active', this.openNew);
      };

      FeaturedContentListView.prototype.newTarget = function(e) {
        var model,
          _this = this;
        e.preventDefault();
        model = new models.TargetModel();
        return model.save({
          name: $("#name", e.currentTarget).val()
        }, {
          url: '/api/v1/private/target/',
          success: function(model) {
            var name, version;
            name = model.get('name');
            version = model.id;
            if ($("#editImmediately:checked", e.currentTarget).length) {
              return router.navigate("target/" + name + "/" + version, {
                trigger: true
              });
            } else {
              _this.toggleNew();
              return targets.fetch();
            }
          }
        });
      };

      FeaturedContentListView.prototype.render = function() {
        FeaturedContentListView.__super__.render.call(this);
        this.inner.html(this.template);
        this.$el.find('span#create-name').text(USER.username);
        this.list = new FCList({
          el: this.$el.find('#results'),
          collection: targets
        });
        this.list.delegateEvents();
        this.filterBar = new base.FilterBar({
          el: this.$el.find('#listfilt')
        });
        this.filterBar.delegateEvents();
        this.pager = new base.Pagination({
          el: this.$el.find('.pagination'),
          collection: targets
        });
        return this.pager.delegateEvents();
      };

      return FeaturedContentListView;

    })(base.Panel);
    FCList = (function(_super) {

      __extends(FCList, _super);

      function FCList() {
        return FCList.__super__.constructor.apply(this, arguments);
      }

      FCList.prototype.template = resultTemplate;

      FCList.prototype.initialize = function() {
        return this.collection.on('reset', function(e) {
          return this.render();
        }, this);
      };

      FCList.prototype.render = function() {
        var ctx;
        ctx = {
          collection: this.collection,
          format_date: function() {
            var d;
            d = new Date(this.get('meta').mtime);
            return d.toDateString().split(' ').slice(1, 3).join(' ');
          },
          items_list: function() {
            return this.get('items').slice(0, 4);
          },
          paragraph: function() {
            var _ref;
            return (_ref = this.get('description')) != null ? _ref.truncate(100, false) : void 0;
          }
        };
        return this.$el.html(this.template(ctx));
      };

      FCList.prototype.navigateTo = function(event, path) {
        event.preventDefault();
        return router.navigate(path, {
          trigger: true
        });
      };

      return FCList;

    })(Backbone.View);
    TargetItemBase = (function(_super) {

      __extends(TargetItemBase, _super);

      function TargetItemBase() {
        return TargetItemBase.__super__.constructor.apply(this, arguments);
      }

      TargetItemBase.prototype.template = null;

      TargetItemBase.prototype.attachTemplate = attachTemplate;

      TargetItemBase.prototype.tagName = 'li';

      TargetItemBase.prototype.attributes = {
        "class": 'item'
      };

      TargetItemBase.prototype.initialize = function(options) {
        this.items = options.items;
        this.model.on('change:attachments', this.renderAttachment, this);
      };

      TargetItemBase.prototype.renderAttachment = function() {
        $('[data-tip]', this.$el).tooltip('hide');
        return this.$el.find('.attachments').html(this.attachTemplate({
          attachments: this.model.get('attachments')
        }));
      };

      TargetItemBase.prototype.onClose = function() {
        return this.model.off('change', this.renderAttachment, this);
      };

      return TargetItemBase;

    })(Backbone.View);
    TargetItemView = (function(_super) {

      __extends(TargetItemView, _super);

      function TargetItemView() {
        return TargetItemView.__super__.constructor.apply(this, arguments);
      }

      TargetItemView.prototype.template = viewItemTemplate;

      TargetItemView.prototype.initialize = function(options) {
        TargetItemView.__super__.initialize.call(this, options);
        return this.render();
      };

      TargetItemView.prototype.render = function() {
        TargetItemView.__super__.render.call(this);
        return this.$el.html(this.template({
          data: this.model.attributes
        }));
      };

      return TargetItemView;

    })(TargetItemBase);
    TargetItem = (function(_super) {

      __extends(TargetItem, _super);

      function TargetItem() {
        return TargetItem.__super__.constructor.apply(this, arguments);
      }

      TargetItem.prototype.template = editItemTemplate;

      TargetItem.prototype.events = {
        "change input,textarea": "update",
        "focus input[type=text],textarea": function(e) {
          return $(e.target).select();
        },
        "mouseup input[type=text],textarea": function(e) {
          return e.preventDefault();
        }
      };

      TargetItem.prototype.initialize = function(options) {
        TargetItem.__super__.initialize.call(this, options);
        this.model.on('change', this.render, this);
        return this.render();
      };

      TargetItem.prototype.render = function() {
        this.$el.html(this.template({
          data: this.model.attributes,
          first: this.model.cid === this.items.models[0].cid ? ' disabled' : '',
          last: this.model.cid === this.items.models[this.items.models.length - 1].cid ? ' disabled' : ''
        }));
        this.renderAttachment();
        return this.$el.find('textarea').trigger('autoresize');
      };

      TargetItem.prototype.update = function(e) {
        var input, modelData, o, path, read, target, _i, _len, _ref;
        read = function(path, o) {
          var ps;
          if (!path.length) {
            return o;
          }
          ps = path.shift();
          if (o[ps]) {
            return read(path, o[ps]);
          } else {
            throw Error("No Path to Object");
          }
        };
        modelData = this.model.toJSON();
        _ref = this.$el.find('form').serializeArray();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          path = input.name.split('.');
          target = path.pop();
          o = read(path, modelData);
          o[target] = input.value;
        }
        return this.model.set(modelData);
      };

      TargetItem.prototype.move = function(e, direction) {
        var index, moveIndex, tmpValue;
        index = _.pluck(this.items.models, 'cid').indexOf(this.model.cid);
        if ((direction === 'up' && index === 0) || (direction === 'down' && index === this.items.length - 1)) {
          return;
        }
        moveIndex = direction === 'up' ? index - 1 : index + 1;
        tmpValue = this.items.models[index];
        this.items.models[index] = this.items.models[moveIndex];
        this.items.models[moveIndex] = tmpValue;
        return this.items.trigger('move');
      };

      TargetItem.prototype.enable = function(e, enable) {
        return this.model.set('enabled', enable === 'y' ? true : false);
      };

      TargetItem.prototype.important = function(e, important) {
        return this.model.set('important', important === 'y' ? true : false);
      };

      TargetItem.prototype["delete"] = function(e) {
        var el,
          _this = this;
        el = $(e.currentTarget);
        if (!el.hasClass('btn-danger')) {
          el.popover({
            trigger: 'manual',
            placement: 'top'
          });
          el.addClass('btn-danger');
          el.popover('show');
          return $('body').onPrio('click.modal-click', function(e) {
            var t;
            e.stopImmediatePropagation();
            $('body').off('click.modal-click');
            t = $(e.target);
            el.popover('hide');
            el.removeClass('btn-danger');
            if (t.is(el) || el.find(t).length > 0) {
              return _this.items.remove(_this.model.cid);
            }
          }, 5);
        }
      };

      TargetItem.prototype.addArtist = function(e) {
        var attachModal;
        return attachModal = new AttachArtistModal({
          item: this.model
        });
      };

      TargetItem.prototype.clearAttachment = function(e, index) {
        return this.model.set('attachments', this.model.get('attachments').clone().removeAt(index));
      };

      TargetItem.prototype.clearAttachments = function(e) {
        return this.model.set({
          attachments: []
        });
      };

      TargetItem.prototype.cropImage = function(e) {
        var cropTabView;
        return cropTabView = new crop.ImageUploadAnchorView({}, this.model);
      };

      TargetItem.prototype.onClose = function() {
        return this.model.off('change', this.render, this);
      };

      return TargetItem;

    })(TargetItemBase);
    FeaturedContentBaseView = (function(_super) {

      __extends(FeaturedContentBaseView, _super);

      function FeaturedContentBaseView() {
        return FeaturedContentBaseView.__super__.constructor.apply(this, arguments);
      }

      FeaturedContentBaseView.prototype.type = null;

      FeaturedContentBaseView.prototype.targetItemClass = null;

      FeaturedContentBaseView.prototype.template = featuredContentViewBaseTemplate;

      FeaturedContentBaseView.prototype.headerTemplate = headerTemplate;

      FeaturedContentBaseView.prototype.toolbarTemplate = null;

      FeaturedContentBaseView.prototype.targetItems = null;

      FeaturedContentBaseView.prototype.versions = null;

      FeaturedContentBaseView.prototype.renderList = [];

      FeaturedContentBaseView.prototype.events = {
        'change #versionselect': 'changeVersion'
      };

      FeaturedContentBaseView.prototype.initialize = function(options) {
        FeaturedContentBaseView.__super__.initialize.call(this, options);
        this.targetItems = new models.TargetItemsCollection(this.model.get('items'));
        this.versions = new models.TargetVersionColletion([], {
          name: this.model.get('name')
        });
        return this.versions.on('reset', this.renderHeader, this);
      };

      FeaturedContentBaseView.prototype.render = function() {
        FeaturedContentBaseView.__super__.render.call(this);
        return this;
      };

      FeaturedContentBaseView.prototype.renderHeader = function() {
        this.$el.find('div.header').html(this.headerTemplate({
          versions: this.versions.models,
          name: this.model.get('name'),
          tags: this.model.get('version_tags')
        }));
        this.$el.find('.chzn-select').chosen();
      };

      FeaturedContentBaseView.prototype.renderItems = function() {
        var div, item, targetItem, _i, _len, _ref;
        div = $('<div>');
        while (item = this.renderList.pop()) {
          item.close();
        }
        _ref = this.targetItems.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          targetItem = new this.targetItemClass({
            model: item,
            items: this.targetItems
          });
          this.renderList.push(targetItem);
          div.append(targetItem.el);
        }
        this.inner.find('#target-items').empty().append(div.children());
      };

      FeaturedContentBaseView.prototype.changeVersion = function(e) {
        var name, version;
        name = this.model.get('name');
        version = $(e.target).find(':selected').attr('value');
        router.navigate("target/" + name + "/" + version, {
          trigger: true
        });
      };

      FeaturedContentBaseView.prototype.createWorkingCopy = function(event) {
        var callback;
        event.preventDefault();
        callback = function(data, textStatus, jqXHR) {
          var locationParts, name, version;
          locationParts = jqXHR.getResponseHeader('Location').split('/');
          version = locationParts.pop();
          name = locationParts.pop();
          return router.navigate("target/" + name + "/" + version, {
            trigger: true
          });
        };
        return this.model.work(callback);
      };

      FeaturedContentBaseView.prototype.onClose = function() {
        this.versions.off('reset', this.renderHeader, this);
      };

      return FeaturedContentBaseView;

    })(base.Panel);
    FeaturedContentViewView = (function(_super) {

      __extends(FeaturedContentViewView, _super);

      function FeaturedContentViewView() {
        return FeaturedContentViewView.__super__.constructor.apply(this, arguments);
      }

      FeaturedContentViewView.prototype.type = 'view';

      FeaturedContentViewView.prototype.toolbarTemplate = viewToolbarTemplate;

      FeaturedContentViewView.prototype.targetItemClass = TargetItemView;

      FeaturedContentViewView.prototype.initialize = function(options) {
        FeaturedContentViewView.__super__.initialize.call(this, options);
        this.versions.fetch();
        this.render();
        this.renderItems();
      };

      FeaturedContentViewView.prototype.render = function() {
        FeaturedContentViewView.__super__.render.call(this);
        this.inner.html(this.template({
          toolbar: this.toolbarTemplate(),
          bigDescription: viewBigDescription({
            description: this.model.get('description')
          })
        }));
        return this;
      };

      FeaturedContentViewView.prototype.onClose = function() {
        FeaturedContentViewView.__super__.onClose.call(this);
      };

      return FeaturedContentViewView;

    })(FeaturedContentBaseView);
    FeaturedContentEditView = (function(_super) {
      var dateRangePickerInstance;

      __extends(FeaturedContentEditView, _super);

      function FeaturedContentEditView() {
        return FeaturedContentEditView.__super__.constructor.apply(this, arguments);
      }

      FeaturedContentEditView.prototype.type = 'edit';

      FeaturedContentEditView.prototype.toolbarTemplate = editToolbarTemplate;

      FeaturedContentEditView.prototype.targetItemClass = TargetItem;

      dateRangePickerInstance = null;

      FeaturedContentEditView.prototype.events = _.extend({
        'change textarea[name=description]': 'updateDescription',
        'click form.tagForm button': 'clickTagFormButton'
      }, FeaturedContentEditView.__super__.events);

      FeaturedContentEditView.prototype.initialize = function(options) {
        var _this = this;
        FeaturedContentEditView.__super__.initialize.call(this, options);
        this.model.on('change', function() {
          return _this.model.trigger('dirty', true);
        });
        this.model.on('clean dirty', function(dirty) {
          _this.model.dirty = dirty;
          return _this.renderBody();
        });
        this.model.on('change:name change:version_tags', function() {
          return _this.versions.fetch();
        });
        this.targetItems.on('change', function() {
          return _this.model.trigger('dirty', true);
        });
        this.targetItems.on('move add remove', function() {
          _this.model.trigger('dirty', true);
          return _this.renderItems();
        });
        this.render();
        this.renderBody();
        this.renderDatePickerInput();
        this.renderItems();
        return this.versions.fetch();
      };

      FeaturedContentEditView.prototype.updateDescription = function(e) {
        return this.model.set('description', $(e.target).attr('value'));
      };

      FeaturedContentEditView.prototype.addItem = function(e) {
        return this.targetItems.add(new models.TargetItemModel());
      };

      FeaturedContentEditView.prototype["delete"] = function(e) {
        var el,
          _this = this;
        el = $(e.currentTarget);
        if (!el.hasClass('btn-danger')) {
          el.popover({
            trigger: 'manual',
            placement: 'top'
          });
          el.addClass('btn-danger');
          el.popover('show');
          return this.$el.one('click', function(e) {
            if (el.find(e.target).length > 0 || el.is(e.target)) {
              _this.model["delete"]();
            }
            el.popover('hide');
            return el.removeClass('btn-danger');
          });
        }
      };

      FeaturedContentEditView.prototype.unDelete = function(e) {
        return this.model.save({}, {
          success: function(model) {
            return model.fetch();
          }
        });
      };

      FeaturedContentEditView.prototype.save = function(e) {
        var el,
          _this = this;
        el = $(e.currentTarget);
        el.addClass('disabled');
        return this.model.save({
          'items': this.targetItems.toJSON()
        }, {
          wait: true,
          success: function() {
            _this.model.trigger('dirty', false);
            el.removeClass('disabled');
            return base.messages.success("" + (_this.model.get('name')) + " was Saved Successfully.");
          }
        });
      };

      FeaturedContentEditView.prototype.enable = function(e, enable) {
        return this.model.set({
          enabled: enable === 'y' ? true : false
        });
      };

      FeaturedContentEditView.prototype.publish = function(event, tag) {
        var _this = this;
        return this.model.tag(tag).done(function() {
          return Backbone.history.loadUrl(Backbone.history.fragment);
        });
      };

      FeaturedContentEditView.prototype.clickTagFormButton = function(event) {
        var button, form, value;
        event.preventDefault();
        button = $(event.currentTarget);
        form = button.parents('form');
        if ((value = form.find('input').val()) !== '') {
          form.find('.control-group').removeClass('error').find('.btn').removeClass('btn-danger');
          if (button.hasClass('calendar')) {
            return this.publishWithDate(event, value);
          } else {
            return this.publish(null, value);
          }
        } else {
          return form.find('.control-group').addClass('error').find('.btn').addClass('btn-danger');
        }
      };

      FeaturedContentEditView.prototype.publishWithDate = function(event, tag) {
        var modal, singlePicker;
        event.preventDefault();
        $(event.currentTarget).parents('.publishDropdown').tooltip('toggle').find('.dropdown-toggle').dropdown('toggle');
        modal = $(bootstrapModalTemplate({
          headerText: "" + (tag.capitalize()) + " Publish Date",
          extraClasses: ' wideModal',
          closeText: 'Cancel',
          saveText: 'Publish'
        })).appendTo('body');
        singlePicker = new dateRangePicker.ContainerView({
          startDate: null
        }).render().on('datePicked', function(dates) {
          var formattedDate;
          return formattedDate = Date.create(dates.startDate).toUTC().format('{Mon} {dd} {yyyy}');
        }, modal.find('.btn-primary').html("Publish on " + formattedDate));
        modal.find('.modal-body').html(singlePicker.el);
        singlePicker.show();
        return modal.modal().on('hidden', function() {
          singlePicker.close();
          return modal.remove();
        });
      };

      FeaturedContentEditView.prototype.renderBody = function() {
        $('[data-tip]', this.$el.find('.toolbar')).tooltip('hide');
        return this.$el.find('.toolbar').html(this.toolbarTemplate({
          model: this.model.attributes,
          dirty: this.model.dirty,
          targetBelongsToOtherUser: this.model.get('owner_id') !== USER.username
        }));
      };

      FeaturedContentEditView.prototype.renderDatePickerInput = function() {
        var enabled_range;
        enabled_range = this.model.get('enabled_range');
        this.$el.find('.dateRangeContainer').remove();
        return this.$el.find('.toolbar').after(datePickerInputComponent({
          startDate: enabled_range[0],
          endDate: enabled_range[1]
        }));
      };

      FeaturedContentEditView.prototype.render = function() {
        FeaturedContentEditView.__super__.render.call(this);
        return this.inner.html(this.template({
          bigDescription: editBigDescription({
            description: this.model.get('description')
          }),
          description: this.model.get('description')
        }));
      };

      FeaturedContentEditView.prototype.removeRange = function() {
        var _ref;
        $('[data-tip]', this.$el.find('.dateRangeContainer')).tooltip('hide');
        this.model.set('enabled_range', [null, null]);
        if ((_ref = this.dateRangePickerInstance) != null) {
          _ref.model.set({
            startDate: null,
            endDate: null
          });
        }
        return this.renderDatePickerInput();
      };

      FeaturedContentEditView.prototype.toggleDateRangeControl = function() {
        var _this = this;
        if (this.dateRangePickerInstance != null) {
          this.dateRangePickerInstance.off('datePicked');
          this.dateRangePickerInstance.hide();
          return this.dateRangePickerInstance = null;
        } else {
          this.dateRangePickerInstance = new dateRangePicker.ContainerView({
            startDate: this.model.get('enabled_range')[0],
            endDate: this.model.get('enabled_range')[1]
          }).render();
          this.dateRangePickerInstance.$el.insertAfter(this.$el.find('.dateRangeContainer'));
          this.dateRangePickerInstance.show();
          return this.dateRangePickerInstance.on('datePicked', function(dates) {
            _this.model.set('enabled_range', [dates.startDate, dates.endDate]);
            return _this.renderDatePickerInput();
          });
        }
      };

      FeaturedContentEditView.prototype.onClose = function() {
        this.model.off('change', this.render, this);
        this.targetItems.off('change remove', this.render, this);
        return FeaturedContentEditView.__super__.onClose.call(this);
      };

      return FeaturedContentEditView;

    })(FeaturedContentBaseView);
    AttachArtistModal = (function(_super) {

      __extends(AttachArtistModal, _super);

      function AttachArtistModal() {
        return AttachArtistModal.__super__.constructor.apply(this, arguments);
      }

      AttachArtistModal.prototype.template = attachResultsTemplate;

      AttachArtistModal.prototype.events = {
        'keyup input#attachSearch': 'inputChange',
        'click #attachCustom': 'addCustom'
      };

      AttachArtistModal.prototype.tagName = 'div';

      AttachArtistModal.prototype.className = 'modal';

      AttachArtistModal.prototype.id = 'attachModal';

      AttachArtistModal.prototype.initialize = function(options) {
        var _this = this;
        AttachArtistModal.__super__.initialize.call(this, options);
        this.$el.addClass('hide fade');
        this.catalog = new models.CatalogCollection();
        this.catalog.on('reset', this.render, this);
        this.item = options.item;
        this.search = _.debounce(this._search, 250);
        this.currentSearch = '';
        return this.$el.append(attachArtistModalTemplate()).appendTo('body').modal({
          show: true
        }).on('hidden', function() {
          return _this.close();
        });
      };

      AttachArtistModal.prototype.inputChange = function(e) {
        var value;
        value = $(e.target).attr('value');
        if (this.currentSearch !== value) {
          return this.search(this.currentSearch = value);
        }
      };

      AttachArtistModal.prototype.setWorking = function(work) {
        var el;
        el = this.$el.find('.thinking');
        if (work) {
          return el.show();
        } else {
          return el.hide();
        }
      };

      AttachArtistModal.prototype._search = function(value) {
        var _this = this;
        this.setWorking(true);
        return this.catalog.fetch({
          success: function() {
            return _this.setWorking(false);
          },
          error: function() {
            return _this.setWorking(false);
          },
          data: {
            q: value
          }
        });
      };

      AttachArtistModal.prototype.addCustom = function(e) {
        this.item.set('attachments', this.item.get('attachments').concat([
          {
            id: null,
            kind: 'user',
            "for": 'web',
            name: 'User',
            link: '',
            link_text: ''
          }
        ]));
        return this.$el.modal('hide');
      };

      AttachArtistModal.prototype.select = function(e, cid) {
        var catalogItem, id, kind, kindToSlug, webid, weblink;
        catalogItem = this.catalog.getByCid(cid);
        id = catalogItem.get('slug') || catalogItem.get('id');
        kind = catalogItem.get('kind');
        kindToSlug = {
          station: 'live',
          featured: 'original',
          artist: 'artist',
          track: 'track'
        };
        webid = id;
        if (kind === 'artist' || kind === 'track') {
          webid = "-" + id;
        }
        weblink = "http://www.iheart.com/" + kindToSlug[catalogItem.get('kind')] + "/" + webid + "/";
        if (kind === 'track') {
          weblink = "http://www.iheart.com/artist/-" + (catalogItem.get('artistId')) + "/songs/-" + (catalogItem.get('id'));
        }
        this.item.set('attachments', this.item.get('attachments').concat([
          {
            id: id,
            kind: kind,
            "for": 'web',
            name: catalogItem.get('name'),
            link: weblink,
            link_text: "Play " + (catalogItem.get('name'))
          }, {
            id: id,
            kind: kind,
            "for": 'device',
            name: catalogItem.get('name'),
            link: "ihr://play/custom/" + kindToSlug[catalogItem.get('kind')] + "/" + id + "/",
            link_text: "Play " + (catalogItem.get('name'))
          }
        ]));
        return this.$el.modal('hide');
      };

      AttachArtistModal.prototype.render = function() {
        var ctx;
        ctx = {
          models: this.catalog.models,
          img_proxy: window.IMG_PROXY,
          toMins: function(duration) {
            var sec;
            sec = parseInt(duration);
            return "" + ((sec / 60).floor()) + ":" + ((sec % 60).pad(2));
          }
        };
        return this.$el.find('#attach-results').html(this.template(ctx));
      };

      AttachArtistModal.prototype.onClose = function() {
        return this.catalog.off('reset', this.render, this);
      };

      return AttachArtistModal;

    })(Backbone.View);
    targets = null;
    router = null;
    return run = function() {
      targets = new models.TargetCollection();
      router = new Workspace();
      return Backbone.history.start({
        silent: false,
        pushState: false
      });
    };
  });

}).call(this);
