// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, Handlebars, Workspace, browserTemplate, run, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    Handlebars = require('handlebars');
    browserTemplate = require('text!templates/browser/browser.html');
    require('../../lib/backboneExtensions/backbone.view.actionPanel');
    Workspace = (function(_super) {
      var Browser, Endpoint, Schema;

      __extends(Workspace, _super);

      function Workspace() {
        return Workspace.__super__.constructor.apply(this, arguments);
      }

      Workspace.prototype.currentView = null;

      Workspace.prototype.routes = {
        "": "list"
      };

      Workspace.prototype.switchView = function(newView) {
        if (this.currentView) {
          this.currentView.close();
        }
        return this.currentView = newView;
      };

      Workspace.prototype.list = function() {
        this.switchView(new Browser());
        return $('.container.main').html(this.currentView.el);
      };

      Endpoint = (function(_super1) {

        __extends(Endpoint, _super1);

        function Endpoint() {
          return Endpoint.__super__.constructor.apply(this, arguments);
        }

        Endpoint.prototype.initialize = function(options) {
          if (options.methods) {
            return this.set('methods', new Backbone.Collection(options.methods));
          }
        };

        return Endpoint;

      })(Backbone.Model);

      Schema = (function(_super1) {

        __extends(Schema, _super1);

        function Schema() {
          return Schema.__super__.constructor.apply(this, arguments);
        }

        Schema.prototype.model = Endpoint;

        Schema.prototype.parse = function(obj) {
          this.name = obj.description;
          return obj.endpoints;
        };

        return Schema;

      })(Backbone.Collection);

      Browser = (function(_super1) {

        __extends(Browser, _super1);

        function Browser() {
          return Browser.__super__.constructor.apply(this, arguments);
        }

        Browser.prototype.template = Handlebars.compile(browserTemplate);

        Browser.prototype.initialize = function() {
          this.schema = new Schema();
          this.schema.on('reset', this.render, this);
          return this.update();
        };

        Browser.prototype.update = function() {
          return this.schema.fetch({
            url: $('#endpointurl').val(),
            type: 'OPTIONS'
          });
        };

        Browser.prototype.toggleOps = function(e) {
          return $(e.currentTarget).parents('li').find('.operations').slideToggle(75);
        };

        Browser.prototype.listOps = function(e) {
          $(e.currentTarget).parents('li').find('.operations').slideDown(75);
          return $(e.currentTarget).parents('li').find('.implementation').slideUp(75);
        };

        Browser.prototype.expandOps = function(e) {
          $(e.currentTarget).parents('li').find('.operations').slideDown(75);
          return $(e.currentTarget).parents('li').find('.implementation').slideDown(75);
        };

        Browser.prototype.toggleImp = function(e) {
          return $(e.currentTarget).siblings('.implementation').slideToggle(75);
        };

        Browser.prototype.showHide = function(e) {
          return $(e.currentTarget).parents('li').find('.operations').slideToggle(75);
        };

        Browser.prototype.showAll = function(e) {
          $('.operations').slideDown(75);
          return $('.implementation').slideUp(75);
        };

        Browser.prototype.hideAll = function(e) {
          $('.operations').slideUp(75);
          return $('.implementation').slideUp(75);
        };

        Browser.prototype.expandAll = function(e) {
          $('.operations').slideDown(75);
          return $('.implementation').slideDown(75);
        };

        Browser.prototype.render = function() {
          var ctx;
          ctx = {
            endpoints: this.schema.models
          };
          console.log(ctx.endpoints);
          return this.$el.html(this.template(ctx));
        };

        return Browser;

      })(Backbone.View);

      return Workspace;

    })(Backbone.Router);
    window.tryit = function(form) {
      var ajax, field, find, i, qsParameters, querystring, replace, url, urlParameters, value, verb, _i, _j, _len, _len1, _ref, _ref1;
      console.log(form);
      urlParameters = {};
      _ref = $('.url-parameters input', form);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        urlParameters[i.name] = i.value;
      }
      qsParameters = {};
      _ref1 = $('.querystring-parameters input[value!=""]', form);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        qsParameters[i.name] = i.value;
      }
      url = $('[name="endpoint-url"]', form).val();
      verb = $('[name="endpoint-verb"]', form).val();
      for (i in urlParameters) {
        if (!__hasProp.call(urlParameters, i)) continue;
        find = '<' + i + '>';
        replace = urlParameters[i];
        url = url.replace(find, replace);
      }
      querystring = (function() {
        var _results;
        _results = [];
        for (field in qsParameters) {
          value = qsParameters[field];
          _results.push(encodeURIComponent(field) + '=' + encodeURIComponent(value));
        }
        return _results;
      })();
      if (querystring.length) {
        url += '?' + querystring.join('&');
      }
      console.log(verb, url);
      $('.ajax-output', form).html("<h4>Request URL</h4><code>" + url + "</code>");
      return ajax = $.ajax({
        type: verb,
        dataType: "html",
        url: url
      }).done(function(result, textStatus, XMLHttpRequest) {
        return $('.ajax-output', form).append("<h4>Response Body</h4><code>" + result + "</code>").append("<h4>Response Code</h4><code>" + XMLHttpRequest.status + "</code>").append("<h4>Response Headers</h4><code>" + XMLHttpRequest.getAllResponseHeaders() + "</code>");
      }).fail(function(XMLHttpRequest, textStatus, errorDesc) {
        return $('.ajax-output', form).append("<h4>Response Body</h4><code>" + XMLHttpRequest.responseText + "</code>").append("<h4>Response Code</h4><code>" + XMLHttpRequest.status + "</code>").append("<h4>Response Headers</h4><code>" + XMLHttpRequest.getAllResponseHeaders() + "</code>");
      });
    };
    return run = function() {
      new Workspace();
      return Backbone.history.start({
        silent: false,
        pushState: false
      });
    };
  });

}).call(this);
