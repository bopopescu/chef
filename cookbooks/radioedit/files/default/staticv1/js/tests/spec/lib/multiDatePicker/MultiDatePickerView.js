// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var $, DatePickerInputComponent, Handlebars, Views;
    Handlebars = require('handlebars');
    Views = require('multiDatePicker/views');
    DatePickerInputComponent = require('eco/bits/DatePickerInputComponent');
    $ = require('jquery');
    return describe('Multi Date Picker View', function() {
      beforeEach(function() {
        this.datePickerInputComponent = DatePickerInputComponent();
        $('.body').append(this.DatePickerInputComponent);
        return this.multiDatePickerView = new Views.MultiDatePickerView({
          'formElementContainerDiv': this.datePickerInputComponent
        });
      });
      it('Will throw an error if a form element is not passed to the constructor', function() {
        expect(function() {
          return new Views.MultiDatePickerView().close();
        }).toThrow();
        return expect(function() {
          return new Views.MultiDatePickerView({
            'formElementContainerDiv': this.datePickerInputComponent
          }).close();
        }).not.toThrow();
      });
      it('Will move the calendars forward 1 month', function() {
        var calendars, firstCalendar, firstCalendarNextDate, lastCalendar, lastCalendarNextDate;
        calendars = $('.days .datepicker-days');
        firstCalendar = calendars.first();
        lastCalendar = calendars.last();
        firstCalendarNextDate = this.multiDatePickerView.chronologyModel.clone().getDate().advance({
          months: 1
        });
        lastCalendarNextDate = this.multiDatePickerView.chronologyModel.clone().getDate().advance({
          months: 2
        });
        $('.multiDatePicker div.next').click();
        expect(this.multiDatePickerView.chronologyModel.getDate().valueOf()).toBe(firstCalendarNextDate.valueOf());
        expect(firstCalendar.find('.switch').text()).toBe(firstCalendarNextDate.format('{Month} {yyyy}'));
        expect(lastCalendar.find('.switch').text()).toBe(lastCalendarNextDate.format('{Month} {yyyy}'));
        expect(firstCalendar.find('.day').last().text()).toBe(firstCalendarNextDate.clone().endOfMonth().format('{dd}'));
        expect(lastCalendar.find('.day').last().text()).toBe(lastCalendarNextDate.clone().endOfMonth().format('{dd}'));
        expect(firstCalendar.find('td').not('.day').length).toBe(firstCalendarNextDate.getDay());
        return expect(lastCalendar.find('td').not('.day').length).toBe(lastCalendarNextDate.getDay());
      });
      it('Will move the calendars back 1 month', function() {
        var calendars, firstCalendar, firstCalendarPreviousDate, lastCalendar, lastCalendarPreviousDate;
        calendars = $('.days .datepicker-days');
        firstCalendar = calendars.first();
        lastCalendar = calendars.last();
        firstCalendarPreviousDate = this.multiDatePickerView.chronologyModel.clone().getDate().rewind({
          months: 1
        });
        lastCalendarPreviousDate = this.multiDatePickerView.chronologyModel.clone().getDate();
        $('.multiDatePicker div.prev').click();
        expect(this.multiDatePickerView.chronologyModel.getDate().valueOf()).toBe(firstCalendarPreviousDate.valueOf());
        expect(firstCalendar.find('.switch').text()).toBe(firstCalendarPreviousDate.format('{Month} {yyyy}'));
        expect(lastCalendar.find('.switch').text()).toBe(lastCalendarPreviousDate.format('{Month} {yyyy}'));
        expect(firstCalendar.find('.day').last().text()).toBe(firstCalendarPreviousDate.clone().endOfMonth().format('{dd}'));
        expect(lastCalendar.find('.day').last().text()).toBe(lastCalendarPreviousDate.clone().endOfMonth().format('{dd}'));
        expect(firstCalendar.find('td').not('.day').length).toBe(firstCalendarPreviousDate.getDay());
        return expect(lastCalendar.find('td').not('.day').length).toBe(lastCalendarPreviousDate.getDay());
      });
      it('Will trigger a hide event when the datepicker is hidden', function() {
        var spy;
        spy = jasmine.createSpy('Hide Spy');
        this.multiDatePickerView.on('hide', spy);
        this.multiDatePickerView.calendarButton.click();
        $('body').trigger('mousedown');
        expect(spy).toHaveBeenCalled();
        return expect(spy.argsForCall[0][0] instanceof Views.MultiDatePickerView).toBe(true);
      });
      return afterEach(function() {
        this.multiDatePickerView.close();
        return this.datePickerInputComponent.remove();
      });
    });
  });

}).call(this);
