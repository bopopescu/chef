// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var base, target, _;
    base = require('src/base');
    target = require('fixtures/target');
    _ = require('underscore');
    return describe('Base Collection', function() {
      beforeEach(function() {
        spyOn($, 'ajax').andCallFake(function(options) {
          return options.success(target);
        });
        this.baseCollection = new base.Collection();
        return this.baseCollection.url = '/blah/';
      });
      it('Will call fetch when the metastate is changed', function() {
        spyOn(this.baseCollection, 'fetch').andCallThrough();
        this.baseCollection.metastate.set({
          limit: 10
        });
        return expect(this.baseCollection.fetch).toHaveBeenCalled();
      });
      it('Will dynamically assign properties to itself from the response meta object', function() {
        var _this = this;
        this.baseCollection.fetch();
        return _.each(target.meta, function(value, key) {
          return expect(_this.baseCollection[key]).toBe(value);
        });
      });
      it('Will throw an exception if there is no response attribute in the meta object', function() {
        var _this = this;
        $.ajax.andCallFake(function(options) {
          var targetWithoutResult;
          targetWithoutResult = $.extend({}, target);
          delete targetWithoutResult.result;
          return options.success(targetWithoutResult);
        });
        return expect(function() {
          return _this.baseCollection.fetch();
        }).toThrow(new Error('No result attribute in response.'));
      });
      it('Will return the number of pages in the response', function() {
        this.baseCollection.fetch();
        return expect(this.baseCollection.pages()).toBe(Math.floor(target.meta.records / target.meta.limit));
      });
      it('Will return the current page of the collection', function() {
        this.baseCollection.fetch();
        return expect(this.baseCollection.page()).toBe(Math.floor(target.meta.offset / target.meta.limit) + 1);
      });
      return it('Will change the page', function() {
        this.baseCollection.pageTo(2);
        return expect(this.baseCollection.metastate.toJSON(), {
          limit: 25,
          offset: 25
        });
      });
    });
  });

}).call(this);
