// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var models, target, targetItemModelFixture;
    target = require('fixtures/target');
    models = require('src/models');
    targetItemModelFixture = require('fixtures/targetItemModel');
    return describe('Models', function() {
      describe('TargetModel', function() {
        beforeEach(function() {
          spyOn($, 'ajax').andCallFake(function(options) {
            return {
              done: function(param) {
                return param();
              }
            };
          });
          return this.targetModel = new models.TargetModel(target);
        });
        return it('Will call a callback after creating a working copy', function() {
          var callback;
          callback = jasmine.createSpy('callback');
          this.targetModel.work(callback);
          return expect(callback).toHaveBeenCalled();
        });
      });
      return describe('TargetItemImageModel', function() {
        var targetItemImageModel;
        targetItemImageModel = null;
        beforeEach(function() {
          return targetItemImageModel = new models.TargetItemImageModel(targetItemModelFixture.img_meta);
        });
        it('Will build a url from the image data', function() {
          expect(targetItemImageModel.getOriginalImageUrl()).toBe('/static/img/glyphicons-halflings.png');
          return expect(new models.TargetItemImageModel().getOriginalImageUrl()).toBe(void 0);
        });
        it('Will populate the model from a url', function() {
          targetItemImageModel.clear({
            silent: true
          });
          targetItemImageModel.populateModelFromUrl('http://static.iheart.com/feat/Disney_s_Magic_Kingdom1.jpg');
          expect(targetItemImageModel.get('image_id')).toBe('Disney_s_Magic_Kingdom1');
          expect(targetItemImageModel.get('cdn_url')).toBe('http://static.iheart.com/feat/');
          return expect(targetItemImageModel.get('extension')).toBe('jpg');
        });
        it('Will transform an operations Array to an Object', function() {
          var expected;
          expected = {
            point: {
              anchor: [30, 40]
            }
          };
          return expect(targetItemImageModel.transformOps()).toEqual(expected);
        });
        return it('will restore a transformed opeations object to it\'s original form', function() {
          var expected, transformedOps;
          transformedOps = {
            point: {
              anchor: [30, 40]
            }
          };
          expected = {
            point: [['anchor', [30, 40]]]
          };
          return expect(targetItemImageModel.restoreOps(transformedOps)).toEqual(expected);
        });
      });
    });
  });

}).call(this);
