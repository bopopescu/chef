// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, TestCollection, TestModel, TestView, TestViewTemplate;
    Backbone = require('backbone');
    TestViewTemplate = require('templateFixtures/TestViewTemplate');
    TestModel = (function(_super) {

      __extends(TestModel, _super);

      function TestModel() {
        return TestModel.__super__.constructor.apply(this, arguments);
      }

      TestModel.prototype.defaults = {
        title: 'testTitle',
        image_url: 'testImageUrl',
        timeRemaining: '5',
        endingSoon: true,
        bid: '5.43',
        bidder: 'Foo Bar',
        bidCount: 3
      };

      return TestModel;

    })(Backbone.Model);
    TestCollection = (function(_super) {

      __extends(TestCollection, _super);

      function TestCollection() {
        return TestCollection.__super__.constructor.apply(this, arguments);
      }

      TestCollection.prototype.model = TestModel;

      return TestCollection;

    })(Backbone.Collection);
    TestView = (function(_super) {

      __extends(TestView, _super);

      function TestView() {
        return TestView.__super__.constructor.apply(this, arguments);
      }

      TestView.prototype.render = function() {
        this.$el.html(TestViewTemplate({
          auctionCollection: this.collection
        }));
        this.$el.appendTo('body');
        this.setRivet('#auction', {
          auction: this.model,
          auctionCollection: this.collection
        });
        return this;
      };

      return TestView;

    })(Backbone.View);
    return describe('Rivets', function() {
      var collection, model, view;
      collection = null;
      model = null;
      view = null;
      beforeEach(function() {
        model = new TestModel();
        collection = new TestCollection([
          {
            title: 'firstTestTitle'
          }, {
            title: 'lastTestTitle'
          }
        ]);
        return view = new TestView({
          model: model,
          collection: collection
        }).render();
      });
      describe('binding', function() {
        it('should have data populated', function() {
          var imageElement, titleElement;
          titleElement = view.$el.find("#auction [data-text='auction.title']");
          titleElement.should.have.length(1);
          titleElement.text().should.equal(model.get('title'));
          imageElement = view.$el.find("#auction [data-src='auction.image_url']");
          imageElement.should.have.length(1);
          imageElement.attr('src').should.equal(model.get('image_url'));
          return collection.each(function(model) {
            var modelElement;
            modelElement = view.$el.find("#auction [data-text='auctionCollection." + model.cid + ".title']");
            modelElement.should.have.length(1);
            return modelElement.text().should.equal(model.get('title'));
          });
        });
        it('should update the view', function() {
          var alertBoxElement, firstListElement, firstModel, newText;
          alertBoxElement = view.$el.find("#auction [data-show='auction.endingSoon']");
          alertBoxElement.should.have.length(1);
          alertBoxElement.is(':visible').should.be.ok;
          model.set('endingSoon', false);
          alertBoxElement.is(':visible').should.not.be.ok;
          newText = 'FooBar';
          firstModel = collection.first();
          firstModel.set('title', newText);
          firstListElement = view.$el.find("#auction [data-text='auctionCollection." + firstModel.cid + ".title']");
          firstListElement.should.have.length(1);
          return firstListElement.text().should.equal(newText);
        });
        return it('should update the model', function() {
          var event, firstListInputElement, firstModel, inputElement, newListInputValue, newValue;
          inputElement = view.$el.find("#auction [data-value='auction.bidder']");
          inputElement.should.have.length(1);
          inputElement.val().should.equal(model.get('bidder'));
          newValue = 'Bar Baz';
          inputElement.val(newValue);
          event = document.createEvent("HTMLEvents");
          event.initEvent('change');
          inputElement[0].dispatchEvent(event);
          model.get('bidder').should.equal(newValue);
          newListInputValue = 'FoozBar';
          firstModel = collection.first();
          firstListInputElement = view.$el.find("#auction [data-value='auctionCollection." + firstModel.cid + ".title']");
          firstListInputElement.should.have.length(1);
          firstListInputElement.val().should.equal(firstModel.get('title'));
          firstListInputElement.val(newListInputValue);
          event = document.createEvent('HTMLEvents');
          event.initEvent('change');
          firstListInputElement[0].dispatchEvent(event);
          return firstModel.get('title').should.equal(newListInputValue);
        });
      });
      return afterEach(function() {
        if (view != null) {
          view.close();
        }
        collection = null;
        model = null;
        return view = null;
      });
    });
  });

}).call(this);
