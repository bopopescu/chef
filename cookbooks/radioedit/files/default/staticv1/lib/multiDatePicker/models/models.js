// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, ChronologyModel;
    Backbone = require('backbone');
    ChronologyModel = (function(_super) {

      __extends(ChronologyModel, _super);

      function ChronologyModel() {
        return ChronologyModel.__super__.constructor.apply(this, arguments);
      }

      ChronologyModel.prototype.defaults = {
        year: Date.create().getFullYear(),
        month: Date.create().getMonth(),
        activeDateStart: Date.create('today'),
        activeDateEnd: Date.create('today'),
        daysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
        monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
      };

      ChronologyModel.prototype.setDate = function(date) {
        this.set('year', date.getFullYear());
        this.set('month', date.getMonth());
        return this;
      };

      ChronologyModel.prototype.getDate = function() {
        return Date.create(new Date(this.get('year'), this.get('month'), 1, 0, 0, 0, 0));
      };

      ChronologyModel.prototype.setActiveDate = function(date) {
        var end;
        date = Date.create(date);
        if ((this.get('activeDateStart') instanceof Date && this.get('activeDateEnd') instanceof Date) || !(this.get('activeDateStart') instanceof Date)) {
          this.set('activeDateStart', date);
          return this.set('activeDateEnd', null);
        } else if (!(this.get('activeDateEnd') instanceof Date)) {
          this.set('activeDateEnd', date);
          if (this.get('activeDateEnd').isBefore(this.get('activeDateStart'))) {
            end = this.get('activeDateEnd').clone();
            this.set('activeDateEnd', this.get('activeDateStart'));
            return this.set('activeDateStart', end);
          }
        }
      };

      ChronologyModel.prototype.getActiveDateRangeList = function() {
        var out;
        out = [this.get('activeDateStart').clone()];
        if (this.get('activeDateEnd') instanceof Date) {
          out.push(this.get('activeDateEnd').clone());
        } else {
          out.push(this.get('activeDateStart').clone());
        }
        return out;
      };

      ChronologyModel.prototype.getActiveDatesAsString = function(format) {
        var out;
        if (format == null) {
          format = '{MM}/{dd}/{yyyy}';
        }
        out = '';
        if (this.get('activeDateStart') instanceof Date) {
          out += this.get('activeDateStart').format(format);
        }
        if (this.get('activeDateEnd') instanceof Date) {
          out += "-" + (this.get('activeDateEnd').format(format));
        } else {
          out += "-" + (this.get('activeDateStart').format(format));
        }
        return out;
      };

      ChronologyModel.prototype.getActiveDatesListInSeconds = function() {
        var converter, out;
        converter = function(date) {
          return Math.floor(date.valueOf() / 1000);
        };
        out = [converter(this.get('activeDateStart'))];
        if (this.get('activeDateEnd') instanceof Date) {
          out.push(converter(this.get('activeDateEnd')));
        } else {
          out.push(converter(this.get('activeDateStart')));
        }
        return out;
      };

      return ChronologyModel;

    })(Backbone.Model);
    return {
      ChronologyModel: ChronologyModel
    };
  });

}).call(this);
