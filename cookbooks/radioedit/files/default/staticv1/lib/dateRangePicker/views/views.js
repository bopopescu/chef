// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, BasePickerView, ContainerView, DayView, DayViewGroup, MonthView, YearView, containerTemplate, dayTemplate, models, monthTemplate, yearTemplate;
    Backbone = require('backbone');
    containerTemplate = require('dateRangePicker/js_templates/container');
    dayTemplate = require('dateRangePicker/js_templates/days');
    monthTemplate = require('dateRangePicker/js_templates/months');
    yearTemplate = require('dateRangePicker/js_templates/years');
    models = require('dateRangePicker/models');
    BasePickerView = (function(_super) {

      __extends(BasePickerView, _super);

      function BasePickerView() {
        return BasePickerView.__super__.constructor.apply(this, arguments);
      }

      BasePickerView.prototype.model = null;

      BasePickerView.prototype.configurationKeyMap = {
        ChronologyModelDateRange: 'range',
        ChronologyModelSingleDate: 'single'
      };

      BasePickerView.prototype.configuration = {
        single: {},
        range: {}
      };

      BasePickerView.prototype.getConfigurationObject = function(key) {
        var config;
        if (key == null) {
          key = null;
        }
        if (this.model == null) {
          throw new Error("" + this.constructor.name + " has no model.");
        }
        config = this.configuration[this.configurationKeyMap[this.model.constructor.name]];
        config = key != null ? config[key] : config;
        if (_.isFunction(config)) {
          return config.apply(this, _.toArray(arguments).slice(1));
        } else {
          return config;
        }
      };

      return BasePickerView;

    })(Backbone.View);
    YearView = (function(_super) {

      __extends(YearView, _super);

      function YearView() {
        return YearView.__super__.constructor.apply(this, arguments);
      }

      YearView.prototype.className = 'datepickerMonthsContainer';

      YearView.prototype.configuration = {
        single: {
          getContextObject: function() {
            return {
              renderLoopHelper: function(context) {
                var _ref;
                if (((_ref = context.startDate) != null ? _ref.getFullYear() : void 0) === context.date.getFullYear()) {
                  return ' active';
                }
              }
            };
          }
        },
        range: {
          getContextObject: function() {
            return {
              endDate: this.model.get('endDate'),
              renderLoopHelper: function(context) {
                var _ref, _ref1, _ref2;
                if ((!(this.startDate != null) && !(this.endDate != null)) || ((this.startDate != null) && !(this.endDate != null) && this.date.getFullYear() >= this.startDate.getFullYear()) || ((this.endDate != null) && !(this.startDate != null) && this.date.getFullYear() <= this.endDate.getFullYear()) || ((((_ref1 = this.startDate) != null ? _ref1.getFullYear() : void 0) <= (_ref = this.date.getFullYear()) && _ref <= ((_ref2 = this.endDate) != null ? _ref2.getFullYear() : void 0)))) {
                  return ' active';
                }
              }
            };
          }
        }
      };

      YearView.prototype.render = function() {
        this.$el.html(yearTemplate(_.extend(this.getConfigurationObject('getContextObject'), {
          date: this.model.getClonedDate().beginningOfYear(),
          nextDate: this.model.getClonedDate().advance({
            years: 12
          }),
          startDate: this.model.get('startDate')
        })));
        return this;
      };

      YearView.prototype.advance = function() {
        this.model.get('date').advance({
          years: 12
        });
        return this;
      };

      YearView.prototype.rewind = function() {
        this.model.get('date').rewind({
          years: 12
        });
        return this;
      };

      return YearView;

    })(BasePickerView);
    MonthView = (function(_super) {

      __extends(MonthView, _super);

      function MonthView() {
        return MonthView.__super__.constructor.apply(this, arguments);
      }

      MonthView.prototype.className = 'datepickerMonthsContainer';

      MonthView.prototype.configuration = {
        single: {
          getContextObject: function() {
            return {
              renderLoopHelper: function(context) {
                var _ref;
                if (((_ref = context.startDate) != null ? _ref.getFullYear() : void 0) === context.date.getFullYear() && context.startDate.format('{Mon}') === context.date.format('{Mon}')) {
                  return ' active';
                }
              }
            };
          }
        },
        range: {
          getContextObject: function() {
            return {
              endDate: this.model.get('endDate'),
              renderLoopHelper: function(context) {
                var currentMonth, currentMonthAndYear, currentYear, _ref, _ref1, _ref2, _ref3;
                currentMonth = context.date.format('{Mon}');
                currentYear = context.date.getFullYear();
                currentMonthAndYear = "" + currentMonth + " " + currentYear;
                if ((!(context.startDate != null) && !(context.endDate != null)) || (((_ref = context.startDate) != null ? _ref.getFullYear() : void 0) === currentYear && context.startDate.format('{Mon}') === currentMonth) || (((_ref1 = context.endDate) != null ? _ref1.getFullYear() : void 0) === currentYear && context.endDate.format('{Mon}') === currentMonth) || ((context.startDate != null) && !(context.endDate != null) && context.startDate.isBefore(currentMonthAndYear)) || ((context.endDate != null) && !(context.startDate != null) && context.endDate.isAfter(currentMonthAndYear)) || (((_ref2 = context.startDate) != null ? _ref2.isBefore(currentMonthAndYear) : void 0) && ((_ref3 = context.endDate) != null ? _ref3.isAfter(currentMonthAndYear) : void 0))) {
                  return ' active';
                }
              }
            };
          }
        }
      };

      MonthView.prototype.render = function() {
        this.$el.html(monthTemplate(_.extend(this.getConfigurationObject('getContextObject'), {
          date: this.model.getClonedDate().beginningOfYear(),
          nextYear: this.model.getClonedDate().endOfYear(),
          startDate: this.model.get('startDate')
        })));
        return this;
      };

      MonthView.prototype.advance = function() {
        this.model.get('date').advance({
          months: 12
        });
        return this;
      };

      MonthView.prototype.rewind = function() {
        this.model.get('date').rewind({
          months: 12
        });
        return this;
      };

      return MonthView;

    })(BasePickerView);
    DayView = (function(_super) {

      __extends(DayView, _super);

      function DayView() {
        return DayView.__super__.constructor.apply(this, arguments);
      }

      DayView.prototype.className = 'datepicker-days';

      DayView.prototype.configuration = {
        single: {
          getContextObject: function() {
            return {
              renderLoopHelper: function(context) {
                if (context.date.is(context.startDate)) {
                  return ' start';
                }
              }
            };
          }
        },
        range: {
          getContextObject: function() {
            return {
              endDate: this.options.endDate,
              renderLoopHelper: function(context) {
                if (this.date.is(this.startDate) && this.date.is(this.endDate)) {
                  return ' both';
                } else if (this.date.is(this.startDate)) {
                  return ' start';
                } else if (this.date.is(this.endDate)) {
                  return ' end';
                } else if ((!(this.startDate != null) && !(this.endDate != null)) || ((this.endDate != null) && !(this.startDate != null) && this.date.isBefore(this.endDate)) || (this.date.isAfter(this.startDate) && this.date.isBefore(this.endDate)) || ((this.startDate != null) && !this.endDate && this.date.isAfter(this.startDate))) {
                  return ' active';
                }
              }
            };
          }
        }
      };

      DayView.prototype.render = function() {
        this.$el.html(dayTemplate(_.extend(this.getConfigurationObject('getContextObject'), {
          date: this.options.theDate,
          startDayOfMonth: this.options.theDate.getDay(),
          startDate: this.options.startDate,
          today: Date.create().toUTC().beginningOfDay(),
          nextDate: models.ChronologyModelDateRange.cloneDate(this.options.theDate).advance({
            months: 1
          })
        })));
        return this;
      };

      return DayView;

    })(BasePickerView);
    DayViewGroup = (function(_super) {

      __extends(DayViewGroup, _super);

      function DayViewGroup() {
        return DayViewGroup.__super__.constructor.apply(this, arguments);
      }

      DayViewGroup.prototype.className = 'datepickerDaysContainer';

      DayViewGroup.prototype.dayViewList = [];

      DayViewGroup.prototype.configuration = {
        single: {
          setPickerState: function() {
            return this.$el.addClass('start');
          }
        },
        range: {
          setPickerState: function() {
            var state;
            state = 'start';
            if ((this.model.get('startDate') != null) && !(this.model.get('endDate') != null)) {
              state = 'end';
            }
            return this.$el.addClass(state);
          }
        }
      };

      DayViewGroup.prototype.events = {
        'click .day': 'clickDay'
      };

      DayViewGroup.prototype.render = function() {
        var dayView, dayViewOptions, _i, _len, _ref;
        dayViewOptions = {
          startDate: this.model.get('startDate'),
          endDate: this.model.get('endDate'),
          model: this.model
        };
        this.dayViewList = [
          new DayView(_.extend(dayViewOptions, {
            theDate: this.model.getClonedDate().rewind({
              months: 1
            })
          })).render(), new DayView(_.extend(dayViewOptions, {
            theDate: this.model.getClonedDate()
          })).render(), new DayView(_.extend(dayViewOptions, {
            theDate: this.model.getClonedDate().advance({
              months: 1
            })
          })).render()
        ];
        this.getConfigurationObject('setPickerState');
        _ref = this.dayViewList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dayView = _ref[_i];
          this.$el.append(dayView.el);
        }
        return this;
      };

      DayViewGroup.prototype.advance = function() {
        this.model.get('date').advance({
          months: 3
        });
        return this;
      };

      DayViewGroup.prototype.rewind = function() {
        this.model.get('date').rewind({
          months: 3
        });
        return this;
      };

      DayViewGroup.prototype.clickDay = function(event) {
        this.model.setActiveDate($(event.target).data('date'));
        return console.log(arguments);
      };

      DayViewGroup.prototype.onClose = function() {
        var dayView, _i, _len, _ref, _results;
        _ref = this.dayViewList;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dayView = _ref[_i];
          _results.push(dayView.close());
        }
        return _results;
      };

      return DayViewGroup;

    })(BasePickerView);
    ContainerView = (function(_super) {

      __extends(ContainerView, _super);

      function ContainerView() {
        return ContainerView.__super__.constructor.apply(this, arguments);
      }

      ContainerView.prototype.className = 'datePickerContainer';

      ContainerView.prototype.currentSubView = null;

      ContainerView.prototype.subViewMap = {
        DayViewGroup: DayViewGroup,
        MonthView: MonthView,
        YearView: YearView
      };

      ContainerView.prototype.events = {
        'click .toMonth': 'switchToMonthView',
        'click .toDay': 'switchToDayView',
        'click .toYear': 'switchToYearView'
      };

      ContainerView.prototype.show = function() {
        this.$el.slideDown();
      };

      ContainerView.prototype.hide = function() {
        var _this = this;
        this.$el.slideUp(400, function() {
          return _this.close();
        });
      };

      ContainerView.prototype.initialize = function() {
        var _this = this;
        if (_.isUndefined(this.options.startDate)) {
          throw new Error("startDate must be supplied to " + this.constructor.name);
        }
        if (!_.isUndefined(this.options.endDate)) {
          this.$el.addClass('range');
          this.model = new models.ChronologyModelDateRange(this.options);
        } else {
          this.$el.addClass('single');
          this.model = new models.ChronologyModelSingleDate(this.options);
        }
        this.model.on('change', this.reRenderSubView, this).on('change:startDate change:endDate', function() {
          return _this.trigger('datePicked', _this.model.getActiveDateList());
        });
      };

      ContainerView.prototype.render = function() {
        this.$el.html(containerTemplate());
        this.renderSubView(new DayViewGroup({
          model: this.model
        }));
        return this;
      };

      ContainerView.prototype.createSubView = function(newViewInstance) {
        this.onClose().currentSubView = newViewInstance;
      };

      ContainerView.prototype.renderSubView = function(newViewInstance) {
        this.createSubView(newViewInstance);
        this.$el.find('.slideContainer').html(this.currentSubView.render().el);
      };

      ContainerView.prototype.reRenderSubView = function() {
        this.renderSubView(new this.subViewMap[this.currentSubView.constructor.name]({
          model: this.model
        }));
      };

      ContainerView.prototype.move = function(event, direction) {
        var moveLeft, moveRight, newSubViewInstance, slideContainer,
          _this = this;
        slideContainer = this.$el.find('.slideContainer');
        newSubViewInstance = new this.subViewMap[this.currentSubView.constructor.name]({
          model: this.model
        });
        moveLeft = function() {
          _this.$el.find('.slideContainer').prepend(newSubViewInstance.rewind().render().el);
          slideContainer.css({
            left: '-810px'
          });
          return slideContainer.animate({
            left: '0px'
          }, function() {
            return _this.createSubView(newSubViewInstance);
          });
        };
        moveRight = function() {
          _this.$el.find('.slideContainer').append(newSubViewInstance.advance().render().el);
          return slideContainer.animate({
            left: '-810px'
          }, function() {
            _this.createSubView(newSubViewInstance);
            return slideContainer.css({
              left: '0px'
            });
          });
        };
        switch (direction) {
          case 'left':
            moveLeft();
            break;
          case 'right':
            moveRight();
        }
      };

      ContainerView.prototype.switchToMonthView = function(event) {
        this.model.set('date', Date.create($(event.target).data('date')).toUTC());
        return this.renderSubView(new MonthView({
          model: this.model
        }));
      };

      ContainerView.prototype.switchToDayView = function(event) {
        this.model.set('date', Date.create($(event.target).data('date')).toUTC());
        return this.renderSubView(new DayViewGroup({
          model: this.model
        }));
      };

      ContainerView.prototype.switchToYearView = function() {
        return this.renderSubView(new YearView({
          model: this.model
        }));
      };

      ContainerView.prototype.onClose = function() {
        var _ref;
        if ((_ref = this.currentSubView) != null) {
          _ref.close();
        }
        this.currentSubView = null;
        return this;
      };

      return ContainerView;

    })(Backbone.View);
    return {
      ContainerView: ContainerView,
      DayViewGroup: DayViewGroup
    };
  });

}).call(this);
