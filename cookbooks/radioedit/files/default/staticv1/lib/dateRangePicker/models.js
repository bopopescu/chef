// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, ChronologyModelDateRange, ChronologyModelSingleDate, _;
    Backbone = require('backbone');
    _ = require('underscore');
    ChronologyModelSingleDate = (function(_super) {

      __extends(ChronologyModelSingleDate, _super);

      function ChronologyModelSingleDate() {
        return ChronologyModelSingleDate.__super__.constructor.apply(this, arguments);
      }

      ChronologyModelSingleDate.prototype.defaults = {
        date: Date.create().toUTC().beginningOfMonth(),
        startDate: null
      };

      ChronologyModelSingleDate.prototype.initialize = function(attributes) {
        this.convertToDate('startDate');
        this.populateDate(attributes);
      };

      ChronologyModelSingleDate.prototype.convertToDate = function(attribute) {
        var date;
        date = this.get(attribute);
        if (_.isNumber(date)) {
          return this.set(attribute, Date.create(date).toUTC(), {
            silent: true
          });
        }
      };

      ChronologyModelSingleDate.prototype.populateDate = function(attributes) {
        if (_.isNumber(attributes['startDate'])) {
          this.set('date', Date.create(attributes['startDate']).toUTC().beginningOfMonth(), {
            silent: true
          });
        }
        return void 0;
      };

      ChronologyModelSingleDate.prototype.getActiveDateList = function() {
        var start;
        start = this.get('startDate');
        return {
          startDate: start != null ? ChronologyModelSingleDate.asUTCDateinMilliSeconds(start) : start
        };
      };

      ChronologyModelSingleDate.prototype.setActiveDate = function(date) {
        this.set('startDate', Date.create(date).toUTC());
      };

      ChronologyModelSingleDate.prototype.getClonedDate = function() {
        return ChronologyModelSingleDate.cloneDate(this.get('date'));
      };

      ChronologyModelSingleDate.cloneDate = function(date) {
        return date.clone().toUTC().addMinutes(date.getTimezoneOffset() * -1);
      };

      ChronologyModelSingleDate.asUTCDateinMilliSeconds = function(date) {
        return date.clone().resetTime().addMinutes(date.getTimezoneOffset() * -1).valueOf();
      };

      return ChronologyModelSingleDate;

    })(Backbone.Model);
    ChronologyModelDateRange = (function(_super) {

      __extends(ChronologyModelDateRange, _super);

      function ChronologyModelDateRange() {
        return ChronologyModelDateRange.__super__.constructor.apply(this, arguments);
      }

      ChronologyModelDateRange.prototype.defaults = _.extend({
        endDate: null
      }, ChronologyModelSingleDate.prototype.defaults);

      ChronologyModelDateRange.prototype.initialize = function(attributes) {
        this.convertToDate('endDate');
        return ChronologyModelDateRange.__super__.initialize.call(this, attributes);
      };

      ChronologyModelDateRange.prototype.populateDate = function(attributes) {
        if (_.isNumber(attributes['startDate'])) {
          this.set('date', Date.create(attributes['startDate']).toUTC().beginningOfMonth(), {
            silent: true
          });
        } else if (_.isNumber(attributes['endDate'])) {
          this.set('date', Date.create(attributes['endDate']).toUTC().beginningOfMonth(), {
            silent: true
          });
        }
      };

      ChronologyModelDateRange.prototype.getActiveDateList = function() {
        var dateList, end;
        dateList = ChronologyModelDateRange.__super__.getActiveDateList.call(this);
        end = this.get('endDate');
        dateList['endDate'] = end != null ? ChronologyModelSingleDate.asUTCDateinMilliSeconds(end) : end;
        return dateList;
      };

      ChronologyModelDateRange.prototype.setActiveDate = function(date) {
        date = Date.create(date).toUTC();
        if (date.is(this.get('startDate')) && date.is(this.get('endDate'))) {
          this.set({
            'startDate': null,
            'endDate': date
          });
        } else if (date.is(this.get('startDate'))) {
          this.set('endDate', date);
        } else if (date.is(this.get('endDate'))) {
          this.set('startDate', date);
        } else if (((this.get('startDate') != null) && (this.get('endDate') != null)) || !(this.get('startDate') != null)) {
          this.set({
            'startDate': date,
            'endDate': null
          });
        } else if (!(this.get('endDate') != null)) {
          if (date.isBefore(this.get('startDate'))) {
            this.set({
              'startDate': date,
              'endDate': ChronologyModelSingleDate.cloneDate(this.get('startDate'))
            });
          } else {
            this.set('endDate', date);
          }
        }
      };

      return ChronologyModelDateRange;

    })(ChronologyModelSingleDate);
    return {
      ChronologyModelSingleDate: ChronologyModelSingleDate,
      ChronologyModelDateRange: ChronologyModelDateRange
    };
  });

}).call(this);
