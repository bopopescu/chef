// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var ToggleField, expect;
    ToggleField = require('src/toggle_field').ToggleField;
    expect = chai.expect;
    return describe('ToggleField', function() {
      var toggleField;
      toggleField = null;
      describe('render', function() {
        it('renders with all the buttons pressed when all fields are empty', function() {
          var configuration;
          configuration = {
            toggles: {
              test1: {
                displayName: 'Test1',
                value: ''
              },
              test2: {
                displayName: 'Test2',
                value: ''
              },
              test3: {
                displayName: 'Test3',
                value: ''
              }
            }
          };
          toggleField = new ToggleField(configuration);
          toggleField.render();
          return expect(toggleField.$('.toggleContainer button.active')).length(4);
        });
        return describe('rendering with the same value', function() {
          var configuration;
          configuration = null;
          beforeEach(function() {
            configuration = {
              toggles: {
                test1: {
                  displayName: 'Test1',
                  value: 'a'
                },
                test2: {
                  displayName: 'Test2',
                  value: 'a'
                },
                test3: {
                  displayName: 'Test3',
                  value: 'a'
                }
              }
            };
            toggleField = new ToggleField(configuration);
            return toggleField.render();
          });
          it('renders with all the buttons pressed when all fields have the same value', function() {
            return expect(toggleField.$('.toggleContainer button.active')).length(4);
          });
          it('renders the toggle text', function() {
            return expect(toggleField.$('#psuedoField')).value('a');
          });
          return describe('rendering with different values', function() {
            configuration = null;
            beforeEach(function() {
              configuration = {
                toggles: {
                  test1: {
                    displayName: 'Test1',
                    value: 'test1 value'
                  },
                  test2: {
                    displayName: 'Test2',
                    value: 'test2 value'
                  },
                  test3: {
                    displayName: 'Test3',
                    value: 'test3 value'
                  }
                }
              };
              toggleField = new ToggleField(configuration);
              return toggleField.render();
            });
            it('renders with the first button pressed when fields have different values', function() {
              expect(toggleField.$('.toggleContainer button.active')).length(1);
              return expect(toggleField.$('.toggleContainer button.active')).text('Test1');
            });
            it('renders the text of the active toggle', function() {
              return expect(toggleField.$('#psuedoField')).value('test1 value');
            });
            return it('renders the character count', function() {
              return expect(toggleField.$('.characterCount')).text('11');
            });
          });
        });
      });
      describe('focusin', function() {
        var configuration;
        configuration = null;
        beforeEach(function() {
          configuration = {
            toggles: {
              test1: {
                displayName: 'Test1',
                value: 'test1 value'
              },
              test2: {
                displayName: 'Test2',
                value: 'test2 value'
              }
            }
          };
          toggleField = new ToggleField(configuration);
          toggleField.render();
          return this.fixturesContainer.html(toggleField.el);
        });
        it('is not focused by default', function() {
          return expect(toggleField.$el).not["class"](toggleField.FOCUSED);
        });
        it('focuses the field when the input is focused', function() {
          toggleField.$psuedoField.trigger('focus');
          return expect(toggleField.$el)["class"](toggleField.FOCUSED);
        });
        it('focuses the field when the toggle button is clicked', function() {
          toggleField.$fieldButtons.first().click();
          return expect(toggleField.$el)["class"](toggleField.FOCUSED);
        });
        return it('focuses the field when the all button is clicked', function() {
          toggleField.$('.all').click();
          return expect(toggleField.$el)["class"](toggleField.FOCUSED);
        });
      });
      describe('focusout', function() {
        var configuration;
        configuration = null;
        beforeEach(function() {
          configuration = {
            toggles: {
              test1: {
                displayName: 'Test1',
                value: 'test1 value'
              },
              test2: {
                displayName: 'Test2',
                value: 'test2 value'
              }
            }
          };
          toggleField = new ToggleField(configuration);
          toggleField.render();
          return this.fixturesContainer.html(toggleField.el);
        });
        return it('de-focuses the field when blurring the input', function() {
          toggleField.$fieldButtons.first().click();
          expect(toggleField.$el)["class"](toggleField.FOCUSED);
          toggleField.$psuedoField.blur();
          return expect(toggleField.$el).not["class"](toggleField.FOCUSED);
        });
      });
      return describe('input', function() {
        it('updates the related hidden field when the value changes', function() {
          var configuration, event;
          configuration = {
            toggles: {
              test1: {
                displayName: 'Test1',
                value: 'test1 value'
              },
              test2: {
                displayName: 'Test2',
                value: 'test2 value'
              }
            }
          };
          toggleField = new ToggleField(configuration);
          toggleField.render();
          this.fixturesContainer.html(toggleField.el);
          event = new $.Event('input');
          toggleField.$psuedoField.val('testing').trigger(event);
          expect(toggleField.$('input[name="test1"]')).value('testing');
          return expect(toggleField.$('input[name="test2"]')).value('test2 value');
        });
        return it('updates all the hidden fields when all the fields are toggled', function() {
          var configuration, event;
          configuration = {
            toggles: {
              test1: {
                displayName: 'Test1',
                value: 'test1 value'
              },
              test2: {
                displayName: 'Test2',
                value: 'test2 value'
              }
            }
          };
          toggleField = new ToggleField(configuration);
          toggleField.render();
          this.fixturesContainer.html(toggleField.el);
          toggleField.$allButton.click();
          event = new $.Event('input');
          toggleField.$psuedoField.val('testing').trigger(event);
          expect(toggleField.$('input[name="test1"]')).value('testing');
          return expect(toggleField.$('input[name="test2"]')).value('testing');
        });
      });
    });
  });

}).call(this);
