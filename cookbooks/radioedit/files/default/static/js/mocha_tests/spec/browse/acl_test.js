// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var AclCollection, AclView, PermissionModel, PermissionsCollection, ResourceModel, aclData, expect, populateResponse, _ref;
    _ref = require('src/browse/acl'), AclCollection = _ref.AclCollection, ResourceModel = _ref.ResourceModel, PermissionsCollection = _ref.PermissionsCollection, PermissionModel = _ref.PermissionModel, AclView = _ref.AclView;
    populateResponse = require('util/ResponseHelper').populateResponse;
    aclData = require('fixtures/acl');
    expect = chai.expect;
    describe('Acl Collection', function() {
      var aclCollection, resourceId;
      aclCollection = null;
      resourceId = 'foo.bar';
      beforeEach(function() {
        return aclCollection = new AclCollection([], {
          resourceId: resourceId
        });
      });
      return describe('fetch', function() {
        beforeEach(function() {
          return aclCollection.fetch();
        });
        it('makes a fetch request to the correct url', function() {
          return expect(this.server.requests.first().url).equal("" + window.API_PREFIX + "/" + resourceId + "/acl");
        });
        return describe('on return', function() {
          var resourceModel;
          resourceModel = null;
          beforeEach(function() {
            this.server.respond(populateResponse(aclData));
            return resourceModel = aclCollection.at(0);
          });
          it('populates the collection with a resource model', function() {
            return expect(resourceModel)["instanceof"](ResourceModel);
          });
          it('has a resource model with an id equal to the resource', function() {
            return expect(resourceModel.id).equal(aclData.acl[0][0]);
          });
          return it('has a resource model with the correct list of acls', function() {
            return expect(resourceModel.get('acl')).deep.equal(aclData.acl[0][1]);
          });
        });
      });
    });
    describe('Acl Resource Model', function() {
      var resourceData, resourceModel, spy;
      resourceModel = spy = null;
      resourceData = aclData.acl[0];
      beforeEach(function() {
        spy = this.spy();
        return resourceModel = new ResourceModel(resourceData, {
          parse: true
        });
      });
      it('retrieves the correct permission by index', function() {
        return expect(resourceModel.getPermission(0)).deep.equal(resourceData[1][0]);
      });
      describe('adding a new permission', function() {
        var newData;
        newData = null;
        beforeEach(function() {
          return newData = {
            allow: true,
            permission: 'publish',
            'principal': 'fooz.bar'
          };
        });
        it('adds a new permission to the list', function() {
          resourceModel.setPermission(newData);
          return expect(resourceModel.getPermission(resourceModel.get('acl').length - 1)).deep.equal(newData);
        });
        return it('triggers a permission.add event', function() {
          resourceModel.on('permission.add', spy).setPermission(newData);
          return this.assertCalledWith(spy, newData, 3);
        });
      });
      describe('removing a permission', function() {
        var permission;
        permission = null;
        beforeEach(function() {
          resourceModel.on('permission.remove', spy);
          return permission = resourceModel.removePermission(0);
        });
        it('removes the permission from the list', function() {
          return expect(resourceModel.get('acl')).not.include(permission);
        });
        return it('triggers a permission.remove event', function() {
          return this.assertCalledWith(spy, permission, 0);
        });
      });
      return describe('changing a permission', function() {
        var newValue, permission;
        permission = newValue = null;
        beforeEach(function() {
          resourceModel.on('permission.change', spy);
          permission = resourceModel.getPermission();
          newValue = 'fooz.bar';
          permission.principal = newValue;
          return resourceModel.changePermission(0, permission);
        });
        it('changes the permission', function() {
          return expect(resourceModel.getPermission().principal).equal(newValue);
        });
        return it('triggers a permission.change event', function() {
          return this.assertCalledWith(spy, permission, 0);
        });
      });
    });
    return describe('The Acl View', function() {
      var aclView, collection;
      aclView = collection = null;
      beforeEach(function() {
        collection = new AclCollection([], {
          resourceId: aclData.acl[0][0]
        });
        return aclView = new AclView({
          collection: collection
        });
      });
      return describe('render', function() {
        beforeEach(function() {
          return this.server.respond(populateResponse(aclData));
        });
        it('renders the aclView', function() {
          return expect(aclView.$el).have('div.permissions');
        });
        describe('current permissions', function() {
          var $permissions, permissionData;
          $permissions = permissionData = null;
          beforeEach(function() {
            $permissions = aclView.$('.permissions .permissionItem');
            return permissionData = aclData.acl[0][1];
          });
          it('renders all the current items', function() {
            return expect($permissions).length(permissionData.length + 1);
          });
          describe('add permissions', function() {
            var $addPermission;
            $addPermission = null;
            beforeEach(function() {
              return $addPermission = aclView.$('.permissions .permissionItem').eq(0);
            });
            return it('has a save button', function() {
              return expect($addPermission).have('button.add');
            });
          });
          return describe('edit permissions', function() {
            var $editPermission;
            $editPermission = null;
            beforeEach(function() {
              return $editPermission = aclView.$('.permissions .permissionItem').eq(1);
            });
            it('has a delete button', function() {
              return expect($editPermission).have('button.delete');
            });
            return describe('clicking the delete button', function() {
              var lastRequest, requestBody;
              lastRequest = requestBody = null;
              beforeEach(function() {
                this.fixturesContainer.append(aclView.el);
                $editPermission.find('button.delete').click();
                lastRequest = this.server.requests.last();
                return requestBody = JSON.parse(lastRequest.requestBody);
              });
              it('triggers a PUT', function() {
                return expect(lastRequest.method).equal('PUT');
              });
              it('removes the permission', function() {
                return expect(requestBody.acl).length(1);
              });
              it('leaves the correct permission', function() {
                return expect(requestBody.acl.last()).deep.equal(aclData.acl[0][1][1]);
              });
              it('removes the permission from the view on a successful response', function() {
                this.server.respond(populateResponse());
                return expect(aclView.$el).not.have($editPermission[0]);
              });
              it('keeps the permission in the view on an unsuccessful response', function() {
                this.server.respond(populateResponse('', 400));
                return expect(aclView.$el).have($editPermission[0]);
              });
              return it('keeps the model in the collection on an unsuccessful response', function() {
                var permissionsView;
                this.server.respond(populateResponse('', 400));
                permissionsView = aclView.views['.permissions'];
                return expect(permissionsView.collection.models).deep.include(permissionsView.views[""][1].model);
              });
            });
          });
        });
        return describe('inherited items', function() {
          it('renders all the acl items', function() {
            return expect(aclView.$('.inheritedPermissions .aclItem')).length(aclData.acl[0][1].length);
          });
          return describe('first item', function() {
            var $firstItem, firstItemData;
            $firstItem = null;
            firstItemData = aclData.acl[1][1][0];
            beforeEach(function() {
              return $firstItem = aclView.$('.inheritedPermissions .aclItem').eq(0);
            });
            it('renders with the correct allow type', function() {
              return expect($firstItem.find('.permissionType i'))["class"]('allowed');
            });
            it('renders with the correct permission', function() {
              return expect($firstItem).contain(firstItemData.permission);
            });
            return it('renders with the correct principal', function() {
              return expect($firstItem).contain(firstItemData.principal);
            });
          });
        });
      });
    });
  });

}).call(this);
