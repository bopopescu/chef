// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var BaseView, PopoverView, expect, _ref;
    _ref = require('src/browse/base'), BaseView = _ref.BaseView, PopoverView = _ref.PopoverView;
    expect = chai.expect;
    return describe('Popover View', function() {
      var $boundAnchor, $testFixtures, delegateSelector, view;
      view = null;
      $testFixtures = $('.testFixtures');
      delegateSelector = '.testAnchor';
      $boundAnchor = $("<a class=\"" + (delegateSelector.slice(1)) + "\" href=\"javascript:void(0)\">Test binding</a>");
      beforeEach(function() {
        view = new PopoverView();
        return $testFixtures.append($boundAnchor);
      });
      describe('initialize', function() {
        it('should set a window property', function() {
          return expect(view.$window).deep.equal($(window));
        });
        it('should set a body property', function() {
          return expect(view.$body).deep.equal($('body'));
        });
        it('should append the view to the body', function() {
          return expect($('body').has(view.el)).length(1);
        });
        it('should have an event name space', function() {
          return expect(view.eventNameSpace).equal("popoverEvent" + view.cid);
        });
        it('should have a default list of options', function() {
          return expect(view.options).not.empty;
        });
        return it('should call setDelegateSelector if delegateSelector is passed as an option.', function() {
          view.close();
          sinon.stub(PopoverView.prototype, 'setDelegateSelector');
          view = new PopoverView({
            delegateSelector: delegateSelector
          });
          expect(view.setDelegateSelector.calledWith(delegateSelector))["true"];
          return PopoverView.prototype.setDelegateSelector.restore();
        });
      });
      describe('positioning', function() {
        beforeEach(function() {
          return $testFixtures.css('position', 'relative');
        });
        afterEach(function() {
          return $testFixtures.css('position', 'static');
        });
        return it('places position on a positionElement if one is defined', function() {
          var $positionElement, height, left, top, width;
          view.close();
          left = top = 20;
          height = width = 10;
          $positionElement = $('<div />').css({
            position: 'relative',
            left: left,
            top: top,
            height: height,
            width: width
          });
          $testFixtures.append($positionElement);
          view = new PopoverView({
            $positionElement: $positionElement,
            delegateSelector: delegateSelector
          }).render();
          view.$popover.css({
            display: 'none',
            position: 'absolute'
          });
          $boundAnchor.click();
          return expect(parseInt(view.$popover.css('top'), 10)).equal($positionElement.offset().top + $positionElement.height());
        });
      });
      return afterEach(function() {
        view.close();
        return $testFixtures.empty();
      });
    });
  });

}).call(this);
