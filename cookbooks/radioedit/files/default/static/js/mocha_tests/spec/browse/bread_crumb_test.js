// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var AclView, Backbone, Blob, BreadCrumbView, CON, Commits, Ref, commitData, expect, global, populateResponse, _ref, _ref1;
    CON = require('src/const');
    _ref = require('src/browse/bread_crumb'), BreadCrumbView = _ref.BreadCrumbView, AclView = _ref.AclView;
    _ref1 = require('src/browse/models'), Commits = _ref1.Commits, Ref = _ref1.Ref, Blob = _ref1.Blob;
    populateResponse = require('util/ResponseHelper').populateResponse;
    commitData = require('fixtures/commit');
    Backbone = require('backbone');
    expect = chai.expect;
    global = (new Backbone.View()).global;
    return xdescribe('BreadCrumbView', function() {
      var blob, breadCrumbView, removePeriod;
      breadCrumbView = null;
      blob = null;
      removePeriod = function(str) {
        return str.slice(0, -1);
      };
      beforeEach(function() {
        breadCrumbView = new BreadCrumbView();
        return blob = new Blob(commitData);
      });
      afterEach(function() {
        return breadCrumbView.remove();
      });
      describe('browsing', function() {
        beforeEach(function() {
          var path;
          path = 'test.path.';
          return breadCrumbView.renderView(path, null, CON.EVENT_BROWSE);
        });
        it('renders the path', function() {
          return expect(breadCrumbView.$('.browserCrumb')).not.empty;
        });
        it('does not render the refs', function() {
          return expect(breadCrumbView.$('.refs')).empty;
        });
        it('does not render the info icons', function() {
          return expect(breadCrumbView.$('.infoIcons')).empty;
        });
        return it('does not render the crumb type', function() {
          return expect(breadCrumbView.$('.crumbType')).empty;
        });
      });
      describe('viewing', function() {
        beforeEach(function() {
          return breadCrumbView.renderView('', blob, CON.EVENT_VIEW);
        });
        it('renders the path', function() {
          return expect(breadCrumbView.$('.browserCrumb')).not.empty;
        });
        it('renders the refs', function() {
          return expect(breadCrumbView.$('.refs')).not.empty;
        });
        it('renders the info icons', function() {
          return expect(breadCrumbView.$('.infoIcons')).not.empty;
        });
        return it('renders the crumb type', function() {
          return expect(breadCrumbView.$('.crumbType')).not.empty;
        });
      });
      describe('viewing commits', function() {
        beforeEach(function() {
          return breadCrumbView.renderView('', blob, CON.EVENT_COMMIT_VIEW);
        });
        it('renders the path', function() {
          return expect(breadCrumbView.$('.browserCrumb')).not.empty;
        });
        it('does not render the refs', function() {
          return expect(breadCrumbView.$('.refs')).empty;
        });
        it('renders the info icons', function() {
          return expect(breadCrumbView.$('.infoIcons')).not.empty;
        });
        return it('does not render the crumb type', function() {
          return expect(breadCrumbView.$('.crumbType')).empty;
        });
      });
      describe('path', function() {
        it('renders HOME', function() {
          breadCrumbView.renderView('', null, CON.EVENT_BROWSE);
          return expect(breadCrumbView.$('.browserCrumb a')).text('Home');
        });
        it('renders a path with one level as plain text', function() {
          var path;
          path = 'test.';
          breadCrumbView.renderView(path, null, CON.EVENT_BROWSE);
          return expect(breadCrumbView.$('.browserCrumb')).contain(removePeriod(path));
        });
        return describe('with multiple levels', function() {
          var levelOne, levelThree, levelTwo, path;
          levelOne = 'levelOne.';
          levelTwo = 'levelTwo.';
          levelThree = 'levelThree.';
          path = "" + levelOne + levelTwo + levelThree;
          beforeEach(function() {
            return breadCrumbView.renderView(path, null, CON.EVENT_BROWSE);
          });
          it('renders the first level as a link', function() {
            return expect(breadCrumbView.$('.browserCrumb a').eq(1)).attr('href', "#" + levelOne);
          });
          it('renders the first level text', function() {
            return expect(breadCrumbView.$('.browserCrumb a').eq(1)).text(removePeriod(levelOne));
          });
          it('renders the second level link', function() {
            return expect(breadCrumbView.$('.browserCrumb a').eq(2)).attr('href', "#" + levelOne + levelTwo);
          });
          it('renders the second level text', function() {
            return expect(breadCrumbView.$('.browserCrumb a').eq(2)).text(removePeriod(levelTwo));
          });
          return it('renders the third level as text', function() {
            return expect(breadCrumbView.$('.browserCrumb')).contain(removePeriod(levelThree));
          });
        });
      });
      describe('refs', function() {
        describe('non-deletable', function() {
          beforeEach(function() {
            return breadCrumbView.renderView('', blob, CON.EVENT_VIEW);
          });
          it('renders the commit id', function() {
            return expect(breadCrumbView.$('.badge').eq(0)).text(blob.id.truncate(6));
          });
          it('renders the HEAD ref if one exists', function() {
            return expect(breadCrumbView.$('.badge').eq(1)).text('HEAD');
          });
          return it('does not render HEAD as deletable', function() {
            return expect(breadCrumbView.$('.badge').eq(1)).not["class"]('deletable');
          });
        });
        return describe('deletable', function() {
          beforeEach(function() {
            blob.index().dataStore.get('refs').create({
              id: 'test',
              'commit': blob.id
            });
            return breadCrumbView.renderView('', blob, CON.EVENT_VIEW);
          });
          it('renders a ref badge as deletable', function() {
            return expect(breadCrumbView.$('.badge').eq(2))["class"]('deletable');
          });
          return it('renders a ref with the current commitId', function() {
            return expect(breadCrumbView.$('.badge').eq(2)).contain('test');
          });
        });
      });
      describe('info icons', function() {
        var infoIcons, path;
        path = infoIcons = null;
        beforeEach(function() {
          return path = blob.resourceId();
        });
        describe('non commit view', function() {
          beforeEach(function() {
            return breadCrumbView.renderView(path, blob, CON.EVENT_VIEW);
          });
          it('renders a history icon', function() {
            return expect(breadCrumbView.$('.infoIcons a'))["class"]('history');
          });
          return it('sets the history link to the current path', function() {
            return expect(breadCrumbView.$('.infoIcons a')).attr('href', "#" + path);
          });
        });
        describe('commit view', function() {
          beforeEach(function() {
            return breadCrumbView.renderView(path, blob, CON.EVENT_COMMIT_VIEW);
          });
          it('renders a history icon', function() {
            return expect(breadCrumbView.$('.infoIcons a'))["class"]('history');
          });
          return it('sets the history link to the blob fragment', function() {
            return expect(breadCrumbView.$('.infoIcons a')).attr('href', "#" + (blob.getFragment()));
          });
        });
        return describe('viewing a resource', function() {
          beforeEach(function() {
            return breadCrumbView.renderView(path, blob, CON.EVENT_VIEW);
          });
          return it('renders a acl icon', function() {
            return expect(breadCrumbView.$('.infoIcons a'))["class"]('acl');
          });
        });
      });
      describe('crumb type', function() {
        var badges;
        badges = null;
        beforeEach(function() {
          breadCrumbView.renderView('', blob, CON.EVENT_VIEW);
          return badges = breadCrumbView.$('.crumbType .badge');
        });
        it('renders the type', function() {
          return expect(badges).text(blob.typeId().capitalize());
        });
        it('does not render the draft badge', function() {
          return expect(badges).length(1);
        });
        return it('does not render the draft badge text', function() {
          return expect(badges).not.text('Draft');
        });
      });
      describe('events', function() {
        var path, spy;
        spy = path = null;
        beforeEach(function() {
          return spy = this.spy(breadCrumbView, 'renderView');
        });
        describe('browsing', function() {
          beforeEach(function() {
            path = 'test.path';
            return global.trigger(CON.EVENT_BROWSE, path);
          });
          it('renders on a browse event', function() {
            return this.assertCalledOnce(spy);
          });
          return it('renders with the correct arguments', function() {
            return this.assertAlwaysCalledWithExactly(spy, path, null, CON.EVENT_BROWSE);
          });
        });
        describe('viewing', function() {
          beforeEach(function() {
            return global.trigger(CON.EVENT_VIEW, blob);
          });
          it('renders on a view event', function() {
            return this.assertCalledOnce(spy);
          });
          return it('renders with the correct arguments', function() {
            return this.assertAlwaysCalledWithExactly(spy, blob.resourceId(), blob, CON.EVENT_VIEW);
          });
        });
        return describe('commit viewing', function() {
          var resourceId;
          resourceId = null;
          beforeEach(function() {
            var commits;
            resourceId = blob.resourceId();
            commits = new Commits([blob], {
              resourceId: resourceId
            });
            return global.trigger(CON.EVENT_COMMIT_VIEW, resourceId, commits);
          });
          it('renders on a commit view event', function() {
            return this.assertCalledOnce(spy);
          });
          return it('renders with the correct arguments', function() {
            return this.assertAlwaysCalledWithExactly(spy, resourceId, blob, CON.EVENT_COMMIT_VIEW);
          });
        });
      });
      describe('deleting', function() {
        var hideSpy, ref, showSpy;
        ref = showSpy = hideSpy = null;
        beforeEach(function() {
          blob.index().dataStore.get('refs').create({
            id: 'test',
            'commit': blob.id
          });
          breadCrumbView.renderView('', blob, CON.EVENT_VIEW);
          this.fixturesContainer.html(breadCrumbView.el);
          ref = breadCrumbView.views['.refs'].getView(function(view) {
            return view.ref.id !== 'HEAD';
          });
          showSpy = this.spy(ref.deletePopover, 'showPopover');
          hideSpy = this.spy(ref.deletePopover, 'hidePopover');
          return ref.$('.deletable').click();
        });
        it('does not render a delete popover for a HEAD ref', function() {
          var headRef;
          headRef = breadCrumbView.views['.refs'].getView(function(view) {
            return view.ref.id === 'HEAD';
          });
          return expect(headRef.deletePopover).undefined;
        });
        it('displays when clicking a deletable ref', function() {
          return this.assertCalledOnce(showSpy);
        });
        it('is populated with the ref name', function() {
          return expect(ref.deletePopover.$('.btn-danger')).contain('test');
        });
        return describe('clicking delete', function() {
          var deleteRequest;
          deleteRequest = null;
          beforeEach(function() {
            ref.deletePopover.$('.btn-danger').click();
            return deleteRequest = this.server.requests.last();
          });
          it('sends a delete request', function() {
            return expect(deleteRequest.method).equal('DELETE');
          });
          it('calls the correct api endpoint', function() {
            return expect(deleteRequest.url).equal('/api/v2/meh.des/refs/test');
          });
          it('sends a null request body', function() {
            return expect(deleteRequest.requestBody)["null"];
          });
          return describe('and responding', function() {
            beforeEach(function() {
              return deleteRequest.respond(populateResponse({}, 204));
            });
            it('removes the commit data', function() {
              return expect(_.keys(blob.get('index').refs)).deep.equal(['HEAD', 'Live', 'Staging', 'develop']);
            });
            return it('hides the delete popover', function() {
              return this.assertCalled(hideSpy);
            });
          });
        });
      });
      return describe('clicking acl', function() {
        var showSpy;
        showSpy = null;
        beforeEach(function() {
          var acl;
          breadCrumbView.renderView('', blob, CON.EVENT_VIEW);
          this.fixturesContainer.html(breadCrumbView.el);
          acl = breadCrumbView.getView(function(view) {
            return view instanceof AclView;
          });
          showSpy = this.spy(acl.aclPopover, 'showPopover');
          return acl.$el.click();
        });
        return it('displays the popover', function() {
          return this.assertCalledOnce(showSpy);
        });
      });
    });
  });

}).call(this);
