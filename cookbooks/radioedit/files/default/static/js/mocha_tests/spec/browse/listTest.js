// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(function(require) {
    var ListView, NodesCollection, nodesFixtureHelper;
    ListView = require('src/browse/list').ListView;
    NodesCollection = require('src/browse/models').NodesCollection;
    nodesFixtureHelper = require('fixtures/nodes');
    return describe('List View', function() {
      var collection, data_type, model, should, view;
      view = null;
      collection = null;
      model = null;
      should = chai.should();
      data_type = 'feature';
      beforeEach(function() {
        model = {
          get: function() {
            return data_type;
          }
        };
        collection = {
          on: function() {},
          off: function() {},
          each: function(callback) {
            return callback(model);
          }
        };
        sinon.spy(collection, 'each');
        sinon.stub(collection, 'on');
        return sinon.stub(collection, 'off');
      });
      describe('initialize', function() {
        return it('should bind reset to render', function() {
          view = new ListView({
            collection: collection
          });
          return should.equal(collection.on.calledWith('reset', view.render, view), true);
        });
      });
      describe('render', function() {
        beforeEach(function() {
          var key, out, value, _ref;
          view = new ListView({
            collection: collection
          });
          out = {};
          _ref = view.modelViewMap;
          for (key in _ref) {
            if (!__hasProp.call(_ref, key)) continue;
            value = _ref[key];
            out[key] = sinon.stub().returns({
              render: function() {
                return {
                  el: ''
                };
              }
            });
          }
          return view.modelViewMap = out;
        });
        it('should throw an error if the data_type is not defined', function() {
          var oldData_type;
          oldData_type = data_type;
          data_type = 'blah';
          should.Throw(function() {
            return view.render();
          }, 'blah is not defined in the model view mapping');
          return data_type = oldData_type;
        });
        return it('should render a list of views cooresponding to the collection', function() {
          sinon.spy(view, 'createListView');
          view.render();
          view.createListView.should.have.been.calledWith(model);
          view.modelViewMap[data_type].should.have.been.calledWith({
            model: model
          });
          return view.createListView.restore;
        });
      });
      return afterEach(function() {
        if (view != null) {
          view.close();
        }
        view = null;
        collection = null;
        return model = null;
      });
    });
  });

}).call(this);
