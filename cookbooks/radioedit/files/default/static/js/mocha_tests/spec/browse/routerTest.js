// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var Backbone, expect, router;
    Backbone = require('backbone');
    router = require('src/browse/router');
    expect = chai.expect;
    return describe('Browse Router', function() {
      return describe('behavior', function() {
        var routeSpy;
        routeSpy = null;
        beforeEach(function() {
          sinon.stub(Backbone.history, '_updateHash');
          try {
            Backbone.history.start({
              silent: false
            });
          } catch (e) {

          }
          router.navigate('somewhere');
          return routeSpy = sinon.spy();
        });
        it('stores the last route', function(done) {
          var testPath;
          testPath = 'fooBar.';
          router.on('all', function() {
            expect(router.previousRoute).equal(testPath);
            return done();
          });
          return router.navigate(testPath, true);
        });
        it('fires the router browse path when the dispatcher fires a browse path', function() {
          router.on('route:browse', routeSpy);
          router.global.trigger('browse', 'fooBar.');
          return routeSpy.calledOnce;
        });
        it('has a draft route', function() {
          return expect(router.routes[':object/:commit/:draft']).equal('draft');
        });
        it('triggers the draft route', function() {
          var commit, draft, object;
          object = 'a';
          commit = 'b';
          draft = 'c';
          router.on('route:draft', routeSpy);
          router.navigate("" + object + "/" + commit + "/" + draft, true);
          Backbone.history._updateHash.calledOnce;
          return routeSpy.calledWithExactly(object, commit, draft);
        });
        it('has a modify route', function() {
          return expect(router.routes[':object/:commit']).equal('modify');
        });
        it('triggers the modify route', function() {
          var commit, object;
          object = 'a';
          commit = 'b';
          router.on('route:modify', routeSpy);
          router.navigate("" + object + "/" + commit, true);
          Backbone.history._updateHash.calledOnce;
          return routeSpy.calledWithExactly(object, commit);
        });
        it('has a browse route', function() {
          return expect(router.routes[':path.']).equal('browse');
        });
        it('triggers the browse route', function() {
          var path;
          path = 'a';
          router.on('route:browse', routeSpy);
          router.navigate("" + path + ".", true);
          Backbone.history._updateHash.calledOnce;
          return routeSpy.calledWithExactly(path);
        });
        it('has a commits route', function() {
          return expect(router.routes[':object']).equal('commits');
        });
        it('triggers the commits route', function() {
          var object;
          object = 'a';
          router.on('route:commits', routeSpy);
          router.navigate("" + object + "}", true);
          Backbone.history._updateHash.calledOnce;
          return routeSpy.calledWithExactly(object);
        });
        return afterEach(function() {
          Backbone.history._updateHash.restore();
          return router.off();
        });
      });
    });
  });

}).call(this);
