// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var Blob, Commits, Data, Index, NodesCollection, Schedule, XhrHelper, commitData, expect, nodesFixtureHelper, populateResponse, should, _, _ref;
    _ref = require('src/browse/models'), NodesCollection = _ref.NodesCollection, Blob = _ref.Blob, Commits = _ref.Commits, Schedule = _ref.Schedule, Data = _ref.Data, Index = _ref.Index;
    nodesFixtureHelper = require('fixtures/nodes');
    XhrHelper = require('util/XhrHelper');
    should = chai.should();
    populateResponse = require('util/ResponseHelper').populateResponse;
    commitData = require('fixtures/commit');
    _ = require('underscore');
    expect = chai.expect;
    describe('Nodes Collection', function() {
      var collection, xhrHelper;
      collection = null;
      xhrHelper = new XhrHelper();
      beforeEach(function() {
        return xhrHelper.setUp();
      });
      describe('fetch', function() {
        return it('should parse the response and save the meta data', function() {
          var nodesRequest;
          collection = new NodesCollection();
          collection.fetch();
          nodesRequest = xhrHelper.requests.shift();
          nodesRequest.respond.apply(nodesRequest, nodesFixtureHelper.getResponse());
          return collection.models.should.have.length(nodesFixtureHelper.data.result.length);
        });
      });
      return afterEach(function() {
        xhrHelper.cleanUp();
        return collection = null;
      });
    });
    describe('Blob Model', function() {
      var model;
      model = null;
      describe('static instance method', function() {
        var commitId, indexId;
        indexId = 'indexId';
        commitId = 'commitId';
        beforeEach(function() {
          return model = Blob.instance(indexId, commitId);
        });
        it("creates a blob instance", function() {
          return expect(model)["instanceof"](Blob);
        });
        it('sets the index id', function() {
          return expect(model.get('index')._id).equal(indexId);
        });
        it('sets the commit id', function() {
          return expect(model.get('commit')._id).equal(commitId);
        });
        return it('sets the model id to the commit id', function() {
          return expect(model.id).equal(commitId);
        });
      });
      return describe('general usage', function() {
        beforeEach(function() {
          return model = new Blob(commitData);
        });
        it('returns the commitId', function() {
          return expect(model.commitId()).equal(commitData.commit._id);
        });
        it('returns the resourceId', function() {
          return expect(model.resourceId()).equal(commitData.index._id);
        });
        it('returns the typeId', function() {
          return expect(model.typeId()).equal(commitData.index.data_type);
        });
        it('returns the schedule', function() {
          return expect(model.schedule()).equal(commitData.index.schedule);
        });
        it('returns the Data model', function() {
          return expect(model.data()).instanceOf(Data);
        });
        it('returns the Index model', function() {
          return expect(model.index()).instanceOf(Index);
        });
        it('returns the refs', function() {
          return expect(model.refs()).equal(commitData.commit.refs);
        });
        it('returns the author', function() {
          return expect(model.author()).equal(commitData.commit.author);
        });
        it('returns the fragment', function() {
          return expect(model.getFragment()).equal("" + commitData.commit.resource_id + "/" + commitData.commit._id);
        });
        it('serializes the full structure', function() {
          return expect(model.toJSON(true)).deep.equal(commitData);
        });
        it('serializes the data', function() {
          return expect(model.toJSON()).deep.equal(commitData.data);
        });
        describe('change events', function() {
          var spy;
          spy = null;
          beforeEach(function() {
            return spy = this.spy();
          });
          it('triggers a model change event on data change', function() {
            model.on('change', spy);
            model.data().set('description', 'a');
            return this.assertCalledOnce(spy);
          });
          it('triggers an event on model change', function() {
            model.data().on('change', spy);
            model.set('data', {});
            return this.assertCalledOnce(spy);
          });
          return it('triggers a data change when model parse is called', function() {
            model.data().on('change', spy);
            model.fetch();
            this.server.respond(populateResponse(commitData));
            return this.assertCalledOnce(spy);
          });
        });
        return describe('Data Model', function() {
          it('returns the commitId', function() {
            return expect(model.data().commitId()).equal(commitData.commit._id);
          });
          it('returns the resourceId', function() {
            return expect(model.data().resourceId()).equal(commitData.index._id);
          });
          it('returns the typeId', function() {
            return expect(model.data().typeId()).equal(commitData.index.data_type);
          });
          return it('disallows save', function() {
            return expect(function() {
              return model.data().save();
            }).throws(Error);
          });
        });
      });
    });
    describe('Schedule', function() {
      var resourceId, schedule, scheduleData;
      schedule = null;
      scheduleData = [
        {
          "commit": "9600a9effe0e1cb391d5229cd7c595cb26659df9",
          ref: "Development",
          time: 1345852800000
        }, {
          "commit": "9600a9effe0e1cb391d5229cd7c595cb26659df9",
          ref: "Staging",
          time: 1345852800000
        }, {
          "commit": null,
          ref: "Staging",
          time: 1345680000000
        }, {
          "commit": null,
          ref: "Live",
          time: 1345248000000
        }, {
          "commit": "9600a9effe0e1cb391d5229cd7c595cb26659df9",
          ref: "Staging",
          time: 1345334400000
        }
      ];
      resourceId = 'a.b';
      beforeEach(function() {
        return schedule = new Schedule({
          schedule: scheduleData
        }, {
          resourceId: resourceId
        });
      });
      it('should return the number of active schedules for a given date', function() {
        var count;
        count = schedule.getActiveCount(1345852810000);
        count.should.equal(2);
        count = schedule.getActiveCount(1343779200000);
        count.should.equal(0);
        count = schedule.getActiveCount(1345680010000);
        return count.should.equal(0);
      });
      it('should return a list of active refs for a given date', function() {
        var refs;
        refs = schedule.getActiveRefs(1345334410000);
        expect(refs).deep.equal(['Staging']);
        refs = schedule.getActiveRefs(1345238000000);
        refs.should.deep.equal([]);
        refs = schedule.getActiveRefs(1345852810000);
        return refs.should.deep.equal(['Development', 'Staging']);
      });
      return describe('validate', function() {
        return it('is invalid when entering head', function() {
          var invalidData;
          invalidData = _.clone(scheduleData);
          _(invalidData).first().ref = 'HEAD';
          return expect(schedule.validate({
            schedule: invalidData
          })).not.undefined;
        });
      });
    });
    return describe('Commits Model', function() {
      var commits, resourceId;
      commits = null;
      resourceId = 'foo';
      beforeEach(function() {
        return commits = new Commits([], {
          resourceId: resourceId
        });
      });
      it('throws an error if resourceId is not passed', function() {
        return expect(function() {
          return new Commits();
        }).throws(Error);
      });
      it('uses the resourceId in it\'s url', function() {
        return expect(commits.url()).contain(resourceId);
      });
      return it('fetches commits with refs', function() {
        var request;
        commits.refsFetch();
        request = this.server.requests[0];
        expect(request.url).contain('?refs=1');
        return expect(request.method).equal('GET');
      });
    });
  });

}).call(this);
