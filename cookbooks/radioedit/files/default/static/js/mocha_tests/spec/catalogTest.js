// Generated by CoffeeScript 1.4.0
(function() {

  define(function(require) {
    var $, Backbone, CON, DEVICE_PREFIX, PlaylistView, WEB_PREFIX, catalogSearchView, expect, gagaSearchResponse, genreQueryResponse, global, populateResponse;
    CON = require('src/const');
    PlaylistView = require('src/browse/typeviews/concierge').PlaylistView;
    Backbone = require('backbone');
    catalogSearchView = require('src/catalog');
    $ = require('jquery');
    populateResponse = require('util/ResponseHelper').populateResponse;
    expect = chai.expect;
    DEVICE_PREFIX = 'ihr://play/custom';
    WEB_PREFIX = 'http://www.iheart.com';
    global = (new Backbone.View()).global;
    describe('Catalog Search Dialog', function() {
      beforeEach(function() {
        window.localStorage.removeItem('prefs:/catalogSearchDialog');
        return global.trigger(CON.EVENT_CATALOG);
      });
      describe('Modal and UI Functionality', function() {
        it('opens on global EVENT_CATALOG', function() {
          return expect($('#attachModal').data('modal').isShown)["true"];
        });
        it('clears itself on show()', function() {
          var spy;
          spy = this.spy(catalogSearchView, 'clear');
          global.trigger(CON.EVENT_CATALOG);
          return this.assertCalledOnce(spy);
        });
        describe('show and hide', function() {
          it('hides on hide()', function() {
            catalogSearchView.hide();
            return expect($('#attachModal').data('modal').isShown)["false"];
          });
          it('shows on show()', function() {
            catalogSearchView.show();
            return expect($('#attachModal').data('modal').isShown)["true"];
          });
          return it('hides on hide()', function() {
            catalogSearchView.hide();
            return expect($('#attachModal').data('modal').isShown)["false"];
          });
        });
        describe('tab switching via click', function() {
          it('starts on the first tab', function() {
            expect($('ul.nav-tabs li:first'))["class"]('active');
            return expect($('ul.nav-tabs li:eq(1)')).not["class"]('active');
          });
          it('changes to genre/mood on click', function() {
            $('ul.nav-tabs li:eq(1) a').click();
            expect($('ul.nav-tabs li:first')).not["class"]('active');
            return expect($('ul.nav-tabs li:eq(1)'))["class"]('active');
          });
          return it('changes to search on click', function() {
            $('ul.nav-tabs li:first a').click();
            expect($('ul.nav-tabs li:first'))["class"]('active');
            return expect($('ul.nav-tabs li:eq(1)')).not["class"]('active');
          });
        });
        return describe('resetting on clear()', function() {
          beforeEach(function() {
            $('#attachSearch').val('abc');
            catalogSearchView.currentSearch = 'abc';
            catalogSearchView.catalog.reset([
              {
                id: 1
              }
            ], {
              silent: true
            });
            $('#attach-results').html('not empty');
            $('input[type=checkbox]').each(function() {
              return $(this).removeAttr('checked');
            });
            $('ul.nav-tabs li:eq(1) a').tab('show');
            return catalogSearchView.clear();
          });
          it('resets search input element', function() {
            return expect($('#attachSearch')).value('');
          });
          it('resets saved search value', function() {
            return expect(catalogSearchView.currentSearch).equal('');
          });
          it('resets catalog', function() {
            return expect(catalogSearchView.catalog.models).length(0);
          });
          it('clears result div', function() {
            return expect($('#attach-results').html()).equal('');
          });
          it('resets artist checkbox', function() {
            return expect($('#artist')).attr('checked');
          });
          it('resets track checkbox', function() {
            return expect($('#track')).attr('checked');
          });
          it('resets featured checkbox', function() {
            return expect($('#featured')).attr('checked');
          });
          it('resets station checkbox', function() {
            return expect($('#station')).attr('checked');
          });
          return it('selects the first tab', function() {
            expect($('ul.nav-tabs li:first'))["class"]('active');
            return expect($('ul.nav-tabs li:eq(1)')).not["class"]('active');
          });
        });
      });
      describe('Link Creation', function() {
        it('creates correct links for artists', function() {
          var item, links;
          item = new Backbone.Model({
            id: 123456,
            kind: 'artist'
          });
          links = catalogSearchView._createLink(item);
          expect(links[0]).equal("" + WEB_PREFIX + "/artist/-123456/");
          return expect(links[1]).equal("" + DEVICE_PREFIX + "/artist/123456/");
        });
        it('creates correct links for tracks', function() {
          var item, links;
          item = new Backbone.Model({
            id: 789012,
            kind: 'track',
            artistId: 123456
          });
          links = catalogSearchView._createLink(item);
          expect(links[0]).equal("" + WEB_PREFIX + "/artist/-123456/songs/-789012/");
          return expect(links[1]).equal("" + DEVICE_PREFIX + "/track/789012/");
        });
        it('creates correct link for featured stations', function() {
          var item, links;
          item = new Backbone.Model({
            id: 1234,
            kind: 'station'
          });
          links = catalogSearchView._createLink(item);
          expect(links[0]).equal("" + WEB_PREFIX + "/live/1234/");
          return expect(links[1]).equal("" + DEVICE_PREFIX + "/live/1234/");
        });
        return it('creates correct links for stations', function() {
          var item, links;
          item = new Backbone.Model({
            id: 1234,
            kind: 'featured',
            name: 'Hits 2K',
            slug: 'Hits-2K'
          });
          links = catalogSearchView._createLink(item);
          expect(links[0]).equal("" + WEB_PREFIX + "/original/Hits-2K/");
          return expect(links[1]).equal("" + DEVICE_PREFIX + "/original/Hits-2K/");
        });
      });
      describe('Artist/Track Search', function() {
        describe('search html input', function() {
          it('responds to search input change', function() {
            var spy;
            spy = this.spy(catalogSearchView, 'onSearchInputChanged');
            catalogSearchView.delegateEvents();
            $('#attachSearch').trigger('input');
            return this.assertCalledOnce(spy);
          });
          return it('updates .currentSearch when search input changes', function() {
            expect(catalogSearchView.currentSearch).equal('');
            $('#attachSearch').val('gaga').trigger('input');
            return expect(catalogSearchView.currentSearch).equal('gaga');
          });
        });
        describe('search options', function() {
          beforeEach(function() {
            this.spyEventHandler = this.spy(catalogSearchView, 'onSearchOptionChecked');
            return catalogSearchView.delegateEvents();
          });
          it('responds to artist checkbox', function() {
            $('#artist').trigger('change');
            return this.assertCalledOnce(this.spyEventHandler);
          });
          it('responds to track checkbox', function() {
            $('#track').trigger('change');
            return this.assertCalledOnce(this.spyEventHandler);
          });
          it('responds to featured checkbox', function() {
            $('#featured').trigger('change');
            return this.assertCalledOnce(this.spyEventHandler);
          });
          it('responds to station checkbox', function() {
            $('#station').trigger('change');
            return this.assertCalledOnce(this.spyEventHandler);
          });
          describe('search query (with all options)', function() {
            beforeEach(function() {
              $('#attachSearch').val('gaga').trigger('input');
              catalogSearchView._search();
              return this.request = this.server.queue[0];
            });
            it('performs a single request', function() {
              return expect(this.server.queue).length(1);
            });
            it('has the correct method', function() {
              return expect(this.request.method).equal('GET');
            });
            return it('has the correct URL', function() {
              return expect(this.request.url).equal('/api/v2/utils/catalog/?artist=true&track=true&featured=true&station=true&q=gaga');
            });
          });
          return describe('search query (artist and track only)', function() {
            beforeEach(function() {
              $('#attachSearch').val('van halen').trigger('input');
              $('#featured').removeAttr('checked');
              $('#station').removeAttr('checked');
              catalogSearchView._search();
              return this.request = this.server.queue[0];
            });
            it('performs a single request', function() {
              return expect(this.server.queue).length(1);
            });
            it('has the correct method', function() {
              return expect(this.request.method).equal('GET');
            });
            return it('has the correct URL', function() {
              return expect(this.request.url).equal('/api/v2/utils/catalog/?artist=true&track=true&featured=false&station=false&q=van+halen');
            });
          });
        });
        return describe('search results', function() {
          beforeEach(function() {
            var _this = this;
            $('#attachSearch').val('gaga');
            global.trigger(CON.EVENT_CATALOG, function(item, links) {
              return _this.callback(item, links);
            });
            catalogSearchView._search();
            return this.server.respond(populateResponse(gagaSearchResponse));
          });
          afterEach(function() {
            return this.callback = void 0;
          });
          it('populates the dialog on search response', function() {
            return expect($('#attach-results tr')).length(7);
          });
          it('returns the selected item', function(done) {
            this.callback = function(item, links) {
              expect(item.id).equal(29);
              expect(item.get('name')).equal('Hits 2K');
              return done();
            };
            return $('#attach-results tr:eq(1) a').click();
          });
          return it('returns the selected item', function(done) {
            this.callback = function(item, links) {
              expect(item.id).equal(13767331);
              expect(item.get('artist')).equal('Lady GaGa');
              expect(item.get('artistId')).equal(39335);
              expect(item.get('name')).equal('The Edge Of Glory');
              return done();
            };
            return $('#attach-results tr:eq(5) a').click();
          });
        });
      });
      return describe('Genre/Mood Filter', function() {
        beforeEach(function() {
          return $('a[data-target=#genre]').click();
        });
        describe('switching to genre/mood tab', function() {
          beforeEach(function() {
            return this.request = this.server.queue[0];
          });
          it('performs a single request', function() {
            return expect(this.server.queue).length(1);
          });
          it('has the correct method', function() {
            return expect(this.request.method).equal('POST');
          });
          it('has the correct url', function() {
            return expect(this.request.url).equal('/api/v2/datasource/');
          });
          return it('has the correct query', function() {
            return expect(this.request.requestBody).equal('{"datasource":"ingestion","query":"SELECT\\n  station_id as id,\\n  name,\\n  vanity_name as slug,\\n  CASE station_type\\n    WHEN 2 THEN \'genre\'\\n    WHEN 3 THEN \'mood\'\\n  END as kind\\nFROM station\\nORDER BY name","default_limit":1000}');
          });
        });
        describe('filter genre/mood results', function() {
          beforeEach(function() {
            return this.server.respond(populateResponse(genreQueryResponse));
          });
          it('responds to filter input change', function() {
            var spy;
            spy = this.spy(catalogSearchView, 'onFilterInputChanged');
            catalogSearchView.delegateEvents();
            $('#filter').trigger('input');
            return this.assertCalledOnce(spy);
          });
          it('shows all rows initially', function() {
            return expect($('#attach-results tr')).length(7);
          });
          it('updates the result display when the filter changes', function() {
            var $visibleResults;
            $('#filter').val('B').trigger('input');
            $visibleResults = $('#attach-results tr').filter(function() {
              return $(this).css('display') !== 'none';
            });
            return expect($visibleResults).length(2);
          });
          return it('highlights the correct row', function() {
            var $visibleResults;
            $('#filter').val('B').trigger('input');
            $visibleResults = $('#attach-results tr').filter(function() {
              return $(this).css('display') !== 'none';
            });
            return expect($visibleResults.filter(':eq(1)').find('td:last')).text('Blue-Note');
          });
        });
        return describe('select result item', function() {
          beforeEach(function() {
            var _this = this;
            global.trigger(CON.EVENT_CATALOG, function(item, links) {
              return _this.callback(item, links);
            });
            return this.server.respond(populateResponse(genreQueryResponse));
          });
          it('returns the selected item', function(done) {
            this.callback = function(item, links) {
              expect(item.id).equal(300);
              expect(item.get('name')).equal('The Sun Has Risen, Gospel');
              return done();
            };
            return $('#attach-results tr:eq(1) a').click();
          });
          return it('returns the selected item', function(done) {
            this.callback = function(item, links) {
              expect(item.id).equal(305);
              expect(item.get('name')).equal('Detroit Rock City');
              return done();
            };
            return $('#attach-results tr:eq(3) a').click();
          });
        });
      });
    });
    gagaSearchResponse = {
      message: null,
      meta: {
        limit: 34,
        offset: 0,
        records: 34
      },
      result: [
        {
          "id": 29,
          "img": "http://assets.iheart.com/tools/images/themestations/29.jpg",
          "kind": "featured",
          "name": "Hits 2K",
          "slug": "Hits-2K"
        }, {
          "id": 26,
          "img": "http://assets.iheart.com/tools/images/themestations/26.jpg",
          "kind": "featured",
          "name": "Spring Break",
          "slug": "Spring-Break"
        }, {
          "id": 39335,
          "img": "http://localhost:8338/catalog/a39335",
          "kind": "artist",
          "name": "Lady GaGa"
        }, {
          "id": 478738,
          "img": "http://localhost:8338/catalog/a478738",
          "kind": "artist",
          "name": "Gaga"
        }, {
          "artist": "Lady GaGa",
          "artistId": 39335,
          "id": 13767331,
          "img": "http://localhost:8338/catalog/t13767331",
          "kind": "track",
          "name": "The Edge Of Glory"
        }, {
          "artist": "Lady GaGa",
          "artistId": 39335,
          "id": 643673,
          "img": "http://localhost:8338/catalog/t643673",
          "kind": "track",
          "name": "Just Dance"
        }
      ],
      status: 200
    };
    return genreQueryResponse = {
      fields: ["id", "name", "slug", "img", "kind"],
      query: "SELECT\n  station_id as id,\n  name,\n  vanity_name as slug,\n  null as img,\n  CASE station_type\n    WHEN 2 THEN 'genre'\n    WHEN 3 THEN 'mood'\n  END as kind\nFROM station\nWHERE station_id NOT IN (SELECT id FROM echonest_override) LIMIT :limit OFFSET :offset",
      query_params: {},
      range: {
        limit: 1000,
        offset: 0
      },
      result: [
        {
          "id": 300,
          "img": null,
          "kind": "genre",
          "name": "The Sun Has Risen, Gospel",
          "slug": "The-Sun-Has-Risen-Gospel"
        }, {
          "id": 344,
          "img": null,
          "kind": "genre",
          "name": "Blue Note",
          "slug": "Blue-Note"
        }, {
          "id": 305,
          "img": null,
          "kind": "genre",
          "name": "Detroit Rock City",
          "slug": "Detroit-Rock-City"
        }, {
          "id": 143,
          "img": null,
          "kind": "genre",
          "name": "Classic Road Rock",
          "slug": "Classic-Road-Rock"
        }, {
          "id": 350,
          "img": null,
          "kind": "genre",
          "name": "Stax",
          "slug": "Stax"
        }, {
          "id": 165,
          "img": null,
          "kind": "genre",
          "name": "Trending Hip Hop",
          "slug": "Trending-Hip-Hop"
        }
      ]
    };
  });

}).call(this);
