// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, Browser, EndpointView, GroupView, JSONView, MethodView, SchemaView, browserTemplate, endpointTemplate, getNestedView, groupTemplate, methodTemplate, run, _, _ref;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    _ref = require('src/jsonview'), JSONView = _ref.JSONView, SchemaView = _ref.SchemaView;
    browserTemplate = require('templates/browser/browser');
    endpointTemplate = require('templates/browser/endpoint');
    methodTemplate = require('templates/browser/method');
    groupTemplate = require('templates/browser/group');
    getNestedView = function(data, group, level) {
      if (data.type === 'group') {
        return new GroupView({
          data: data,
          level: level
        });
      } else if (data.type === 'endpoint') {
        return new EndpointView({
          data: data,
          group: group,
          level: level
        });
      }
    };
    MethodView = (function(_super) {

      __extends(MethodView, _super);

      function MethodView() {
        return MethodView.__super__.constructor.apply(this, arguments);
      }

      MethodView.prototype.tagName = 'li';

      MethodView.prototype.attributes = {
        "class": 'method'
      };

      MethodView.prototype.events = {
        'click .toggle-method': 'toggle',
        'click .impdetail h4': 'toggleDetail',
        'click .tryit': 'tryit'
      };

      MethodView.prototype.initialize = function(_arg) {
        this.method = _arg.method, this.endpoint = _arg.endpoint;
      };

      MethodView.prototype.render = function() {
        this.$el.addClass(this.method.verb);
        this.$el.append(methodTemplate({
          method: this.method,
          endpoint: this.endpoint
        }));
        if (this.$('.request div').length > 0) {
          this.$('.request div').append(new SchemaView({
            payload: this.method.contracts.request
          }).el);
        }
        if (this.$('.response div').length > 0) {
          this.$('.response div').append(new SchemaView({
            payload: this.method.contracts.response
          }).el);
        }
        return this.$el;
      };

      MethodView.prototype.toggle = function(e) {
        return this.$('.implementation').toggleClass('hide');
      };

      MethodView.prototype.toggleDetail = function(e) {
        var el;
        el = $(e.currentTarget).parent('div');
        el.toggleClass('collapsed');
        if (el.hasClass('collapsed')) {
          return el.find('h4 i').addClass('icon-caret-right').removeClass('icon-caret-down');
        } else {
          return el.find('h4 i').addClass('icon-caret-down').removeClass('icon-caret-right');
        }
      };

      MethodView.prototype.tryit = function() {
        var field, i, param, qsParams, querystring, results, url, urlParams, value, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3,
          _this = this;
        urlParams = {};
        _ref1 = this.$('.params input');
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          i = _ref1[_i];
          urlParams[i.name] = i.value;
        }
        qsParams = {};
        _ref2 = this.$('.querystring input');
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          i = _ref2[_j];
          qsParams[i.name] = i.value;
        }
        url = [];
        _ref3 = this.endpoint.params;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          param = _ref3[_k];
          if (urlParams[param.name]) {
            url.push(urlParams[param.name]);
          } else {
            url.push('MISSING');
          }
        }
        if ((this.endpoint.prefix != null) && this.endpoint.prefix.slice(-1) !== '/') {
          this.endpoint.prefix += '/';
        }
        url = "" + this.endpoint.base_url + (this.endpoint.prefix || '') + (url.join('/'));
        querystring = (function() {
          var _results;
          _results = [];
          for (field in qsParams) {
            if (!__hasProp.call(qsParams, field)) continue;
            value = qsParams[field];
            if (value !== '') {
              _results.push(encodeURIComponent(field) + '=' + encodeURIComponent(value));
            }
          }
          return _results;
        })();
        if (querystring.length) {
          url += '?' + querystring.join('&');
        }
        console.log(this.method.verb, url);
        results = this.$('.results');
        results.find('code,div').empty();
        results.removeClass('hide');
        return $.ajax({
          type: this.method.verb,
          dataType: "html",
          url: url
        }).done(function(result, textStatus, XMLHttpRequest) {
          console.log(result);
          results.find('.url').append("" + XMLHttpRequest.status + " " + _this.method.verb + " " + url);
          results.find('.headers').append(XMLHttpRequest.getAllResponseHeaders());
          return results.find('.body').append(new JSONView({
            payload: JSON.parse(result)
          }).render());
        }).fail(function(XMLHttpRequest, textStatus, errorDesc) {
          results.find('.url').append("" + XMLHttpRequest.status + " " + _this.method.verb + " " + url);
          results.find('.headers').append(XMLHttpRequest.getAllResponseHeaders());
          return results.find('.body').append(new JSONView({
            payload: JSON.parse(XMLHttpRequest.responseText)
          }).render());
        });
      };

      return MethodView;

    })(Backbone.View);
    EndpointView = (function(_super) {

      __extends(EndpointView, _super);

      function EndpointView() {
        return EndpointView.__super__.constructor.apply(this, arguments);
      }

      EndpointView.prototype.tagName = 'li';

      EndpointView.prototype.attributes = {
        "class": 'endpoint'
      };

      EndpointView.prototype.events = {
        'click [data-action]': 'toggle'
      };

      EndpointView.prototype.initialize = function(_arg) {
        this.data = _arg.data, this.group = _arg.group, this.level = _arg.level;
      };

      EndpointView.prototype.render = function() {
        var method, param, parts, url, urlBuilt, _i, _j, _len, _len1, _ref1, _ref2;
        url = $('<div/>');
        urlBuilt = ['http://<host>', this.group.url];
        parts = this.group.url.split('/');
        if (parts[parts.length - 1] === '') {
          parts.pop();
        }
        url.append("<span class=\"group\">" + (parts.join('/')) + "</span>");
        if (this.data.prefix) {
          url.append("<span class=\"separator\">/</span>");
          url.append("<span class=\"static prefix\" data-tip=\"This will always appear in the url as shown.\">\n" + this.data.prefix + "</span>");
          urlBuilt.push(this.data.prefix);
        }
        if (this.data.params.length > 0) {
          _ref1 = this.data.params;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            param = _ref1[_i];
            url.append("<span class=\"separator\">/</span>");
            if (param.variable) {
              url.append("<span class=\"variable\" data-tip=\"" + param.pattern + "\">" + param.name + "</span>");
              urlBuilt.push("/<" + param.name + ">");
            } else {
              url.append("<span class=\"static\">" + param.name + "</span>");
              urlBuilt.push("/" + param.name);
            }
          }
        } else {
          url.append("<span class=\"separator\">/</span>");
        }
        this.$el.append(endpointTemplate({
          data: this.data,
          group: this.group,
          level: this.level,
          url: url,
          urlBuilt: urlBuilt.join('')
        }));
        this.$('table.docutils').removeAttr('border');
        if (this.data.methods != null) {
          _ref2 = this.data.methods;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            method = _ref2[_j];
            this.$('.methods').append(new MethodView({
              method: method,
              endpoint: this.data
            }).render());
          }
        }
        return this.$el;
      };

      EndpointView.prototype.toggle = function(e) {
        var el;
        el = $(e.currentTarget);
        switch (el.data('action')) {
          case 'hide':
            return this.$('.operations').addClass('hide');
          case 'show':
            this.$('.operations').removeClass('hide');
            return this.$('.methods .implementation').addClass('hide');
          case 'showAll':
            this.$('.operations').removeClass('hide');
            return this.$('.methods .implementation').removeClass('hide');
          case 'epToggle':
            this.$('.operations').toggleClass('hide');
            return this.$('.methods .implementation').toggleClass('hide', !this.$('.operations').hasClass('hide'));
        }
      };

      return EndpointView;

    })(Backbone.View);
    GroupView = (function(_super) {

      __extends(GroupView, _super);

      function GroupView() {
        return GroupView.__super__.constructor.apply(this, arguments);
      }

      GroupView.prototype.tagName = 'li';

      GroupView.prototype.attributes = {
        "class": 'group'
      };

      GroupView.prototype.initialize = function(_arg) {
        this.data = _arg.data, this.level = _arg.level;
      };

      GroupView.prototype.render = function() {
        var endpoint, _i, _len, _ref1;
        this.$el.append(groupTemplate(_.extend(this.data, {
          level: this.level
        })));
        if (this.data.endpoints.length > 0) {
          this.$('>.endpoints').empty();
          _ref1 = this.data.endpoints;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            endpoint = _ref1[_i];
            this.$('>.endpoints').append(getNestedView(endpoint, this.data, this.level + 1).render());
          }
        }
        return this.$el;
      };

      return GroupView;

    })(Backbone.View);
    Browser = (function(_super) {

      __extends(Browser, _super);

      function Browser() {
        return Browser.__super__.constructor.apply(this, arguments);
      }

      Browser.prototype.events = {
        'click [data-action]': 'toggle'
      };

      Browser.prototype.initialize = function() {
        return this.$el.append(browserTemplate());
      };

      Browser.prototype.update = function(data) {
        this.model = data;
        return this.render();
      };

      Browser.prototype.render = function() {
        var view;
        view = getNestedView(this.model, this.model, 1);
        return this.$('.browser').append(view.render());
      };

      Browser.prototype.toggle = function(e) {
        var el;
        el = $(e.currentTarget);
        switch (el.data('action')) {
          case 'close':
            return this.$('.operations').addClass('hide');
          case 'open':
            this.$('.operations').removeClass('hide');
            return this.$('.methods .implementation').removeClass('hide');
        }
      };

      return Browser;

    })(Backbone.View);
    window.tryit = function(form) {
      var ajax, field, find, i, qsParameters, querystring, replace, url, urlParameters, value, verb, _i, _j, _len, _len1, _ref1, _ref2;
      console.log(form);
      urlParameters = {};
      _ref1 = $('.url-parameters input', form);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        urlParameters[i.name] = i.value;
      }
      qsParameters = {};
      _ref2 = $('.querystring-parameters input[value!=""]', form);
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        i = _ref2[_j];
        qsParameters[i.name] = i.value;
      }
      url = $('[name="endpoint-url"]', form).val();
      verb = $('[name="endpoint-verb"]', form).val();
      for (i in urlParameters) {
        if (!__hasProp.call(urlParameters, i)) continue;
        find = '<' + i + '>';
        replace = urlParameters[i];
        url = url.replace(find, replace);
      }
      querystring = (function() {
        var _results;
        _results = [];
        for (field in qsParameters) {
          value = qsParameters[field];
          _results.push(encodeURIComponent(field) + '=' + encodeURIComponent(value));
        }
        return _results;
      })();
      if (querystring.length) {
        url += '?' + querystring.join('&');
      }
      console.log(verb, url);
      $('.ajax-output', form).html("<h4>Request URL</h4><code>" + url + "</code>");
      return ajax = $.ajax({
        type: verb,
        dataType: "html",
        url: url
      }).done(function(result, textStatus, XMLHttpRequest) {
        return $('.ajax-output', form).append("<h4>Response Body</h4><code>" + result + "</code>").append("<h4>Response Code</h4><code>" + XMLHttpRequest.status + "</code>").append("<h4>Response Headers</h4><code>" + XMLHttpRequest.getAllResponseHeaders() + "</code>");
      }).fail(function(XMLHttpRequest, textStatus, errorDesc) {
        return $('.ajax-output', form).append("<h4>Response Body</h4><code>" + XMLHttpRequest.responseText + "</code>").append("<h4>Response Code</h4><code>" + XMLHttpRequest.status + "</code>").append("<h4>Response Headers</h4><code>" + XMLHttpRequest.getAllResponseHeaders() + "</code>");
      });
    };
    return run = function() {
      var browser,
        _this = this;
      browser = new Browser();
      $('.container.main').html(browser.el);
      return $.ajax({
        url: $('#endpointurl').val(),
        type: 'OPTIONS'
      }).done(function(response, text, jqXHR) {
        return browser.update(response);
      });
    };
  });

}).call(this);
