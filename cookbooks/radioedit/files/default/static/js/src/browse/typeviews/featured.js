// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var AttachmentEditDialog, Backbone, BaseView, CON, FeatureItem, FeatureItemAttachmentView, FeatureItemView, FeatureItems, FeatureItemsView, FeatureView, attachTemplate, convertCatalogToLinks, crop, editTemplate, itemTemplate, kindToSlug, mapper;
    CON = require('src/const');
    Backbone = require('backbone');
    BaseView = require('src/browse/base').BaseView;
    mapper = require('src/browse/mapper').mapper;
    AttachmentEditDialog = require('src/browse/attachment-edit');
    crop = require('src/crop');
    editTemplate = require('eco/featured/edit');
    itemTemplate = require('eco/featured/item');
    attachTemplate = require('eco/featured/attachment');
    kindToSlug = {
      station: 'live',
      featured: 'original',
      mood: 'original',
      genre: 'original',
      artist: 'artist',
      track: 'track'
    };
    convertCatalogToLinks = function(catalogItem) {
      var id, kind, webid, weblink;
      id = catalogItem.get('slug') || catalogItem.get('id');
      kind = catalogItem.get('kind');
      webid = id;
      if (kind === 'artist' || kind === 'track') {
        webid = "-" + id;
      }
      weblink = "http://www.iheart.com/" + kindToSlug[catalogItem.get('kind')] + "/" + webid + "/";
      if (kind === 'track') {
        weblink = "http://www.iheart.com/artist/-" + (catalogItem.get('artistId')) + "/songs/-" + (catalogItem.get('id'));
      }
      return [
        {
          id: id,
          kind: kind,
          "for": 'web',
          name: catalogItem.get('name'),
          link: weblink,
          link_text: "Play " + (catalogItem.get('name')),
          img: catalogItem.get('img'),
          description: catalogItem.get('description')
        }, {
          id: id,
          kind: kind,
          "for": 'device',
          name: catalogItem.get('name'),
          link: "ihr://play/custom/" + kindToSlug[catalogItem.get('kind')] + "/" + id + "/",
          link_text: "Play " + (catalogItem.get('name')),
          img: catalogItem.get('img'),
          description: catalogItem.get('description')
        }
      ];
    };
    FeatureItem = (function(_super) {

      __extends(FeatureItem, _super);

      function FeatureItem() {
        return FeatureItem.__super__.constructor.apply(this, arguments);
      }

      FeatureItem.prototype.catalog = null;

      FeatureItem.prototype.defaults = {
        enabled: true,
        title: 'A New Item',
        subtitle: 'Enter a Subtitle which may be displayed on long format views.',
        img_meta: {
          ops: []
        }
      };

      FeatureItem.prototype.imageUrl = function() {
        var meta, op, opStrings, _i, _len, _ref;
        meta = this.get('img_meta');
        opStrings = [];
        _ref = meta.ops;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          op = _ref[_i];
          opStrings.push("" + op.op + "(" + (op.args.join(',')) + ")");
        }
        if (opStrings.length > 0) {
          return "" + meta.base_url + (opStrings.join(',')) + "/" + meta.image_id + "." + meta.extension;
        }
        return "" + meta.base_url + meta.image_id + "." + meta.extension;
      };

      return FeatureItem;

    })(Backbone.Model);
    FeatureItems = (function(_super) {

      __extends(FeatureItems, _super);

      function FeatureItems() {
        return FeatureItems.__super__.constructor.apply(this, arguments);
      }

      FeatureItems.prototype.model = FeatureItem;

      return FeatureItems;

    })(Backbone.Collection);
    FeatureItemAttachmentView = (function(_super) {

      __extends(FeatureItemAttachmentView, _super);

      function FeatureItemAttachmentView() {
        return FeatureItemAttachmentView.__super__.constructor.apply(this, arguments);
      }

      FeatureItemAttachmentView.prototype.tagName = 'div';

      FeatureItemAttachmentView.prototype.events = {
        "click a.remove": "onClickRemove",
        "click": "onClick"
      };

      FeatureItemAttachmentView.prototype._modelForElement = function(element) {
        var cid;
        cid = $(element).closest('li[data-index]').data('index');
        return this.collection.getByCid(cid);
      };

      FeatureItemAttachmentView.prototype.initialize = function() {
        return this.collection.on('add remove change', this.render, this);
      };

      FeatureItemAttachmentView.prototype.render = function() {
        this.$el.empty().append(attachTemplate({
          attachments: this.collection.models
        }));
        if (this.$el.is(':visible')) {
          this.$('.ui-sortable').sortable('destroy').sortable({
            axis: 'y',
            handle: '.button-icon.reorder',
            containement: '.ui-sortable'
          });
        }
        return this.$el;
      };

      FeatureItemAttachmentView.prototype.onClickRemove = function(e) {
        e.stopPropagation();
        return this.collection.remove(this._modelForElement(e.target));
      };

      FeatureItemAttachmentView.prototype.onClick = function(e) {
        var dialog, model;
        model = this._modelForElement(e.target);
        dialog = new AttachmentEditDialog({
          model: model
        });
        return dialog.show();
      };

      return FeatureItemAttachmentView;

    })(BaseView);
    FeatureItemView = (function(_super) {

      __extends(FeatureItemView, _super);

      function FeatureItemView() {
        return FeatureItemView.__super__.constructor.apply(this, arguments);
      }

      FeatureItemView.prototype.tagName = "li";

      FeatureItemView.prototype.events = {
        "click .button-icon.enable": "able",
        "click .button-icon.important": "important",
        'click .button-icon.icon-trash': 'delete',
        'click .button-icon.icon-copy': 'copy',
        "click a.attach": "attach",
        "click a.attach-custom": "attachCustom",
        "click a.image": "image",
        "input input": "input",
        'sortupdate': 'attachmentSorted'
      };

      FeatureItemView.prototype.initialize = function() {
        var _this = this;
        this.model.on('change', this.update, this);
        this.attachments = new Backbone.Collection(this.model.get('attachments'), {
          model: Backbone.Model.extend({
            idAttribute: 'link'
          })
        });
        return this.attachments.on('add remove reset change', function() {
          return _this.model.set('attachments', _this.attachments.toJSON());
        });
      };

      FeatureItemView.prototype.able = function(e) {
        return this.model.set('enabled', !this.model.get('enabled'));
      };

      FeatureItemView.prototype.important = function(e) {
        return this.model.set('important', !this.model.get('important'));
      };

      FeatureItemView.prototype["delete"] = function(event) {
        return this.model.collection.remove(this.model);
      };

      FeatureItemView.prototype.copy = function(e) {
        return this.trigger('copy', this.model);
      };

      FeatureItemView.prototype.attach = function(e) {
        var _this = this;
        return this.global.trigger(CON.EVENT_CATALOG, function(catalogItem) {
          return _this.attachments.add(convertCatalogToLinks(catalogItem));
        });
      };

      FeatureItemView.prototype.attachCustom = function(e) {
        return this.attachments.add([
          {
            id: null,
            kind: 'user',
            "for": 'web',
            name: 'User',
            link: 'http://',
            link_text: 'Link Text'
          }, {
            id: null,
            kind: 'user',
            "for": 'device',
            name: 'User',
            link: 'ihr://',
            link_text: 'Link Text'
          }
        ]);
      };

      FeatureItemView.prototype.input = function(e) {
        var el;
        el = $(e.currentTarget);
        return this.model.set(el.attr('name'), el.val());
      };

      FeatureItemView.prototype.image = function(e) {
        var cropTabView,
          _this = this;
        cropTabView = new crop.ImageUploadAnchorView({
          model: this.model.get('img_meta')
        });
        return cropTabView.on('finished', function(img_meta, image_url) {
          return _this.model.set({
            img_meta: img_meta,
            image_url: image_url
          });
        });
      };

      FeatureItemView.prototype.render = function() {
        $('[data-tip]', this.$el).tooltip('hide');
        this.$el.empty();
        this.$el.append(itemTemplate({
          attributes: this.model.toJSON(),
          cid: this.model.cid,
          image_url: this.model.imageUrl()
        }));
        this.$el.find('.attachments').append(new FeatureItemAttachmentView({
          collection: this.attachments
        }).render());
        return this.$el.toggleClass('disabled', !this.model.get('enabled'));
      };

      FeatureItemView.prototype.update = function(e) {
        var changed, el;
        changed = e.changedAttributes();
        if (changed.enabled != null) {
          this.$el.toggleClass('disabled', !changed.enabled);
        }
        if (changed.important != null) {
          el = this.$el.find('.button-icon.important');
          if (changed.important === true) {
            el.addClass('icon-star').removeClass('icon-star-empty');
          } else {
            el.addClass('icon-star-empty').removeClass('icon-star');
          }
        }
        if (changed.img_meta != null) {
          return this.render();
        }
      };

      FeatureItemView.prototype.attachmentSorted = function(event, ui) {
        var cid, newArray, newOrder, _i, _len;
        event.stopPropagation();
        newOrder = this.$el.find('li[data-index]').map(function() {
          return $(this).data('index');
        });
        newArray = [];
        for (_i = 0, _len = newOrder.length; _i < _len; _i++) {
          cid = newOrder[_i];
          newArray.push(this.attachments.getByCid(cid));
        }
        return this.attachments.reset(newArray);
      };

      return FeatureItemView;

    })(BaseView);
    FeatureItemsView = (function(_super) {

      __extends(FeatureItemsView, _super);

      function FeatureItemsView() {
        return FeatureItemsView.__super__.constructor.apply(this, arguments);
      }

      FeatureItemsView.prototype.tagName = "ul";

      FeatureItemsView.prototype.attributes = {
        "class": "edit-list unstyled"
      };

      FeatureItemsView.prototype.events = {
        'sortupdate': 'sortUpdated'
      };

      FeatureItemsView.prototype.initialize = function() {
        return this.collection.on('add remove', this.render, this);
      };

      FeatureItemsView.prototype.render = function() {
        var model, view, _i, _len, _ref,
          _this = this;
        this.$el.empty();
        _ref = this.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          view = new FeatureItemView({
            model: model
          });
          view.on('copy', function(model) {
            return _this.collection.add(model.clone());
          });
          this.$el.append(view.render());
          view.$('.ui-sortable').sortable('destroy').sortable({
            axis: 'y',
            handle: '.button-icon.reorder',
            containement: '.ui-sortable'
          });
        }
        this.$el.sortable('destroy');
        this.$el.disableSelection().sortable({
          axis: 'y',
          containment: '.view',
          placeholder: 'ui-state-highlight',
          forcePlaceholderSize: true,
          opacity: 0.6,
          handle: '.button-icon.reorder',
          scroll: true,
          cursor: 'ns-resize'
        });
        return this.$el;
      };

      FeatureItemsView.prototype.sortUpdated = function(event, ui) {
        var cid, newArray, newOrder, _i, _len;
        newOrder = this.$el.find('li form[data-id]').map(function() {
          return $(this).data('id');
        });
        newArray = [];
        for (_i = 0, _len = newOrder.length; _i < _len; _i++) {
          cid = newOrder[_i];
          newArray.push(this.collection.getByCid(cid));
        }
        this.collection.models = newArray;
        return this.collection.trigger('change');
      };

      return FeatureItemsView;

    })(BaseView);
    FeatureView = (function(_super) {

      __extends(FeatureView, _super);

      function FeatureView() {
        return FeatureView.__super__.constructor.apply(this, arguments);
      }

      FeatureView.prototype.attributes = {
        "class": "feature view"
      };

      FeatureView.prototype.events = {
        'change textarea#description': 'input',
        'click .collapser .btn': 'toggleCollapse',
        'click a#new-slide': 'new'
      };

      FeatureView.prototype.initialize = function() {
        var _this = this;
        this.items = new FeatureItems(this.model.get('items'));
        return this.items.on('change add remove', function() {
          _this.model.set('items', _this.items.toJSON());
          return _this.$('#item-count').html(_this.items.length);
        });
      };

      FeatureView.prototype["new"] = function(e) {
        return this.items.add();
      };

      FeatureView.prototype.toggleCollapse = function(e) {
        var el, panels;
        el = $(e.target);
        panels = this.$('.edit-list .controls');
        if (el.attr('id') === 'collapse-slides') {
          panels.hide();
        } else {
          panels.show();
        }
        this.$('.collapser .btn').removeClass('active');
        return el.addClass('active');
      };

      FeatureView.prototype.input = function(e) {
        var el;
        el = $(e.currentTarget);
        return this.model.set(el.attr('name'), el.val());
      };

      FeatureView.prototype.render = function() {
        this.$el.empty();
        this.$el.append(editTemplate(this.model.toJSON()));
        this.$el.append(new FeatureItemsView({
          collection: this.items
        }).render());
        return this.$('#item-count').html(this.items.length);
      };

      return FeatureView;

    })(BaseView);
    mapper.register(mapper.MODIFY, CON.TYPE_FEATURE, FeatureView);
    return {
      FeatureView: FeatureView
    };
  });

}).call(this);
