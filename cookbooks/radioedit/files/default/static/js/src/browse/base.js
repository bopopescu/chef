// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, AlertView, Backbone, BaseModel, BaseView, ErrorModel, ErrorsCollection, PopoverView, alertTemplate, popoverTemplate, _;
    Backbone = require('backbone');
    _ = require('underscore');
    $ = require('jquery');
    alertTemplate = require('eco/alert');
    popoverTemplate = require('eco/popover');
    require('jquery.transit');
    BaseView = (function(_super) {

      __extends(BaseView, _super);

      function BaseView(options) {
        Backbone.View.call(this, options);
        if (((options != null ? options.resetEl : void 0) != null) && (options.el != null)) {
          this._resetElement();
        }
      }

      BaseView.prototype.subViews = {};

      BaseView.prototype.rendel = function() {
        this.render.apply(this, arguments);
        return this.el;
      };

      BaseView.prototype.$rendel = function() {
        return $(this.rendel(arguments));
      };

      BaseView.prototype.setSubViews = function(name, child) {
        if (_.isObject(name)) {
          _.extend(this.subViews, name);
        } else {
          this.subViews[name] = child;
        }
        return this;
      };

      BaseView.prototype._resetElement = function() {
        var attrs;
        if (this.$el) {
          attrs = _.clone(this.attributes) || {};
          if (this.id != null) {
            attrs.id = this.id;
          }
          if (this.className != null) {
            attrs["class"] = this.className;
          }
          return this.$el.attr(attrs);
        }
      };

      return BaseView;

    })(Backbone.View);
    PopoverView = (function(_super) {

      __extends(PopoverView, _super);

      function PopoverView() {
        return PopoverView.__super__.constructor.apply(this, arguments);
      }

      PopoverView.prototype.initialize = function() {
        var defaults;
        defaults = {
          placement: 'bottom',
          inside: false,
          boundaryElement: void 0,
          delegateSelector: void 0,
          $positionElement: void 0
        };
        _.defaults(this.options, defaults);
        this.eventNameSpace = "popoverEvent" + this.cid;
        this.$window = $(window);
        this.$body = $('body');
        this.$body.append(this.$el);
        this.subPopovers = [];
        if (this.options.delegateSelector != null) {
          return this.setDelegateSelector(this.options.delegateSelector);
        }
      };

      PopoverView.prototype.events = function() {
        return {
          'click': 'stopPropagation'
        };
      };

      PopoverView.prototype.stopPropagation = function() {
        var $target;
        $target = $(event.target);
        if (!($target.is(this.$popover) || this.$popover.has($target).length)) {
          return event.stopPropagation();
        }
      };

      PopoverView.prototype.render = function(title, content) {
        this.$el.html(popoverTemplate({
          title: title,
          content: content
        }));
        this.$popover = this.$('.popover');
        this.$title = this.$('.popover-title');
        this.$content = this.$('.popover-content');
        this.$arrow = this.$('.popover .arrow');
        return this;
      };

      PopoverView.prototype.setDelegateSelector = function(selector) {
        return $('body').on("click." + this.eventNameSpace, selector, $.proxy(this, 'showPopover'));
      };

      PopoverView.prototype.shouldBlur = function(event) {
        var $target, hidePopover, popoverView, shouldClose, subPopovers, _i, _len;
        $target = $(event.target);
        subPopovers = _.clone(this.subPopovers);
        subPopovers.push(this);
        hidePopover = true;
        shouldClose = function(popoverView) {
          return !($target.is(popoverView.$popover) || popoverView.$popover.has($target).length);
        };
        for (_i = 0, _len = subPopovers.length; _i < _len; _i++) {
          popoverView = subPopovers[_i];
          hidePopover = hidePopover && shouldClose(popoverView);
        }
        if (hidePopover) {
          return this.hidePopover();
        }
      };

      PopoverView.prototype.hidePopover = function() {
        var _this = this;
        this.$window.off("resize." + this.eventNameSpace);
        this.$body.off("click." + this.eventNameSpace, this.shouldBlur);
        return this.$popover.transition({
          opacity: 0,
          scale: 0.9
        }, 250, 'in-out', function() {
          return _this.$popover.css({
            display: 'none',
            opacity: 1,
            scale: 1
          });
        });
      };

      PopoverView.prototype.setPositioning = function($target) {
        var placement, popoverHeight, popoverWidth, position, positions, targetHeight, targetLeftOffset, targetTopOffset, targetWidth, _ref;
        _ref = $target.offset(), targetLeftOffset = _ref.left, targetTopOffset = _ref.top;
        targetHeight = $target.outerHeight(true);
        if (this.options.inside) {
          targetHeight /= 2;
        }
        targetWidth = $target.outerWidth(true);
        popoverWidth = this.$popover.outerWidth(true);
        popoverHeight = this.$popover.outerHeight(true);
        placement = _.isFunction(this.options.placement) ? this.options.placement.call(this) : this.options.placement;
        positions = {
          left: {
            top: targetTopOffset + targetHeight / 2 - popoverHeight / 2,
            left: targetLeftOffset - popoverWidth
          },
          top: {
            top: targetTopOffset - popoverHeight,
            left: targetLeftOffset + targetWidth / 2 - popoverWidth / 2
          },
          right: {
            top: targetTopOffset + targetHeight / 2 - popoverHeight / 2,
            left: targetLeftOffset + targetWidth
          },
          bottom: {
            top: targetTopOffset + targetHeight,
            left: targetLeftOffset + targetWidth / 2 - popoverWidth / 2
          }
        };
        position = positions[placement];
        if (this.options.boundaryElement != null) {
          this._boundaryAdjustment(placement, position, popoverWidth);
        }
        return this.$popover.addClass(placement).css(position);
      };

      PopoverView.prototype.showPopover = function(event) {
        var $target, transitionCallback,
          _this = this;
        if (this.$popover.css('display') === 'block') {
          return this.hidePopover();
        }
        $target = this.options.$positionElement != null ? this.options.$positionElement : $(event.target);
        transitionCallback = function() {
          _this.$body.on("click." + _this.eventNameSpace, $.proxy(_this, 'shouldBlur'));
          return _this.$window.on("resize." + _this.eventNameSpace, _.bind(_this.setPositioning, _this, $target));
        };
        return this.setPositioning($target).css({
          opacity: 0,
          display: 'block',
          scale: 0.9
        }).transition({
          scale: 1.05,
          opacity: 1
        }, 300, 'in-out').transition({
          scale: 1
        }, transitionCallback);
      };

      PopoverView.prototype._boundaryAdjustment = function(direction, position, popoverWidth) {
        var $boundaryElement, adjustments, boundaryInfo,
          _this = this;
        $boundaryElement = $(this.options.boundaryElement);
        boundaryInfo = _.extend($boundaryElement.offset(), {
          height: $boundaryElement.outerHeight(),
          width: $boundaryElement.outerWidth()
        });
        adjustments = {
          bottom: function() {
            var offset;
            if (boundaryInfo.left > position.left) {
              offset = boundaryInfo.left - position.left;
              position.left += offset;
              return _this.$arrow.css({
                left: "" + (50 - 100 * (offset / popoverWidth)) + "%"
              });
            } else if (boundaryInfo.left + boundaryInfo.width < position.left + popoverWidth) {
              offset = (position.left + popoverWidth) - (boundaryInfo.left + boundaryInfo.width);
              position.left -= offset;
              return _this.$arrow.css({
                left: "" + (50 + 100 * (offset / popoverWidth)) + "%"
              });
            }
          }
        };
        return adjustments[direction]();
      };

      PopoverView.prototype.onClose = function() {
        return $('body').off(this.eventNameSpace);
      };

      return PopoverView;

    })(Backbone.View);
    AlertView = (function(_super) {

      __extends(AlertView, _super);

      function AlertView() {
        return AlertView.__super__.constructor.apply(this, arguments);
      }

      AlertView.prototype.events = {
        'click .close': 'closeAlert'
      };

      AlertView.prototype.render = function(type, heading, text) {
        this.$el.html(alertTemplate({
          type: type,
          heading: heading,
          text: text
        }));
        return this;
      };

      AlertView.prototype.closeAlert = function() {
        return this.$el.slideUp();
      };

      AlertView.prototype.showAlert = function(type, heading, text) {
        var _this = this;
        return this.$el.slideUp().promise().done(function() {
          return _this.render(type, heading, text).$el.slideDown();
        });
      };

      return AlertView;

    })(Backbone.View);
    ErrorModel = (function(_super) {

      __extends(ErrorModel, _super);

      function ErrorModel() {
        return ErrorModel.__super__.constructor.apply(this, arguments);
      }

      ErrorModel.prototype.defaults = function() {
        return {
          extra: {},
          status: '',
          message: 'There was a problem with your request.'
        };
      };

      ErrorModel.prototype.getExtendedMessage = function() {
        var message, _ref;
        message = this.get('message');
        return message += ((_ref = this.get('extra')) != null ? _ref._id : void 0) != null ? " " + (this.get('extra')._id) : '';
      };

      return ErrorModel;

    })(Backbone.Model);
    ErrorsCollection = (function(_super) {

      __extends(ErrorsCollection, _super);

      function ErrorsCollection() {
        return ErrorsCollection.__super__.constructor.apply(this, arguments);
      }

      ErrorsCollection.prototype.model = ErrorModel;

      return ErrorsCollection;

    })(Backbone.Collection);
    BaseModel = (function(_super) {

      __extends(BaseModel, _super);

      function BaseModel() {
        return BaseModel.__super__.constructor.apply(this, arguments);
      }

      BaseModel.prototype.initialize = function() {
        this.on('error', this.errorHandler, this);
        return this.errors = new ErrorsCollection();
      };

      BaseModel.prototype.errorHandler = function(model, jqXhr) {
        var message, out, response, status;
        response = (function() {
          try {
            return JSON.parse(jqXhr.responseText);
          } catch (error) {
            out = {};
            if (_.isString(jqXhr)) {
              out.message = jqXhr;
            } else {
              status = jqXhr.status, message = jqXhr.statusText;
              if (status != null) {
                out.status = status;
              }
              if (message != null) {
                out.message = message;
              }
            }
            return out;
          }
        })();
        return this.errors.add(response);
      };

      return BaseModel;

    })(Backbone.Model);
    return {
      BaseView: BaseView,
      BaseModel: BaseModel,
      AlertView: AlertView,
      PopoverView: PopoverView
    };
  });

}).call(this);
