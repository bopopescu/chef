// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var BaseView, Bucket, CreateGlobalObjectView, ListToolsView, ListView, listTemplate, listToolsTemplate, mapper;
    mapper = require('src/browse/mapper').mapper;
    BaseView = require('src/browse/base').BaseView;
    Bucket = require('src/browse/models').Bucket;
    CreateGlobalObjectView = require('src/browse/create').CreateGlobalObjectView;
    listTemplate = require('eco/browse/list');
    listToolsTemplate = require('eco/browse/listTools');
    ListToolsView = (function(_super) {

      __extends(ListToolsView, _super);

      function ListToolsView() {
        return ListToolsView.__super__.constructor.apply(this, arguments);
      }

      ListToolsView.prototype.className = 'listTools';

      ListToolsView.prototype.initialize = function() {
        var boundaryElement, delegateSelector, _ref;
        _ref = this.options, this.path = _ref.path, this.bucket = _ref.bucket;
        delegateSelector = "." + this.className + " .createLocalObject";
        boundaryElement = $('#main')[0];
        return this.createGlobalObjectView = new CreateGlobalObjectView({
          collection: this.collection,
          bucket: this.bucket,
          boundaryElement: boundaryElement,
          delegateSelector: delegateSelector,
          path: this.path
        });
      };

      ListToolsView.prototype.render = function() {
        return this.$el.html(listToolsTemplate());
      };

      ListToolsView.prototype.onClose = function() {
        return this.createGlobalObjectView.close();
      };

      return ListToolsView;

    })(BaseView);
    ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.className = 'listContainer';

      ListView.prototype.initialize = function() {
        this.path = this.options.path;
        this.subView = new ListToolsView({
          collection: mapper.collection,
          bucket: new Bucket(),
          path: this.path
        });
        return this.collection.on('reset', this.render, this);
      };

      ListView.prototype.render = function() {
        var model, rowCont, _i, _len, _ref,
          _this = this;
        this.$el.html(listTemplate()).prepend(this.subView.rendel());
        rowCont = this.$el.find('.rows').empty();
        _ref = this.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          mapper.get(mapper.ROW, model.get('data_type')).done(function(View) {
            return rowCont.append(new View({
              model: model
            }).render());
          });
        }
        return this;
      };

      ListView.prototype.onClose = function() {
        return this.subView.close();
      };

      return ListView;

    })(BaseView);
    return {
      ListView: ListView
    };
  });

}).call(this);
