// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, BaseView, CodeEditorView, CodeMirror, Datasources, IndexQuery, JSONView, NodesCollection, QueryView, TYPE_EXTERNAL, TYPE_FOLDER, editTemplate, mapper, _ref, _ref1;
    _ref = require('src/const'), TYPE_EXTERNAL = _ref.TYPE_EXTERNAL, TYPE_FOLDER = _ref.TYPE_FOLDER;
    Backbone = require('backbone');
    CodeMirror = require('codemirror_sql');
    BaseView = require('src/browse/base').BaseView;
    mapper = require('src/browse/mapper').mapper;
    JSONView = require('src/jsonview').JSONView;
    _ref1 = require('src/browse/models'), IndexQuery = _ref1.IndexQuery, NodesCollection = _ref1.NodesCollection;
    CodeEditorView = require('src/browse/codeview').CodeEditorView;
    editTemplate = require('eco/external/edit');
    Datasources = (function(_super) {

      __extends(Datasources, _super);

      function Datasources() {
        return Datasources.__super__.constructor.apply(this, arguments);
      }

      Datasources.prototype.url = "" + window.API_PREFIX + "/utils/datasources/";

      Datasources.prototype.parse = function(data) {
        return data.datasources;
      };

      return Datasources;

    })(Backbone.Collection);
    QueryView = (function(_super) {

      __extends(QueryView, _super);

      function QueryView() {
        return QueryView.__super__.constructor.apply(this, arguments);
      }

      QueryView.prototype.attributes = {
        "class": "query view"
      };

      QueryView.prototype.events = {
        'click #test-button': 'test',
        'input #default_querystring,#default_limit': 'updateInput',
        'change #datasource': 'updateInput'
      };

      QueryView.prototype.initialize = function() {
        var selectbox,
          _this = this;
        this.$el.append(editTemplate({
          att: this.model.toJSON(),
          id: this.model.resourceId()
        }));
        selectbox = this.$('select[name=datasource] optgroup[label=SQL]');
        this.datasources = new Datasources();
        this.datasources.fetch({
          success: function(collection, response) {
            collection.each(function(model) {
              return selectbox.append("<option value=\"" + (model.get('datasource')) + "\">" + (model.get('name')) + "</option>");
            });
            return _this.matchInputs();
          }
        });
        return this.codeView = new CodeEditorView({
          mode: 'mysql',
          defaultText: 'SELECT * FROM ',
          el: this.$('.query .editor'),
          model: this.model
        });
      };

      QueryView.prototype.updateInput = function(e) {
        var input;
        input = $(e.target);
        return this.model.set(input.attr('name'), input.val());
      };

      QueryView.prototype.matchInputs = function() {
        var _this = this;
        this.$('input[name]').each(function(i, e) {
          var input, name;
          input = $(e);
          name = input.attr('name');
          if (_this.model.has(name)) {
            return input.val(_this.model.get(name));
          }
        });
        return this.$('select[name]').each(function(i, e) {
          var input, name;
          input = $(e);
          name = input.attr('name');
          if (_this.model.has(name)) {
            return input.find("option[value=" + (_this.model.get(name)) + "]").attr('selected', 'selected');
          }
        });
      };

      QueryView.prototype.render = function() {
        return this.matchInputs();
      };

      QueryView.prototype.test = function(e) {
        var exec,
          _this = this;
        this.codeView.clearAnnotations();
        this.codeView.update();
        exec = $.ajax({
          url: "" + window.API_PREFIX + "/datasource",
          type: 'POST',
          data: JSON.stringify(this.model.toJSON()),
          processData: false,
          contentType: 'application/json'
        });
        exec.done(function(response) {
          return new JSONView({
            el: _this.$('.results'),
            payload: response
          });
        });
        return exec.fail(function(jqXHR) {
          var error, error_data, _i, _len, _ref2, _results;
          error_data = JSON.parse(jqXHR.responseText);
          if (error_data.extra.errors != null) {
            _ref2 = error_data.extra.errors;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              error = _ref2[_i];
              _results.push(_this.codeView.markError(error.msg, error.line, error.col));
            }
            return _results;
          } else {
            return console.log(':TODO: Trigger global error handler.');
          }
        });
      };

      return QueryView;

    })(BaseView);
    mapper.register(mapper.MODIFY, TYPE_EXTERNAL, QueryView);
    return {
      QueryView: QueryView
    };
  });

}).call(this);
