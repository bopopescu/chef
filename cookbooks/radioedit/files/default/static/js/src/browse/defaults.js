// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var BaseView, GenericModifyView, GenericRowView, basicRowTemplate;
    BaseView = require('src/browse/base').BaseView;
    basicRowTemplate = require('eco/browse/rows/basic');
    GenericRowView = (function(_super) {

      __extends(GenericRowView, _super);

      function GenericRowView() {
        return GenericRowView.__super__.constructor.apply(this, arguments);
      }

      GenericRowView.prototype.className = 'object';

      GenericRowView.prototype.render = function() {
        return this.$el.html(basicRowTemplate(this.model.toJSON()));
      };

      return GenericRowView;

    })(BaseView);
    GenericModifyView = (function(_super) {

      __extends(GenericModifyView, _super);

      function GenericModifyView() {
        return GenericModifyView.__super__.constructor.apply(this, arguments);
      }

      GenericModifyView.prototype.className = 'modify';

      GenericModifyView.prototype.render = function() {
        return this.$el.text(JSON.stringify(this.model.toJSON()));
      };

      return GenericModifyView;

    })(BaseView);
    return {
      'row': GenericRowView,
      'modify': GenericModifyView
    };
  });

}).call(this);
