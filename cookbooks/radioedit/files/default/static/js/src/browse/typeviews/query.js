// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, BaseView, BrowseFolderItemView, BrowseView, CodeEditorView, CodeMirror, IndexQuery, JSONView, MappedResourcesView, NodesCollection, QueryView, SelectView, TYPE_EXTERNAL, TYPE_FOLDER, TYPE_QUERY, editTemplate, mapper, _ref, _ref1;
    _ref = require('src/const'), TYPE_QUERY = _ref.TYPE_QUERY, TYPE_FOLDER = _ref.TYPE_FOLDER, TYPE_EXTERNAL = _ref.TYPE_EXTERNAL;
    Backbone = require('backbone');
    CodeMirror = require('codemirror_python');
    CodeMirror = require('codemirror_yaml');
    BaseView = require('src/browse/base').BaseView;
    mapper = require('src/browse/mapper').mapper;
    JSONView = require('src/jsonview').JSONView;
    _ref1 = require('src/browse/models'), IndexQuery = _ref1.IndexQuery, NodesCollection = _ref1.NodesCollection;
    CodeEditorView = require('src/browse/codeview').CodeEditorView;
    editTemplate = require('eco/query/edit');
    BrowseFolderItemView = (function(_super) {

      __extends(BrowseFolderItemView, _super);

      function BrowseFolderItemView() {
        return BrowseFolderItemView.__super__.constructor.apply(this, arguments);
      }

      BrowseFolderItemView.prototype.tagName = 'li';

      BrowseFolderItemView.prototype.render = function() {
        var icon, id, kind;
        id = this.model.get('_id');
        kind = this.model.get('data_type');
        icon = 'file';
        if (kind === TYPE_FOLDER) {
          id += '.';
          icon = 'folder-close';
        }
        if (kind === TYPE_EXTERNAL) {
          icon = 'cog';
        }
        if (kind === 'root') {
          icon = 'arrow-up';
        }
        this.$el.addClass(kind);
        return this.$el.append("<a href=\"javascript:void(0)\" class=\"select\" data-id=\"" + id + "\">\n  <i class=\"icon-" + icon + "\" /> " + id + "\n</a>");
      };

      return BrowseFolderItemView;

    })(Backbone.View);
    BrowseView = (function(_super) {

      __extends(BrowseView, _super);

      function BrowseView() {
        return BrowseView.__super__.constructor.apply(this, arguments);
      }

      BrowseView.prototype.initialize = function(options) {
        this.collection = new IndexQuery();
        return this.collection.comparator = IndexQuery.folderFirstComparator;
      };

      BrowseView.prototype.render = function() {
        var model, parent, root, _i, _len, _ref2, _results;
        root = new Backbone.Model({
          data_type: 'root',
          _id: '.'
        });
        parent = new Backbone.Model({
          data_type: 'root',
          _id: '..'
        });
        this.$el.empty();
        this.$el.append(new BrowseFolderItemView({
          model: root
        }).render());
        this.$el.append(new BrowseFolderItemView({
          model: parent
        }).render());
        _ref2 = this.collection.models;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          model = _ref2[_i];
          _results.push(this.$el.append(new BrowseFolderItemView({
            model: model
          }).render()));
        }
        return _results;
      };

      BrowseView.prototype.select = function(search) {
        var _this = this;
        if (search == null) {
          search = '.';
        }
        return this.populate(search).done(function() {
          return _this.render();
        });
      };

      BrowseView.prototype.populate = function(search) {
        if (search == null) {
          search = '.';
        }
        return this.collection.fetch({
          data: {
            q: search
          }
        });
      };

      BrowseView.prototype.onClose = function() {};

      return BrowseView;

    })(Backbone.View);
    MappedResourcesView = (function(_super) {

      __extends(MappedResourcesView, _super);

      function MappedResourcesView() {
        return MappedResourcesView.__super__.constructor.apply(this, arguments);
      }

      MappedResourcesView.prototype.events = {
        'sortupdate': 'sortUpdated',
        'click a.close': 'remove'
      };

      MappedResourcesView.prototype.initialize = function() {
        this.emptyEl = this.$el.children().clone();
        this.collection.on('add remove reset', this.render, this);
        if (this.collection.length > 0) {
          this.render();
        }
        this.$el.sortable('destroy');
        return this.$el.disableSelection().sortable({
          axis: 'y',
          cancel: '.empty',
          placeholder: 'ui-state-highlight',
          forcePlaceholderSize: true,
          opacity: 0.6,
          cursor: 'ns-resize'
        });
      };

      MappedResourcesView.prototype.render = function() {
        var model, _i, _len, _ref2, _results;
        this.$el.empty();
        if (this.collection.length > 0) {
          _ref2 = this.collection.models;
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            model = _ref2[_i];
            _results.push(this.$el.append("<li data-id=\"" + model.cid + "\">\n    <i class=\"icon-file\" /> " + model.id + "\n    <a class=\"close\" href=\"javascript:void(0)\">\n      <i class=\"icon-trash\" />\n    </a>\n</li>"));
          }
          return _results;
        } else {
          return this.$el.append(this.emptyEl);
        }
      };

      MappedResourcesView.prototype.remove = function(e) {
        var id;
        id = $(e.currentTarget).parents('li[data-id]').data('id');
        return this.collection.remove(this.collection.getByCid(id));
      };

      MappedResourcesView.prototype.sortUpdated = function(event, ui) {
        var cid, newArray, newOrder, _i, _len;
        newOrder = this.$el.find('li[data-id]').map(function() {
          return $(this).data('id');
        });
        newArray = [];
        for (_i = 0, _len = newOrder.length; _i < _len; _i++) {
          cid = newOrder[_i];
          newArray.push(this.collection.getByCid(cid));
        }
        this.collection.models = newArray;
        return this.collection.trigger('change');
      };

      MappedResourcesView.prototype.onClose = function() {
        return this.collection.off(null, null, this);
      };

      return MappedResourcesView;

    })(Backbone.View);
    SelectView = (function(_super) {

      __extends(SelectView, _super);

      function SelectView() {
        return SelectView.__super__.constructor.apply(this, arguments);
      }

      SelectView.prototype.events = {
        'click a.select[data-id]': 'browse',
        'click a#add-button': 'add',
        'input #select-input': 'search'
      };

      SelectView.prototype.initialize = function() {
        this.browseView = new BrowseView({
          el: this.$('ul.listing')
        });
        this.mappedView = new MappedResourcesView({
          el: this.$('ul.current'),
          collection: this.collection
        });
        this.search = _.debounce(this._search, 250);
        return this.render();
      };

      SelectView.prototype.render = function() {
        return this.browseView.select();
      };

      SelectView.prototype._search = function(e) {
        return this.browseView.select($(e.currentTarget).val() || '.');
      };

      SelectView.prototype.add = function(e) {
        var id;
        id = this.$('#select-input').val();
        if (id) {
          return this.collection.add({
            id: this.$('#select-input').val()
          });
        }
      };

      SelectView.prototype.browse = function(e) {
        var current, path;
        path = $(e.currentTarget).data('id');
        if (path === '..') {
          current = this.$('input#select-input').val().split('.');
          if (current[current.length - 1] === '') {
            current.pop();
          }
          current.pop();
          path = current.join('.') + '.';
        }
        this.browseView.select(path);
        if (path === '.' || path === '..') {
          return this.$('#select-input').val('');
        } else {
          return this.$('#select-input').val(path);
        }
      };

      SelectView.prototype.onClose = function() {
        return this.collection.off(null, null, this);
      };

      return SelectView;

    })(Backbone.View);
    QueryView = (function(_super) {

      __extends(QueryView, _super);

      function QueryView() {
        return QueryView.__super__.constructor.apply(this, arguments);
      }

      QueryView.prototype.attributes = {
        "class": "query view"
      };

      QueryView.prototype.events = {
        'click #test-button': 'test'
      };

      QueryView.prototype.initialize = function() {
        var r,
          _this = this;
        this.$el.append(editTemplate({
          att: this.model.toJSON(),
          id: this.model.resourceId()
        }));
        this.resources = new Backbone.Collection((function() {
          var _i, _len, _ref2, _results;
          _ref2 = this.model.get('resources');
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            r = _ref2[_i];
            _results.push({
              id: r
            });
          }
          return _results;
        }).call(this));
        this.resources.on('change add remove', function() {
          var model;
          return _this.model.set('resources', (function() {
            var _i, _len, _ref2, _results;
            _ref2 = this.resources.models;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              model = _ref2[_i];
              _results.push(model.id);
            }
            return _results;
          }).call(_this));
        });
        new SelectView({
          el: this.$('.select'),
          collection: this.resources
        });
        this.codeView = new CodeEditorView({
          mode: 'python',
          defaultText: 'emit(*input)',
          el: this.$('.query #query-editor.editor'),
          model: this.model
        });
        return this.headerEditor = CodeMirror(this.$('.query #header-editor.editor')[0], {
          mode: 'yaml',
          value: 'X-LocalTime: 2012-01-01 12:00:00'
        });
      };

      QueryView.prototype.render = function() {
        return this.$('p.api-name span').empty().append(this.model.resourceId());
      };

      QueryView.prototype.test = function(e) {
        var exec, header, headerLines, headerText, headers, line, parts, text, _i, _len,
          _this = this;
        this.codeView.clearAnnotations();
        this.codeView.update();
        headers = {};
        headerText = this.headerEditor.getValue().trim();
        if (headerText) {
          headerLines = headerText.split('\n');
          for (_i = 0, _len = headerLines.length; _i < _len; _i++) {
            line = headerLines[_i];
            parts = line.split(':');
            header = parts[0].trim();
            text = parts.slice(1).join(':').trim();
            headers[header] = text;
          }
        }
        exec = $.ajax({
          url: "" + window.API_PREFIX + "/query",
          type: 'POST',
          data: JSON.stringify(this.model.toJSON()),
          processData: false,
          contentType: 'application/json',
          headers: headers
        });
        exec.done(function(response) {
          var _ref2;
          if ((_ref2 = _this.jsonView) != null) {
            _ref2.undelegateEvents();
          }
          return _this.jsonView = new JSONView({
            el: _this.$('.results'),
            payload: response
          });
        });
        return exec.fail(function(jqXHR) {
          var error, error_data, _j, _len1, _ref2, _results;
          error_data = JSON.parse(jqXHR.responseText);
          if (error_data.extra.errors != null) {
            _ref2 = error_data.extra.errors;
            _results = [];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              error = _ref2[_j];
              _results.push(_this.codeView.markError(error.msg, error.line, error.col));
            }
            return _results;
          } else {
            return console.log(':TODO: Trigger global error handler.');
          }
        });
      };

      QueryView.prototype.onClose = function() {
        var _ref2;
        return (_ref2 = this.jsonView) != null ? _ref2.close() : void 0;
      };

      return QueryView;

    })(BaseView);
    mapper.register(mapper.MODIFY, TYPE_QUERY, QueryView);
    return {
      QueryView: QueryView
    };
  });

}).call(this);
