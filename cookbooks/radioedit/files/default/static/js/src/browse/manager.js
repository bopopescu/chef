// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, BaseView, Blob, BreadCrumbView, Bucket, CON, Commits, CommitsView, CreateGlobalObjectView, DraftsView, ListView, ManagerView, ModifyView, NodesCollection, Tree, TreeView, browseTemplate, bus, drafts, mapper, router, _, _ref, _ref1, _ref2,
      _this = this;
    CON = require('src/const');
    Backbone = require('backbone');
    _ = require('underscore');
    $ = require('jquery');
    BaseView = require('src/browse/base').BaseView;
    _ref = require('src/browse/tree'), TreeView = _ref.TreeView, Tree = _ref.Tree;
    ModifyView = require('src/browse/modify').ModifyView;
    BreadCrumbView = require('src/browse/bread_crumb').BreadCrumbView;
    CreateGlobalObjectView = require('src/browse/create').CreateGlobalObjectView;
    CommitsView = require('src/browse/commits').CommitsView;
    ListView = require('src/browse/list').ListView;
    _ref1 = require('src/browse/models'), NodesCollection = _ref1.NodesCollection, Blob = _ref1.Blob, Bucket = _ref1.Bucket, Commits = _ref1.Commits;
    mapper = require('src/browse/mapper').mapper;
    _ref2 = require('src/browse/drafts'), drafts = _ref2.drafts, DraftsView = _ref2.DraftsView;
    require('jquery.transit');
    require('src/browse/typeviews/featured');
    require('src/browse/typeviews/query');
    require('src/browse/typeviews/external');
    require('src/browse/typeviews/concierge');
    require('src/catalog');
    browseTemplate = require('eco/browse/browse');
    router = require('src/browse/router');
    window.drafts = drafts;
    bus = _.clone(Backbone.Events);
    bus.on('focus', function(path, node) {
      return Backbone.View.prototype.global.trigger('browse', path);
    });
    ManagerView = (function(_super) {

      __extends(ManagerView, _super);

      function ManagerView() {
        return ManagerView.__super__.constructor.apply(this, arguments);
      }

      ManagerView.prototype.treeView = null;

      ManagerView.prototype.contentView = null;

      ManagerView.prototype.breadcrumb = null;

      ManagerView.prototype.VIEW_WIDTH = '820';

      ManagerView.prototype.initialize = function() {
        var boundaryElement;
        router.on('route:browse', this.browse, this).on('route:modify', this.modify, this).on('route:draft', this.modify, this).on('route:commits', this.commits, this);
        this.treeView = new TreeView({
          prefix: '',
          bus: bus
        });
        this.breadcrumb = new BreadCrumbView();
        boundaryElement = $('#main')[0];
        this.createGlobalObjectView = new CreateGlobalObjectView({
          collection: mapper.collection,
          bucket: new Bucket(),
          boundaryElement: boundaryElement
        });
        return this.createGlobalObjectView.setDelegateSelector('.global_links .create');
      };

      ManagerView.prototype.render = function() {
        this.$el.html(browseTemplate());
        this.$el.find('#browser-tree').append(this.treeView.el);
        this.breadcrumb.render();
        this.$el.find('.breadcrumbContainer').append(this.breadcrumb.el);
        new DraftsView({
          el: this.$el.find('#draft-list')
        }).render();
        this.content = this.$('.content');
        return this;
      };

      ManagerView.prototype.placeContent = function(view) {
        var placeFunc,
          _this = this;
        placeFunc = function() {
          _this.switchView(view);
          return _this.contentView.$el.transition({
            opacity: 1
          });
        };
        this.content.append(view.$el.css({
          opacity: 0
        }));
        if (this.contentView != null) {
          return this.contentView.$el.transition({
            opacity: 0
          }, 300, 'in-out', placeFunc);
        } else {
          return placeFunc();
        }
      };

      ManagerView.prototype.slideIn = function(view) {
        var _this = this;
        return this.content.width(this.VIEW_WIDTH * 2).append(view.el).transition({
          x: "-820"
        }, 300, function() {
          _this.switchView(view);
          return _this.content.css({
            x: 0
          });
        });
      };

      ManagerView.prototype.slideOut = function(view) {
        var _this = this;
        return this.content.width(this.VIEW_WIDTH * 2).prepend(view.el).css({
          x: "-820"
        }).transition({
          x: 0
        }, 300, function() {
          return _this.switchView(view);
        });
      };

      ManagerView.prototype.switchView = function(newView) {
        var _ref3;
        this.content.css('width', 'auto');
        if ((_ref3 = this.contentView) != null) {
          _ref3.close();
        }
        this.contentView = newView;
        return this.contentView;
      };

      ManagerView.prototype.browse = function(path) {
        var collection, listView;
        path = "" + path + ".";
        bus.trigger('blur', path);
        this.treeView.browseTo(path);
        this.global.trigger(CON.EVENT_BROWSE, path);
        collection = new NodesCollection();
        listView = new ListView({
          collection: collection,
          dataTypesCollection: mapper.collection,
          path: path
        });
        collection.fetch({
          data: {
            q: path
          }
        });
        if (router.previousRoute === '') {
          return this.placeContent(listView);
        } else if (path.match(new RegExp("^" + router.previousRoute))) {
          return this.slideIn(listView);
        } else if (router.previousRoute.match(new RegExp("" + path))) {
          return this.slideOut(listView);
        } else {
          return this.placeContent(listView);
        }
      };

      ManagerView.prototype.modify = function(resource_id, commit, draft) {
        var model, path;
        if (draft != null) {
          model = new Blob(drafts.get(resource_id).attributes.data);
          model.draft = true;
        } else {
          model = Blob.instance(resource_id, commit);
          model.draft = false;
        }
        path = resource_id.split('.').slice(0, -1).join('.') + '.';
        bus.trigger('blur', path);
        this.treeView.browseTo(path);
        this.placeContent(new ModifyView({
          model: model
        }));
        return this.global.trigger(CON.EVENT_VIEW, model);
      };

      ManagerView.prototype.commits = function(resourceId) {
        var view,
          _this = this;
        this.commitsCollection = new Commits([], {
          resourceId: resourceId
        });
        view = new CommitsView({
          collection: this.commitsCollection
        });
        this.commitsCollection.on('reset', function(commits) {
          return _this.global.trigger(CON.EVENT_COMMIT_VIEW, resourceId, commits);
        });
        return this.placeContent(view);
      };

      ManagerView.prototype.onClose = function() {
        var _ref3, _ref4, _ref5, _ref6, _ref7;
        if ((_ref3 = this.treeView) != null) {
          _ref3.close();
        }
        if ((_ref4 = this.breadcrumb) != null) {
          _ref4.remove();
        }
        if ((_ref5 = this.createGlobalObjectView) != null) {
          _ref5.close();
        }
        if ((_ref6 = this.contentView) != null) {
          _ref6.close();
        }
        if ((_ref7 = this.commitsCollection) != null) {
          _ref7.off(null, null, this);
        }
        return router.off(null, null, this);
      };

      return ManagerView;

    })(BaseView);
    return ManagerView;
  });

}).call(this);
