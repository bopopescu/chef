// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, AclCollection, AclIconView, AclPopover, BaseLayoutView, BaseView, BreadCrumbView, CON, Commits, CrumbTypeView, DeletePopover, HistoryView, PathView, PermissionsView, PopoverView, Ref, RefView, RefsView, aclPopoverTemplate, aclTemplate, breadCrumbTemplate, crumbTypeTemplate, historyTemplate, pathTemplate, refTemplate, refsTemplate, _, _ref, _ref1, _ref2;
    CON = require('src/const');
    _ref = require('src/browse/acl'), AclCollection = _ref.AclCollection, PermissionsView = _ref.PermissionsView;
    _ref1 = require('src/browse/base'), BaseView = _ref1.BaseView, PopoverView = _ref1.PopoverView;
    _ref2 = require('src/browse/models'), Commits = _ref2.Commits, Ref = _ref2.Ref;
    $ = require('jquery');
    _ = require('underscore');
    require('backbone.layoutmanager');
    breadCrumbTemplate = require('eco/browse/bread_crumb/bread_crumb');
    pathTemplate = require('eco/browse/bread_crumb/path');
    refsTemplate = require('eco/browse/bread_crumb/refs');
    refTemplate = require('eco/browse/bread_crumb/ref');
    crumbTypeTemplate = require('eco/browse/bread_crumb/crumb_type');
    historyTemplate = require('eco/browse/bread_crumb/history');
    aclTemplate = require('eco/browse/bread_crumb/acl');
    aclPopoverTemplate = require('eco/browse/bread_crumb/acl_popover');
    DeletePopover = (function(_super) {

      __extends(DeletePopover, _super);

      function DeletePopover() {
        return DeletePopover.__super__.constructor.apply(this, arguments);
      }

      DeletePopover.prototype.className = 'deletePopover';

      DeletePopover.prototype.events = function() {
        return {
          'click .btn-danger': this.deleteTag
        };
      };

      DeletePopover.prototype.render = function(ref) {
        this.ref = ref;
        return DeletePopover.__super__.render.call(this, '', "<button class=\"btn btn-large btn-danger\">Delete " + this.ref.id + " Tag</button>");
      };

      DeletePopover.prototype.deleteTag = function() {
        var _this = this;
        return this.ref.destroy({
          wait: true
        }).done(function() {
          return _this.hidePopover();
        });
      };

      return DeletePopover;

    })(PopoverView);
    AclPopover = (function(_super) {

      __extends(AclPopover, _super);

      function AclPopover() {
        return AclPopover.__super__.constructor.apply(this, arguments);
      }

      AclPopover.prototype.className = 'aclPopover';

      AclPopover.prototype.initialize = function(options) {
        AclPopover.__super__.initialize.call(this, options);
        this.resourceId = options.resourceId;
        this.collection = new AclCollection([], {
          resourceId: this.resourceId
        });
        this.collection.fetch();
        return this.permissionsView = new PermissionsView({
          collection: this.collection
        });
      };

      AclPopover.prototype.render = function() {
        AclPopover.__super__.render.call(this, "Permissions");
        this.$content.append(this.permissionsView.el);
        return this;
      };

      return AclPopover;

    })(PopoverView);
    BreadCrumbView = (function(_super) {

      __extends(BreadCrumbView, _super);

      function BreadCrumbView() {
        return BreadCrumbView.__super__.constructor.apply(this, arguments);
      }

      BreadCrumbView.prototype.className = 'breadcrumb';

      BreadCrumbView.prototype.template = breadCrumbTemplate;

      BreadCrumbView.prototype.initialize = function() {
        var _this = this;
        this.global.on(CON.EVENT_BROWSE, function(path) {
          return _this.renderView(path, null, CON.EVENT_BROWSE);
        });
        this.global.on(CON.EVENT_VIEW, function(model) {
          var renderFunction, _ref3, _ref4;
          if ((_ref3 = _this.model) != null) {
            if ((_ref4 = _ref3.index()) != null) {
              _ref4.off(null, null, _this);
            }
          }
          _this.model = model;
          renderFunction = function() {
            return _this.renderView(model.resourceId(), model, CON.EVENT_VIEW);
          };
          _this.model.index().on('change', renderFunction);
          return renderFunction();
        });
        return this.global.on(CON.EVENT_COMMIT_VIEW, function(resourceId, commits) {
          return _this.renderView(resourceId, commits.first(), CON.EVENT_COMMIT_VIEW);
        });
      };

      BreadCrumbView.prototype.renderView = function(path, blob, event) {
        this.path = path;
        this.blob = blob;
        this.event = event;
        return this.render();
      };

      BreadCrumbView.prototype.fetch = function(path) {
        return path;
      };

      BreadCrumbView.prototype.beforeRender = function() {
        var href, resourceId, setViews, _ref3, _ref4;
        setViews = {
          '.browserCrumb': new PathView({
            path: this.path
          })
        };
        if ((_ref3 = this.getView(function(view) {
          return view instanceof HistoryView;
        })) != null) {
          _ref3.remove();
        }
        if ((_ref4 = this.event) === CON.EVENT_COMMIT_VIEW || _ref4 === CON.EVENT_VIEW) {
          href = "#" + (this.event === CON.EVENT_COMMIT_VIEW ? this.blob.getFragment() : this.path);
          this.insertView('.infoIcons', new HistoryView({
            href: href
          }));
        }
        if (this.event === CON.EVENT_VIEW) {
          setViews['.refs'] = new RefsView({
            blob: this.blob
          });
          setViews['.crumbType'] = new CrumbTypeView({
            blob: this.blob
          });
          resourceId = this.blob.resourceId();
          this.insertView('.infoIcons', new AclIconView({
            resourceId: resourceId
          }));
        }
        return this.setViews(setViews);
      };

      return BreadCrumbView;

    })(Backbone.LayoutView);
    BaseLayoutView = (function(_super) {

      __extends(BaseLayoutView, _super);

      function BaseLayoutView() {
        return BaseLayoutView.__super__.constructor.apply(this, arguments);
      }

      BaseLayoutView.prototype.tagName = 'span';

      BaseLayoutView.prototype.fetch = function(path) {
        return path;
      };

      return BaseLayoutView;

    })(Backbone.LayoutView);
    PathView = (function(_super) {

      __extends(PathView, _super);

      function PathView() {
        return PathView.__super__.constructor.apply(this, arguments);
      }

      PathView.prototype.initialize = function(_arg) {
        this.path = _arg.path;
      };

      PathView.prototype.template = pathTemplate;

      PathView.prototype.serialize = function() {
        var path, _ref3, _ref4;
        path = ((_ref3 = this.path) != null ? _ref3.split('.') : void 0) || [];
        if (!((_ref4 = path.last()) != null ? _ref4.length : void 0)) {
          path.pop();
        }
        return {
          path: path
        };
      };

      return PathView;

    })(BaseLayoutView);
    RefsView = (function(_super) {

      __extends(RefsView, _super);

      function RefsView() {
        return RefsView.__super__.constructor.apply(this, arguments);
      }

      RefsView.prototype.initialize = function(_arg) {
        this.blob = _arg.blob;
      };

      RefsView.prototype.template = refsTemplate;

      RefsView.prototype.beforeRender = function() {
        var _ref3,
          _this = this;
        return (_ref3 = this.blob.index().dataStore.get('refs')) != null ? _ref3.each(function(ref, index) {
          if (ref.get('commit') === _this.blob.commitId()) {
            return _this.insertView('.commitRefs', new RefView({
              ref: ref
            }));
          }
        }) : void 0;
      };

      RefsView.prototype.serialize = function() {
        return {
          commitId: this.blob.commitId()
        };
      };

      return RefsView;

    })(BaseLayoutView);
    RefView = (function(_super) {

      __extends(RefView, _super);

      function RefView() {
        return RefView.__super__.constructor.apply(this, arguments);
      }

      RefView.prototype.initialize = function(_arg) {
        this.ref = _arg.ref;
        if (this.ref.id !== 'HEAD') {
          this.deletePopover = new DeletePopover({
            boundaryElement: $('#main')[0]
          });
          return this.deletePopover.render(this.ref);
        }
      };

      RefView.prototype.events = function() {
        return {
          'click .deletable': this.showPopover
        };
      };

      RefView.prototype.template = refTemplate;

      RefView.prototype.serialize = function() {
        return {
          ref: this.ref.id
        };
      };

      RefView.prototype.showPopover = function(event) {
        return this.deletePopover.showPopover(event);
      };

      RefView.prototype.cleanup = function() {
        var _ref3;
        return (_ref3 = this.deletePopover) != null ? _ref3.close() : void 0;
      };

      return RefView;

    })(BaseLayoutView);
    CrumbTypeView = (function(_super) {

      __extends(CrumbTypeView, _super);

      function CrumbTypeView() {
        return CrumbTypeView.__super__.constructor.apply(this, arguments);
      }

      CrumbTypeView.prototype.initialize = function(_arg) {
        this.blob = _arg.blob;
      };

      CrumbTypeView.prototype.template = crumbTypeTemplate;

      CrumbTypeView.prototype.serialize = function() {
        return {
          typeId: this.blob.typeId(),
          draft: this.blob.draft
        };
      };

      return CrumbTypeView;

    })(BaseLayoutView);
    HistoryView = (function(_super) {

      __extends(HistoryView, _super);

      function HistoryView() {
        return HistoryView.__super__.constructor.apply(this, arguments);
      }

      HistoryView.prototype.initialize = function(_arg) {
        this.href = _arg.href;
      };

      HistoryView.prototype.template = historyTemplate;

      HistoryView.prototype.serialize = function() {
        return {
          href: this.href
        };
      };

      return HistoryView;

    })(BaseLayoutView);
    AclIconView = (function(_super) {

      __extends(AclIconView, _super);

      function AclIconView() {
        return AclIconView.__super__.constructor.apply(this, arguments);
      }

      AclIconView.prototype.initialize = function(_arg) {
        var boundaryElement;
        this.resourceId = _arg.resourceId;
        boundaryElement = $('#main')[0];
        this.aclPopover = new AclPopover({
          boundaryElement: boundaryElement,
          resourceId: this.resourceId
        });
        return this.aclPopover.render();
      };

      AclIconView.prototype.events = function() {
        return {
          'click': this.showPopover
        };
      };

      AclIconView.prototype.showPopover = function(event) {
        return this.aclPopover.showPopover(event);
      };

      AclIconView.prototype.cleanup = function() {
        var _ref3;
        return (_ref3 = this.aclPopover) != null ? _ref3.close() : void 0;
      };

      AclIconView.prototype.template = aclTemplate;

      return AclIconView;

    })(BaseLayoutView);
    return {
      BreadCrumbView: BreadCrumbView,
      DeletePopover: DeletePopover,
      AclIconView: AclIconView
    };
  });

}).call(this);
