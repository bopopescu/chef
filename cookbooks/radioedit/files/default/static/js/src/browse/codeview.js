// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, CodeEditorView, CodeMirror;
    Backbone = require('backbone');
    CodeMirror = require('codemirror_sql');
    require('jquery.hotkeys');
    CodeEditorView = (function(_super) {

      __extends(CodeEditorView, _super);

      function CodeEditorView() {
        return CodeEditorView.__super__.constructor.apply(this, arguments);
      }

      CodeEditorView.prototype.markedLines = [];

      CodeEditorView.prototype.initialize = function(_arg) {
        this.mode = _arg.mode;
        this.mirror = CodeMirror(this.$el[0], {
          mode: this.mode,
          value: this.model.get('query') || (this.defaultText || ''),
          tabSize: 2,
          indentUnit: 2,
          lineWrapping: true,
          lineNumbers: true,
          fixedGutter: true,
          onChange: _.bind(this.codeUpdate, this)
        });
        return this.$('textarea').on('keydown.hk_meta_s', function(e) {
          return console.log('Save Event');
        });
      };

      CodeEditorView.prototype.codeUpdate = function(editor, _arg) {
        var from, next, text, to;
        from = _arg.from, to = _arg.to, text = _arg.text, next = _arg.next;
        return this.update();
      };

      CodeEditorView.prototype.update = function() {
        return this.model.set('query', this.mirror.getValue());
      };

      CodeEditorView.prototype.clearAnnotations = function() {
        var line, _i, _len, _ref;
        _ref = this.markedLines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          this.mirror.clearMarker(line);
          this.mirror.setLineClass(line, null, null);
        }
        return this.markedLines = [];
      };

      CodeEditorView.prototype.markError = function(msg, lineno, col) {
        var error, line;
        error = "<span data-tip=\"" + msg + "\">‚óè %N%</span>";
        line = this.mirror.getLineHandle(lineno - 1);
        this.mirror.setMarker(line, error, 'code-error');
        this.mirror.setLineClass(line, null, 'code-line-error');
        return this.markedLines.push(line);
      };

      return CodeEditorView;

    })(Backbone.View);
    return {
      CodeEditorView: CodeEditorView
    };
  });

}).call(this);
