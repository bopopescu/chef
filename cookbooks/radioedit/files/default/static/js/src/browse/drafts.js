// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, Blob, CON, Drafts, DraftsView, LocalCollection, LocalModel, drafts, _ref;
    CON = require('src/const');
    Backbone = require('backbone');
    Blob = require('src/browse/models').Blob;
    _ref = require('src/localstorage'), LocalModel = _ref.LocalModel, LocalCollection = _ref.LocalCollection;
    Drafts = (function(_super) {

      __extends(Drafts, _super);

      function Drafts() {
        return Drafts.__super__.constructor.apply(this, arguments);
      }

      Drafts.prototype.url = 'draft/v1/';

      Drafts.prototype.model = LocalModel;

      Drafts.prototype.initialize = function() {
        var _this = this;
        this.global.on(CON.EVENT_DRAFT, function(model) {
          var data, id, localModel;
          id = model.resourceId();
          localModel = _this.get(id);
          data = {
            id: id,
            data: model.toJSON(true)
          };
          if (localModel != null) {
            return localModel.clear({
              silent: true
            }).set(data).save();
          } else {
            return _this.create(data);
          }
        });
        return this.global.on(CON.EVENT_CLEAN, function(model) {
          var _ref1;
          return (_ref1 = drafts.get(model.resourceId())) != null ? _ref1.destroy() : void 0;
        });
      };

      return Drafts;

    })(LocalCollection);
    DraftsView = (function(_super) {

      __extends(DraftsView, _super);

      function DraftsView() {
        return DraftsView.__super__.constructor.apply(this, arguments);
      }

      DraftsView.prototype.tagName = 'ul';

      DraftsView.prototype.events = {
        'click a.remove': 'remove'
      };

      DraftsView.prototype.initialize = function() {
        return drafts.on('reset add remove', this.render, this);
      };

      DraftsView.prototype.render = function() {
        var draft, mainEl, model, _i, _len, _ref1, _results;
        mainEl = this.$el.parents('#drafts');
        if (drafts.length > 0) {
          mainEl.fadeIn();
        } else {
          mainEl.fadeOut();
        }
        this.$el.empty();
        _ref1 = drafts.models;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          draft = _ref1[_i];
          model = new Blob(draft.attributes.data);
          _results.push(this.$el.append("<li>\n  <a class=\"remove\" data-draft=\"" + (model.resourceId()) + "\" href=\"javascript:void(0)\">\n    <i class=\"icon-remove-sign\"/>\n  </a>\n  <a href=\"#" + (model.resourceId()) + "/" + (model.commitId()) + "/draft\">\n    <i class=\"icon-paste\"></i>\n    <span data-tip=\"" + (model.resourceId()) + "\" data-placement=\"right\">\n      " + (model.resourceId().truncate(11, true, 'left')) + "\n    </span>\n  </a>\n</li>"));
        }
        return _results;
      };

      DraftsView.prototype.remove = function(e) {
        return drafts.get($(e.currentTarget).data('draft')).destroy();
      };

      return DraftsView;

    })(Backbone.View);
    drafts = new Drafts();
    drafts.fetch();
    return {
      drafts: drafts,
      DraftsView: DraftsView
    };
  });

}).call(this);
