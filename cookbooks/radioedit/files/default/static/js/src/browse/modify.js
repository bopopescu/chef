// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, BaseView, CON, Calendar, ModifyView, ObjectToolbarView, Schedule, mapper, modifyTemplate, toolbarTemplate;
    CON = require('src/const');
    $ = require('jquery');
    Backbone = require('backbone');
    Schedule = require('src/browse/models').Schedule;
    BaseView = require('src/browse/base').BaseView;
    mapper = require('src/browse/mapper').mapper;
    Calendar = require('src/browse/calendar').Calendar;
    toolbarTemplate = require('eco/browse/toolbar');
    modifyTemplate = require('eco/browse/modify');
    ObjectToolbarView = (function(_super) {

      __extends(ObjectToolbarView, _super);

      function ObjectToolbarView() {
        return ObjectToolbarView.__super__.constructor.apply(this, arguments);
      }

      ObjectToolbarView.prototype.initialize = function() {
        var _this = this;
        this.global.on(CON.EVENT_DIRTY, function() {
          _this.saveCls = 'btn-primary';
          return _this.render();
        });
        this.global.on(CON.EVENT_CLEAN, function() {
          _this.saveCls = '';
          return _this.render();
        });
        return this.global.on('saveFail', function() {
          _this.saveCls = 'btn-danger';
          return _this.render();
        });
      };

      ObjectToolbarView.prototype.render = function() {
        return this.$el.empty().append(toolbarTemplate({
          saveCls: this.saveCls
        }));
      };

      return ObjectToolbarView;

    })(BaseView);
    ModifyView = (function(_super) {

      __extends(ModifyView, _super);

      function ModifyView() {
        return ModifyView.__super__.constructor.apply(this, arguments);
      }

      ModifyView.prototype.attributes = {
        "class": 'object-modify browse-content'
      };

      ModifyView.prototype.events = {
        'click #btn-save': 'save',
        'click .push-group .pushNow': 'pushNow',
        'click .push-group form': function(event) {
          return event.stopPropagation();
        }
      };

      ModifyView.prototype.initialize = function() {
        var model,
          _this = this;
        model = this.model;
        this.toolbar = new ObjectToolbarView();
        if (model.typeId() != null) {
          this.startView(model.typeId());
          if ((model.draft != null) && model.draft === true) {
            return this.global.trigger(CON.EVENT_DIRTY);
          }
        } else {
          return model.fetch({
            success: function() {
              return _this.startView(model.typeId());
            }
          });
        }
      };

      ModifyView.prototype.startView = function(typeId) {
        var boundaryElement, data, scheduleModel,
          _this = this;
        scheduleModel = new Schedule({
          schedule: this.model.schedule()
        }, {
          resourceId: this.model.resourceId()
        });
        boundaryElement = $('#main')[0];
        this.calendar = new Calendar({
          model: this.model,
          scheduleModel: scheduleModel,
          boundaryElement: boundaryElement
        });
        this.calendar.setDelegateSelector('.push-group #btn-push');
        data = this.model.data();
        data.on('change', function() {
          _this.global.trigger(CON.EVENT_DIRTY);
          return _this.global.trigger(CON.EVENT_DRAFT, _this.model);
        });
        return mapper.get(mapper.MODIFY, typeId).done(function(View) {
          _this.$el.html(modifyTemplate());
          _this.view = new View({
            model: data,
            el: _this.$('.view'),
            resetEl: true
          });
          _this.render();
          return _this.calendar.options.$positionElement = _this.$('.push-group');
        });
      };

      ModifyView.prototype.save = function() {
        var _this = this;
        return this.model.save({}, {
          success: function(model, response) {
            Backbone.history.navigate("" + (model.resourceId()) + "/" + (model.commitId()), {
              replace: true
            });
            return _this.global.trigger(CON.EVENT_CLEAN, model);
          },
          error: function(model, response) {
            return _this.global.trigger('saveFail');
          }
        });
      };

      ModifyView.prototype.render = function() {
        this.calendar.render();
        this.assign(this.toolbar, '.object-toolbar');
        this.view.render();
        return this.view.el;
      };

      ModifyView.prototype.assign = function(view, selector) {
        return view.setElement(this.$(selector)).render();
      };

      ModifyView.prototype.pushNow = function(event) {
        var $target, id;
        $target = $(event.target);
        id = $target.data('push') || $target.prev('input').val().toLowerCase();
        return this.model.index().dataStore.get('refs').createOrUpdate({
          id: id,
          commit: this.model.id
        });
      };

      ModifyView.prototype.onClose = function() {
        var _ref, _ref1, _ref2;
        if ((_ref = this.view) != null) {
          _ref.close();
        }
        if ((_ref1 = this.calendar) != null) {
          _ref1.close();
        }
        return (_ref2 = this.toolbar) != null ? _ref2.close() : void 0;
      };

      return ModifyView;

    })(BaseView);
    return {
      ModifyView: ModifyView
    };
  });

}).call(this);
