// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, BaseColl, Messages, URL_PREFIX, _;
    URL_PREFIX = '/api/v1';
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    BaseColl = (function(_super) {

      __extends(BaseColl, _super);

      function BaseColl() {
        return BaseColl.__super__.constructor.apply(this, arguments);
      }

      BaseColl.prototype.metastate = null;

      BaseColl.prototype.pageSize = 25;

      BaseColl.prototype.initialize = function() {
        var _this = this;
        this.metastate = new Backbone.Model();
        return this.metastate.on('change', function(e) {
          return _this.fetch();
        });
      };

      BaseColl.prototype.parse = function(response) {
        var k, v, _ref;
        if (response.meta) {
          _ref = response.meta;
          for (k in _ref) {
            if (!__hasProp.call(_ref, k)) continue;
            v = _ref[k];
            this[k] = v;
          }
        }
        if (response.result) {
          return response.result;
        }
        throw Error("No result attribute in response.");
      };

      BaseColl.prototype.pages = function() {
        return Math.floor(this.records / this.limit);
      };

      BaseColl.prototype.page = function() {
        return Math.floor(this.offset / this.limit) + 1;
      };

      BaseColl.prototype.pageTo = function(page) {
        return this.metastate.set({
          limit: this.pageSize,
          offset: (page * this.pageSize) - this.pageSize
        });
      };

      BaseColl.prototype.fetch = function(options) {
        options = options ? _.clone(options) : {};
        options.data = _.extend(options.data || {}, this.metastate.attributes);
        return BaseColl.__super__.fetch.call(this, options);
      };

      return BaseColl;

    })(Backbone.Collection);
    Messages = (function() {

      function Messages() {}

      Messages.prototype.message = function(text, type) {
        return $('.top-right').notify({
          type: type,
          message: {
            text: text
          }
        }).show();
      };

      Messages.prototype.success = function(text) {
        return this.message(text, 'success');
      };

      Messages.prototype.error = function(text) {
        return this.message(text, 'error');
      };

      Messages.prototype.info = function(text) {
        return this.message(text, 'info');
      };

      return Messages;

    })();
    return {
      messages: new Messages(),
      Model: Backbone.Model,
      Collection: BaseColl
    };
  });

}).call(this);
