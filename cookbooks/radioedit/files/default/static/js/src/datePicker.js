// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, BaseSubView, BaseView, CurrentDateModel, DatePicker, DayView, DayViewGroup, MonthView, YearView, containerTemplate, daysTemplate, moment, monthsTemplate, yearsTemplate, _;
    Backbone = require('backbone');
    $ = require('jquery');
    _ = require('underscore');
    moment = require('moment');
    containerTemplate = require('eco/datepicker/container');
    daysTemplate = require('eco/datepicker/days');
    monthsTemplate = require('eco/datepicker/months');
    yearsTemplate = require('eco/datepicker/years');
    BaseView = require('src/browse/base').BaseView;
    CurrentDateModel = (function(_super) {

      __extends(CurrentDateModel, _super);

      function CurrentDateModel() {
        return CurrentDateModel.__super__.constructor.apply(this, arguments);
      }

      CurrentDateModel.prototype.defaults = function() {
        return {
          date: moment.utc().startOf('month')
        };
      };

      CurrentDateModel.prototype.getDate = function() {
        return this.get('date').clone();
      };

      return CurrentDateModel;

    })(Backbone.Model);
    DayView = (function(_super) {

      __extends(DayView, _super);

      function DayView() {
        return DayView.__super__.constructor.apply(this, arguments);
      }

      DayView.prototype.initialize = function() {
        var _ref;
        return _ref = this.options, this.date = _ref.date, this.supplementalRender = _ref.supplementalRender, this.supplementalClass = _ref.supplementalClass, _ref;
      };

      DayView.prototype.render = function() {
        var endDate;
        endDate = this.date.clone().add('months', 1);
        this.$el.append(daysTemplate({
          weekdays: moment.weekdaysMin,
          date: this.date,
          endDate: endDate,
          daysInMonth: this.date.daysInMonth(),
          supplementalRender: this.supplementalRender,
          supplementalClass: this.supplementalClass
        }));
        return this;
      };

      return DayView;

    })(Backbone.View);
    BaseSubView = (function(_super) {

      __extends(BaseSubView, _super);

      function BaseSubView() {
        return BaseSubView.__super__.constructor.apply(this, arguments);
      }

      BaseSubView.prototype.initialize = function() {
        var _ref;
        if (((_ref = this.options) != null ? _ref.currentDateModel : void 0) == null) {
          throw new Error("options.currentDateModel must be passed to the initialize method of " + this.constructor.name + ".");
        }
        this.currentDateModel = this.options.currentDateModel;
        return _.bindAll(this, 'supplementalRender', 'supplementalClass');
      };

      BaseSubView.prototype.advance = function() {
        throw new Error("Advance should be implemented on " + this.constructor.name + ".");
      };

      BaseSubView.prototype.rewind = function() {
        throw new Error("Rewind should be implemented on " + this.constructor.name + ".");
      };

      BaseSubView.prototype.supplementalRender = function(date) {};

      BaseSubView.prototype.supplementalClass = function(date) {};

      return BaseSubView;

    })(BaseView);
    DayViewGroup = (function(_super) {

      __extends(DayViewGroup, _super);

      function DayViewGroup() {
        return DayViewGroup.__super__.constructor.apply(this, arguments);
      }

      DayViewGroup.prototype.className = 'datepickerDaysContainer';

      DayViewGroup.prototype.initialize = function() {
        var index, numberSubViews;
        DayViewGroup.__super__.initialize.call(this);
        numberSubViews = this.options.numberSubViews || 3;
        return this.dayViews = (function() {
          var _i, _results;
          _results = [];
          for (index = _i = 0; 0 <= numberSubViews ? _i < numberSubViews : _i > numberSubViews; index = 0 <= numberSubViews ? ++_i : --_i) {
            _results.push(new DayView({
              date: this.currentDateModel.getDate(),
              supplementalRender: this.supplementalRender,
              supplementalClass: this.supplementalClass
            }));
          }
          return _results;
        }).call(this);
      };

      DayViewGroup.prototype.render = function() {
        var date, dayView, index, range, rangeEnd, _i, _j, _len, _ref, _ref1, _ref2, _results;
        rangeEnd = this.dayViews.length / 2;
        range = (function() {
          _results = [];
          for (var _i = _ref = -Math.floor(rangeEnd), _ref1 = Math.ceil(rangeEnd); _ref <= _ref1 ? _i < _ref1 : _i > _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        date = this.currentDateModel.getDate();
        this.$el.empty();
        _ref2 = this.dayViews;
        for (index = _j = 0, _len = _ref2.length; _j < _len; index = ++_j) {
          dayView = _ref2[index];
          dayView.date = date.clone().add('months', range[index]);
          dayView.setElement(this.$el).render();
        }
        return this;
      };

      DayViewGroup.prototype.advance = function() {
        var dayView, numMonths, _i, _len, _ref;
        numMonths = this.dayViews.length;
        this.currentDateModel.get('date').add('months', numMonths);
        _ref = this.dayViews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dayView = _ref[_i];
          dayView.date.add('months', numMonths);
        }
        return this;
      };

      DayViewGroup.prototype.rewind = function() {
        var dayView, numMonths, _i, _len, _ref;
        numMonths = this.dayViews.length;
        this.currentDateModel.get('date').subtract('months', numMonths);
        _ref = this.dayViews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dayView = _ref[_i];
          dayView.date.subtract('months', numMonths);
        }
        return this;
      };

      return DayViewGroup;

    })(BaseSubView);
    MonthView = (function(_super) {

      __extends(MonthView, _super);

      function MonthView() {
        return MonthView.__super__.constructor.apply(this, arguments);
      }

      MonthView.prototype.className = 'datepickerMonthsContainer';

      MonthView.prototype.render = function() {
        var date, endOfYear;
        date = this.currentDateModel.getDate().startOf('year');
        endOfYear = date.clone().add('months', 12);
        this.$el.html(monthsTemplate({
          date: date,
          endOfYear: endOfYear
        }));
        return this;
      };

      MonthView.prototype.advance = function() {
        this.currentDateModel.get('date').add('years', 1);
        return this;
      };

      MonthView.prototype.rewind = function() {
        this.currentDateModel.get('date').subtract('years', 1);
        return this;
      };

      return MonthView;

    })(BaseSubView);
    YearView = (function(_super) {

      __extends(YearView, _super);

      function YearView() {
        return YearView.__super__.constructor.apply(this, arguments);
      }

      YearView.prototype.className = 'datepickerYearsContainer';

      YearView.prototype.render = function() {
        var date, tweleveYearsLater;
        date = this.currentDateModel.getDate().startOf('year');
        tweleveYearsLater = date.clone().add('years', 12);
        this.$el.html(yearsTemplate({
          date: date,
          tweleveYearsLater: tweleveYearsLater
        }));
        return this;
      };

      YearView.prototype.advance = function() {
        this.currentDateModel.get('date').add('years', 12);
        return this;
      };

      YearView.prototype.rewind = function() {
        this.currentDateModel.get('date').subtract('years', 12);
        return this;
      };

      return YearView;

    })(BaseSubView);
    DatePicker = (function(_super) {

      __extends(DatePicker, _super);

      function DatePicker() {
        return DatePicker.__super__.constructor.apply(this, arguments);
      }

      DatePicker.prototype.className = 'datePickerContainer';

      DatePicker.prototype.currentSubView = null;

      DatePicker.prototype.events = {
        'click .prev': 'move',
        'click .next': 'move',
        'click .switch': 'switch'
      };

      DatePicker.instance = function(model, day, month, year) {
        var currentDateModel, key, setupClassAndInstance, subViews, value, _ref;
        if (day == null) {
          day = DayViewGroup;
        }
        if (month == null) {
          month = MonthView;
        }
        if (year == null) {
          year = YearView;
        }
        currentDateModel = new CurrentDateModel();
        setupClassAndInstance = function(viewClass) {
          return {
            viewClass: viewClass,
            instance: new viewClass({
              currentDateModel: currentDateModel,
              model: model
            })
          };
        };
        subViews = {};
        _ref = {
          day: day,
          month: month,
          year: year
        };
        for (key in _ref) {
          value = _ref[key];
          subViews[key] = setupClassAndInstance(value);
        }
        return new DatePicker({
          model: model,
          currentDateModel: currentDateModel,
          subViews: subViews
        });
      };

      DatePicker.prototype.initialize = function() {
        var _ref;
        return _ref = this.options, this.currentDateModel = _ref.currentDateModel, this.subViews = _ref.subViews, _ref;
      };

      DatePicker.prototype.render = function(instance) {
        if (instance == null) {
          instance = this.subViews.day.instance;
        }
        this.$el.html(containerTemplate());
        this.delegateEvents();
        this.$slideContainer = this.$('.slideContainer');
        this.setSubView(instance);
        this.$slideContainer.html(this.currentSubView.rendel());
        return this;
      };

      DatePicker.prototype.setSubView = function(viewInstance) {
        var oldSubView, _ref;
        if ((_ref = this.currentSubView) != null) {
          _ref.remove().undelegateEvents();
        }
        oldSubView = this.currentSubView;
        this.currentSubView = viewInstance;
        return oldSubView;
      };

      DatePicker.prototype.move = function(event) {
        var $currentTarget, currentViewMovement, key, moveMap, sv, viewInstance, _ref,
          _this = this;
        $currentTarget = $(event.currentTarget);
        currentViewMovement = "-" + (this.currentSubView.$el.outerWidth(true)) + "px";
        _ref = this.subViews;
        for (key in _ref) {
          sv = _ref[key];
          if (sv.viewClass.prototype.className === this.currentSubView.className) {
            viewInstance = new sv.viewClass({
              currentDateModel: this.currentDateModel,
              model: this.model
            });
          }
        }
        moveMap = {
          prev: function() {
            return _this.$slideContainer.prepend(viewInstance.rewind().rendel()).css({
              left: currentViewMovement
            }).animate({
              left: '0px'
            }).promise().done(function() {
              return _this.setSubView(viewInstance).close();
            });
          },
          next: function() {
            return _this.$slideContainer.append(viewInstance.advance().rendel()).animate({
              left: currentViewMovement
            }).promise().done(function() {
              _this.setSubView(viewInstance).close();
              return _this.$slideContainer.css({
                left: '0px'
              });
            });
          }
        };
        return moveMap[$currentTarget.data('direction')]();
      };

      DatePicker.prototype["switch"] = function(event) {
        var $currentTarget,
          _this = this;
        $currentTarget = $(event.currentTarget);
        this.currentDateModel.set('date', moment($currentTarget.data('date')).utc());
        return this.currentSubView.$el.fadeOut().promise().done(function() {
          _this.setSubView(_this.subViews[$currentTarget.data('switch')].instance);
          return _this.currentSubView.render().$el.css({
            display: 'none'
          }).appendTo(_this.$slideContainer).fadeIn();
        });
      };

      DatePicker.prototype.onClose = function() {
        var instance, key, viewClass, _ref, _ref1, _ref2, _results;
        if ((_ref = this.currentSubView) != null) {
          _ref.close();
        }
        _ref1 = this.subViews;
        _results = [];
        for (key in _ref1) {
          _ref2 = _ref1[key], viewClass = _ref2.viewClass, instance = _ref2.instance;
          _results.push(instance.close());
        }
        return _results;
      };

      return DatePicker;

    })(BaseView);
    return {
      DatePicker: DatePicker,
      DayViewGroup: DayViewGroup
    };
  });

}).call(this);
