// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, ANCHOR, Backbone, IMAGE_SUBMISSION_ENDPOINT, ImageUploadAnchorView, TargetItemImageModel, UPLOAD, convertPoints, formatTime, modalTemplate, _;
    Backbone = require('backbone');
    _ = require('underscore');
    $ = require('jquery');
    require('fileUpload/jquery.fileupload');
    modalTemplate = require('eco/crop/modal');
    UPLOAD = 'upload';
    ANCHOR = 'anchor';
    IMAGE_SUBMISSION_ENDPOINT = '/api/v2/utils/image/';
    formatTime = function(seconds) {
      return Date.create().advance({
        seconds: seconds
      }).relative(function(value, unit, ms, loc) {
        if (ms.abs() > 1..day()) {
          return '{Weekday} {12hr}:{mm}{tt}';
        } else {
          console.log(this);
          return "";
        }
      });
    };
    convertPoints = function(point, local, actual) {
      var hR, wR;
      wR = local[0] / actual[0];
      hR = local[1] / actual[1];
      return {
        x: Math.floor(point[0] * wR),
        y: Math.floor(point[1] * hR)
      };
    };
    TargetItemImageModel = (function(_super) {

      __extends(TargetItemImageModel, _super);

      function TargetItemImageModel() {
        return TargetItemImageModel.__super__.constructor.apply(this, arguments);
      }

      TargetItemImageModel.prototype.defaults = {
        base_url: '',
        image_id: '',
        ops: [],
        extension: ''
      };

      TargetItemImageModel.prototype.getOp = function(name) {
        var op, _i, _len, _ref;
        _ref = this.get('ops');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          op = _ref[_i];
          if (op.op === name) {
            return op.args;
          }
        }
        return false;
      };

      TargetItemImageModel.prototype.setOp = function(name, args) {
        var modified, op, ops, updateOp;
        modified = false;
        updateOp = function(op) {
          op.args = args;
          modified = true;
          return op;
        };
        ops = (function() {
          var _i, _len, _ref, _results;
          _ref = this.get('ops');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            op = _ref[_i];
            if (op.op === name) {
              _results.push(updateOp(_.clone(op)));
            }
          }
          return _results;
        }).call(this);
        if (!modified) {
          ops.push({
            op: name,
            args: args
          });
        }
        return this.set('ops', ops);
      };

      TargetItemImageModel.prototype.removeOp = function(name) {
        var o, ops;
        ops = (function() {
          var _i, _len, _ref, _results;
          _ref = this.get('ops');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            o = _ref[_i];
            if (o.op === !name) {
              _results.push(o);
            }
          }
          return _results;
        }).call(this);
        return this.set('ops', ops);
      };

      TargetItemImageModel.prototype.imageUrl = function() {
        var _ref;
        if ((_ref = this.get('image_id')) != null ? _ref.length : void 0) {
          return "" + (this.get('base_url')) + (this.get('image_id')) + "." + (this.get('extension'));
        }
      };

      return TargetItemImageModel;

    })(Backbone.Model);
    ImageUploadAnchorView = (function(_super) {

      __extends(ImageUploadAnchorView, _super);

      function ImageUploadAnchorView() {
        return ImageUploadAnchorView.__super__.constructor.apply(this, arguments);
      }

      ImageUploadAnchorView.prototype.tagName = 'div';

      ImageUploadAnchorView.prototype.attributes = {
        "class": 'modal wideModal',
        id: 'image-modal'
      };

      ImageUploadAnchorView.prototype.events = {
        'click .update-button': 'saveChanges',
        'click .the-image img': 'updateAnchor',
        'click .remove-anchor-button': 'removeAnchor',
        'fileuploaddone': 'done',
        'fileuploadprogressall': 'progress',
        'fileuploadprogressstart': 'markClean'
      };

      ImageUploadAnchorView.prototype.initialize = function() {
        var _this = this;
        this.model = new TargetItemImageModel(this.model);
        this.model.on('change:image_id', this.render, this).on('change', this.renderAnchor, this).on('change', this.markDirty, this);
        this.$el.addClass('hide fade').append(modalTemplate({
          action: IMAGE_SUBMISSION_ENDPOINT
        })).appendTo('body').modal().on('hidden', function() {
          return _this.close();
        }).on('shown', function() {
          return _this.render();
        }).fileupload({
          dropZone: this.$el,
          progressInterval: 10
        });
        this.$thinking = this.$('.thinking');
        this.$progressContainer = this.$('.progress-container');
        this.$updateButton = this.$('.update-button');
        this.$imgTag = this.$('.img-tag');
        return $(document).on('drop.imageModal dragover.imageModal', function(e) {
          return e.preventDefault();
        });
      };

      ImageUploadAnchorView.prototype.done = function(e, data) {
        this.model.set(data.result);
        return this.$progressContainer.hide();
      };

      ImageUploadAnchorView.prototype.progress = function(e, data) {
        var extended, progress;
        progress = parseInt(data.loaded / data.total * 100, 10);
        this.$thinking.addClass('in').show();
        this.$imgTag.removeClass('in');
        this.$progressContainer.show();
        this.$('.progress .bar').css({
          width: progress + '%'
        });
        if (progress === 100) {
          this.$('.progress').addClass('progress-striped active');
        } else {
          this.$('.progress').removeClass('progress-striped active');
        }
        extended = this.$('.progress-extended');
        extended.find('.percent span').html(progress.toFixed(2));
        extended.find('.completion span').html("" + (data.loaded.bytes()) + " / " + (data.total.bytes()));
        extended.find('.speed span').html("" + ((data.bitrate * 8).bytes()) + "/s");
        return extended.find('.duration span').html(formatTime((data.total - data.loaded) * 8 / data.bitrate));
      };

      ImageUploadAnchorView.prototype._convertAnchorPoints = function(x, y, toReal) {
        var actual, dim, local, point;
        if (toReal == null) {
          toReal = true;
        }
        dim = this.model.get('dimensions');
        if (toReal === true) {
          local = dim;
          actual = [this.$imgTag.innerWidth(), this.$imgTag.innerHeight()];
        } else {
          local = [this.$imgTag.innerWidth(), this.$imgTag.innerHeight()];
          actual = dim;
        }
        return point = convertPoints([x, y], local, actual);
      };

      ImageUploadAnchorView.prototype.removeAnchor = function(e) {
        return this.model.removeOp('anchor');
      };

      ImageUploadAnchorView.prototype.updateAnchor = function(e) {
        var point;
        point = this._convertAnchorPoints(e.offsetX, e.offsetY);
        return this.model.setOp('anchor', [point.x, point.y]);
      };

      ImageUploadAnchorView.prototype.markDirty = function() {
        return this.$updateButton.removeClass('disabled').addClass('btn-primary');
      };

      ImageUploadAnchorView.prototype.markClean = function() {
        return this.$updateButton.removeClass('btn-primary').addClass('disabled');
      };

      ImageUploadAnchorView.prototype.render = function() {
        var $imgContainer, $theImage, height, outerDifference, progressHeight, that, url, width;
        url = this.model.imageUrl();
        if (url != null) {
          this.$thinking.addClass('in').show();
          that = this;
          $imgContainer = this.$('.cropImageContainer');
          $theImage = this.$('.the-image');
          outerDifference = function($el, dimension) {
            if (dimension == null) {
              dimension = 'width';
            }
            return $el["outer" + (dimension.capitalize())](true) - $el[dimension]();
          };
          width = Math.floor($imgContainer.width() - outerDifference($theImage) - outerDifference(this.$imgTag));
          progressHeight = this.$progressContainer.css('display') !== 'none' ? this.$progressContainer.height() : 0;
          height = Math.floor($(window).height() - (this.$el.outerHeight() - $theImage.height() - progressHeight) - 10);
          $('<img alt="Selected Image"/>').attr('src', "" + (this.model.imageUrl()) + "?ops=max(" + width + "," + height + ")").load(function() {
            that.$thinking.removeClass('in').hide();
            that.$imgTag.empty().append(this).append('<div class="anchor hide"/>').addClass('in');
            $theImage.css('height', "" + ($(this).height() + outerDifference(that.$imgTag, 'height')) + "px");
            return that.renderAnchor();
          });
        }
        return this;
      };

      ImageUploadAnchorView.prototype.renderAnchor = function() {
        var anchor, opArgs, point, removeAnchorButton;
        anchor = this.$('.anchor');
        removeAnchorButton = this.$('.remove-anchor-button');
        if (opArgs = this.model.getOp('anchor')) {
          point = this._convertAnchorPoints(opArgs[0], opArgs[1], false);
          removeAnchorButton.removeClass('disabled');
        } else {
          point = {
            x: this.$imgTag.innerWidth() / 2,
            y: this.$imgTag.innerHeight() / 2
          };
          removeAnchorButton.addClass('disabled');
        }
        return anchor.show().css({
          left: point.x - (anchor.outerWidth() / 2) + 'px',
          top: point.y - (anchor.outerWidth() / 2) + 'px'
        });
      };

      ImageUploadAnchorView.prototype.saveChanges = function() {
        this.trigger('finished', this.model.toJSON(), this.model.imageUrl());
        return this.$el.modal('hide');
      };

      ImageUploadAnchorView.prototype.onClose = function() {
        $(document).off('.imageModal');
        this.$el.fileupload('destroy');
        this.$el.off();
        return this.model.off(null, null, this);
      };

      return ImageUploadAnchorView;

    })(Backbone.View);
    return {
      ImageUploadAnchorView: ImageUploadAnchorView
    };
  });

}).call(this);
