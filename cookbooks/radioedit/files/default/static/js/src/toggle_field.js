// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, ToggleField, modalTemplate, toggleFieldTemplate, _;
    Backbone = require('backbone');
    $ = require('jquery');
    _ = require('underscore');
    require('backbone.layoutmanager');
    toggleFieldTemplate = require('eco/toggle_field/toggle_field');
    modalTemplate = require('eco/toggle_field/modal');
    ToggleField = (function(_super) {

      __extends(ToggleField, _super);

      function ToggleField() {
        return ToggleField.__super__.constructor.apply(this, arguments);
      }

      ToggleField.prototype.FOCUSED = 'focused';

      ToggleField.prototype.className = 'toggleField row';

      ToggleField.prototype.template = toggleFieldTemplate;

      ToggleField.prototype.sourceField = null;

      ToggleField.prototype.initialize = function(_arg) {
        var _this = this;
        this.toggles = _arg.toggles;
        return this.$modal = $(modalTemplate()).appendTo('body').modal({
          backdrop: 'static',
          keyboard: true,
          show: false
        }).on('click', '.cancel', function() {
          return _this.loadField();
        }).on('click', '.switch', function() {
          _this.$('.toggleContainer .btn').addClass('active');
          _this.sourceField = _this.$modal.find('.toggleOptions').val();
          _this.loadField();
          _this.setCharacterCount();
          return _this.saveField();
        });
      };

      ToggleField.prototype.events = function() {
        return {
          'input input#psuedoField': this.input,
          'click .toggleContainer .btn[data-identifier]': this.editField,
          'click .toggleContainer .btn.all': this.editAllFields,
          'focusin input#psuedoField': this.focusIn,
          'focusout input#psuedoField': this.focusOut
        };
      };

      ToggleField.prototype.afterRender = function() {
        var $firstToggle, fields, identifier, numberOfGroups, toggle;
        this.$psuedoField = this.$('#psuedoField');
        this.$characterCount = this.$('.characterCount');
        this.$fieldButtons = this.$('.toggleContainer .btn[data-identifier]');
        this.$allButton = this.$('.all');
        numberOfGroups = _(this.toggles).chain().values().groupBy('value').size().value();
        $firstToggle = this.$fieldButtons.first();
        this.sourceField = $firstToggle.data('identifier');
        if (numberOfGroups === 1) {
          this.$('.toggleContainer .btn').addClass('active');
        } else {
          $firstToggle.addClass('active');
        }
        this.loadField(false);
        fields = (function() {
          var _ref, _results;
          _ref = this.toggles;
          _results = [];
          for (identifier in _ref) {
            toggle = _ref[identifier];
            _results.push("<option value=\"" + identifier + "\">" + toggle.value + "</option>");
          }
          return _results;
        }).call(this);
        return this.$modal.find('.toggleOptions').html(fields);
      };

      ToggleField.prototype.serialize = function() {
        return {
          toggles: this.toggles
        };
      };

      ToggleField.prototype.focusIn = function() {
        return this.$el.addClass(this.FOCUSED);
      };

      ToggleField.prototype.focusOut = function() {
        return this.$el.removeClass(this.FOCUSED);
      };

      ToggleField.prototype.input = function(event) {
        this.setCharacterCount();
        return this.saveField();
      };

      ToggleField.prototype.saveField = function() {
        var activeButtons, fields, identifierPart, that;
        that = this;
        activeButtons = this.$('.toggleContainer .btn[data-identifier].active');
        identifierPart = activeButtons.length === 1 ? "=\"" + (activeButtons.data('identifier')) + "\"" : '';
        this.$("input[name" + identifierPart + "]").each(function() {
          var event;
          event = new $.Event('input');
          return $(this).val(that.$psuedoField.val()).trigger(event);
        });
        fields = '';
        this.$('input[name]').each(function() {
          var $this;
          $this = $(this);
          return fields += "<option value=\"" + ($this.attr('name')) + "\">" + ($this.val()) + "</option>";
        });
        return this.$modal.find('.toggleOptions').html(fields);
      };

      ToggleField.prototype.loadField = function(shouldFocus) {
        var fieldValue;
        if (shouldFocus == null) {
          shouldFocus = true;
        }
        fieldValue = this.$("input[name=\"" + this.sourceField + "\"]").val();
        this.$psuedoField.val(fieldValue);
        this.setCharacterCount();
        if (shouldFocus === true) {
          return this.$psuedoField.focus();
        }
      };

      ToggleField.prototype.editField = function(event) {
        var $target;
        $target = $(event.target);
        this.sourceField = $(event.target).data('identifier');
        return this.loadField();
      };

      ToggleField.prototype.editAllFields = function() {
        if (this.$allButton.hasClass('active')) {
          this.$psuedoField.focus();
          return false;
        }
        this.$modal.modal('show');
        return false;
      };

      ToggleField.prototype.setCharacterCount = function() {
        return this.$characterCount.text(this.$psuedoField.val().length);
      };

      ToggleField.prototype.fetch = function(path) {
        return path;
      };

      ToggleField.prototype.cleanup = function() {
        this.$modal.off('click');
        return this.$modal.remove();
      };

      return ToggleField;

    })(Backbone.LayoutView);
    return {
      ToggleField: ToggleField
    };
  });

}).call(this);
