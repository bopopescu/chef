// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, CON, CatalogCollection, CatalogEntry, CatalogSearchView, DATASOURCE_ENDPOINT, DEVICE_PREFIX, GENRE_QUERY, LocalModel, WEB_PREFIX, attachArtistModalTemplate, attachResultsTemplate, base, kindToImgType, kindToSlug, userPrefs;
    CON = require('src/const');
    Backbone = require('backbone');
    base = require('src/base');
    attachResultsTemplate = require('eco/catalog/results');
    attachArtistModalTemplate = require('eco/catalog/modal');
    LocalModel = require('src/localstorage').LocalModel;
    DATASOURCE_ENDPOINT = "" + window.API_PREFIX + "/datasource/";
    GENRE_QUERY = "SELECT\n  station_id as id,\n  name,\n  description,\n  vanity_name as slug,\n  CASE station_type\n    WHEN 2 THEN 'genre'\n    WHEN 3 THEN 'mood'\n  END as kind\nFROM station\nORDER BY name";
    kindToSlug = {
      station: 'live',
      featured: 'original',
      mood: 'original',
      genre: 'original',
      artist: 'artist',
      track: 'track'
    };
    kindToImgType = {
      genre: 's',
      mood: 's',
      artist: 'a',
      track: 't'
    };
    DEVICE_PREFIX = 'ihr://play/custom';
    WEB_PREFIX = 'http://www.iheart.com';
    userPrefs = new LocalModel();
    userPrefs.url = function() {
      return 'prefs:/catalogSearchDialog';
    };
    userPrefs.fetch();
    CatalogEntry = (function(_super) {

      __extends(CatalogEntry, _super);

      function CatalogEntry() {
        return CatalogEntry.__super__.constructor.apply(this, arguments);
      }

      CatalogEntry.prototype.initialize = function() {
        var imgType;
        imgType = kindToImgType[this.get('kind')];
        if (imgType && !this.get('img')) {
          return this.set('img', "" + window.CATALOG_IMG_PROXY + "/" + imgType + this.id, {
            silent: true
          });
        }
      };

      CatalogEntry.prototype.getImg = function(size) {
        if (size == null) {
          size = 50;
        }
        return "" + (this.get('img')) + "?ops=max(" + size + "," + size + ")";
      };

      return CatalogEntry;

    })(Backbone.Model);
    CatalogCollection = (function(_super) {

      __extends(CatalogCollection, _super);

      function CatalogCollection() {
        return CatalogCollection.__super__.constructor.apply(this, arguments);
      }

      CatalogCollection.prototype.model = CatalogEntry;

      CatalogCollection.prototype.url = "" + window.API_PREFIX + "/utils/catalog/";

      CatalogCollection.prototype.fetchGenres = function() {
        var deferred, exec, query,
          _this = this;
        deferred = $.Deferred();
        query = {
          datasource: 'ingestion',
          query: GENRE_QUERY,
          default_limit: 1000
        };
        exec = $.ajax({
          url: DATASOURCE_ENDPOINT,
          type: 'POST',
          data: JSON.stringify(query),
          processData: false,
          contentType: 'application/json'
        });
        exec.done(function(response) {
          _this.reset(response.result);
          return deferred.resolve(response.result);
        });
        exec.fail(function(jqXHR) {
          var error_data;
          error_data = JSON.parse(jqXHR.responseText);
          return console.log(':TODO: Trigger global error handler.');
        });
        return deferred;
      };

      return CatalogCollection;

    })(base.Collection);
    CatalogSearchView = (function(_super) {

      __extends(CatalogSearchView, _super);

      function CatalogSearchView() {
        return CatalogSearchView.__super__.constructor.apply(this, arguments);
      }

      CatalogSearchView.prototype.template = attachResultsTemplate;

      CatalogSearchView.prototype.events = function() {
        return {
          'click #attach-results a[id]': this.onItemSelected,
          'input input#attachSearch': this.onSearchInputChanged,
          'input input#filter': this.onFilterInputChanged,
          'change input[type=checkbox]': this.onSearchOptionChecked
        };
      };

      CatalogSearchView.prototype.tagName = 'div';

      CatalogSearchView.prototype.className = 'modal';

      CatalogSearchView.prototype.id = 'attachModal';

      CatalogSearchView.prototype.currentSearch = '';

      CatalogSearchView.prototype.selectCallback = null;

      CatalogSearchView.prototype.initialize = function(options) {
        var _this = this;
        this.$el.addClass('hide fade').append(attachArtistModalTemplate()).appendTo('body');
        this.$attachResults = this.$('#attach-results');
        this.$attachSearch = this.$('#attachSearch');
        this.catalog = new CatalogCollection();
        this.$('a[data-toggle="tab"]').on('shown', function(e) {
          _this.catalog.reset([]);
          if ($(e.target).is('[data-target=#search]') && _this.currentSearch) {
            _this._search();
          }
          if ($(e.target).is('[data-target=#genre]')) {
            _this.setWorking(true);
            return _this.catalog.fetchGenres().done(function() {
              _this.setWorking(false);
              return _this.onFilterInputChanged();
            });
          }
        });
        this.search = _.debounce(this._search, 250);
        return this.global.on(CON.EVENT_CATALOG, function(selectCallback) {
          _this.selectCallback = selectCallback;
          _this.clear();
          return _this.show();
        });
      };

      CatalogSearchView.prototype.show = function() {
        return this.$el.modal('show');
      };

      CatalogSearchView.prototype.hide = function() {
        return this.$el.modal('hide');
      };

      CatalogSearchView.prototype.clear = function() {
        this.$attachSearch.val('');
        this.currentSearch = '';
        this.$('input[type=checkbox]').each(function() {
          var checked;
          checked = userPrefs.get("searchOption." + ($(this).attr('id')));
          if (!(checked != null) || checked) {
            return $(this).attr('checked', true);
          } else {
            return $(this).removeAttr('checked');
          }
        });
        this.$('.nav-tabs li:first a').tab('show');
        this.catalog.reset([], {
          silent: true
        });
        return this.$attachResults.html('');
      };

      CatalogSearchView.prototype.setWorking = function(work) {
        var el;
        el = this.$el.find('.thinking');
        return el[work ? 'show' : 'hide']();
      };

      CatalogSearchView.prototype._search = function() {
        var params,
          _this = this;
        params = {};
        $('input[type=checkbox]').map(function() {
          return params[this.name] = $(this).is(':checked');
        });
        params['q'] = this.currentSearch;
        this.setWorking(true);
        return this.catalog.fetch({
          success: function() {
            _this.setWorking(false);
            return _this.showResults(_this.catalog.models);
          },
          error: function() {
            return _this.setWorking(false);
          },
          data: params
        });
      };

      CatalogSearchView.prototype._createLink = function(catalogItem) {
        var dev_link, id, kind, path, web_link;
        id = catalogItem.get('slug') || catalogItem.get('id');
        kind = catalogItem.get('kind');
        path = kindToSlug[kind];
        if (kind === 'artist') {
          web_link = "" + WEB_PREFIX + "/" + path + "/-" + id + "/";
        } else if (kind === 'track') {
          web_link = "" + WEB_PREFIX + "/artist/-" + (catalogItem.get('artistId')) + "/songs/-" + id + "/";
        } else {
          web_link = "" + WEB_PREFIX + "/" + path + "/" + id + "/";
        }
        dev_link = "" + DEVICE_PREFIX + "/" + path + "/" + (catalogItem.get('id')) + "/";
        return [web_link, dev_link];
      };

      CatalogSearchView.prototype.showResults = function(models) {
        var ctx;
        ctx = {
          models: models,
          img_proxy: window.IMG_PROXY
        };
        return this.$attachResults.html(this.template(ctx));
      };

      CatalogSearchView.prototype.onItemSelected = function(e) {
        var item;
        item = this.catalog.getByCid($(e.target).attr('id'));
        this.selectCallback(item, this._createLink(item));
        return this.hide();
      };

      CatalogSearchView.prototype.onFilterInputChanged = function() {
        var m, models, re, value;
        value = $("input#filter").attr('value');
        re = new RegExp("" + value, 'i');
        models = (function() {
          var _i, _len, _ref, _results;
          _ref = this.catalog.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            if (re.test(m.get('name'))) {
              _results.push(m);
            }
          }
          return _results;
        }).call(this);
        return this.showResults(models);
      };

      CatalogSearchView.prototype.onSearchInputChanged = function() {
        var value;
        value = this.$attachSearch.val();
        if (value) {
          this.currentSearch = value;
          return this.search();
        }
      };

      CatalogSearchView.prototype.onSearchOptionChecked = function() {
        this.$('input[type=checkbox]').each(function() {
          return userPrefs.set("searchOption." + ($(this).attr('id')), $(this).is(':checked'), {
            silent: true
          });
        });
        userPrefs.save();
        $(this).attr('checked', true);
        if (this.currentSearch) {
          return this.search();
        }
      };

      CatalogSearchView.prototype.onClose = function() {
        this.catalog.off(null, null, this);
        return this.genre.off(null, null, this);
      };

      return CatalogSearchView;

    })(Backbone.View);
    return new CatalogSearchView();
  });

}).call(this);
