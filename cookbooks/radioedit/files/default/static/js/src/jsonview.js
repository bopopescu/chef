// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, Backbone, JSONView, SchemaBuildView, SchemaView, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    JSONView = (function(_super) {

      __extends(JSONView, _super);

      function JSONView() {
        return JSONView.__super__.constructor.apply(this, arguments);
      }

      JSONView.prototype.events = {
        'click .collapser': 'collapse'
      };

      JSONView.prototype.initialize = function(_arg) {
        this.payload = _arg.payload;
        return this.render();
      };

      JSONView.prototype.collapse = function(e) {
        return $(e.currentTarget).parent('li').toggleClass('collapsed');
      };

      JSONView.prototype._isScalar = function(value) {
        var test, tests, _i, _len;
        tests = ['isString', 'isNumber', 'isBoolean', 'isDate', 'isRegExp', 'isNaN', 'isNull', 'isUndefined'];
        for (_i = 0, _len = tests.length; _i < _len; _i++) {
          test = tests[_i];
          if (_[test](value)) {
            return test.slice(2);
          }
        }
        return false;
      };

      JSONView.prototype._generate = function(obj) {
        var container, content, i, isArr, isObj, item, k, type, v, _i, _len;
        type = this._isScalar(obj);
        if (type !== false) {
          if (type === 'Null' || type === 'Undefined') {
            obj = 'null';
          }
          return $('<span/>').addClass(type).append(obj.toString());
        } else if (_.isArray(obj)) {
          container = $('<ol/>');
          for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
            v = obj[i];
            item = $("<li data-index=\"" + i + "\" />");
            content = this._generate(v);
            isObj = content.is('ul') ? true : false;
            isArr = content.is('ol') ? true : false;
            if (isObj || isArr) {
              item.append('<div class="collapser">');
            }
            if (isObj) {
              item.append("{ ");
            }
            if (isArr) {
              item.append("[ ");
            }
            if (!content.is('ul:empty,ol:empty')) {
              if (isObj || isArr) {
                item.append('<span class="ellipsis"></span>');
              }
              item.append(content);
            }
            if (isObj) {
              item.append("} ");
            }
            if (isArr) {
              item.append("] ");
            }
            container.append(item);
          }
          return container;
        } else if (_.isObject(obj)) {
          container = $('<ul/>');
          for (k in obj) {
            if (!__hasProp.call(obj, k)) continue;
            v = obj[k];
            content = this._generate(v);
            item = $("<li data-property=\"" + k + "\" />");
            isObj = content.is('ul') ? true : false;
            isArr = content.is('ol') ? true : false;
            if (isObj || isArr && !content.is('ul:empty,ol:empty')) {
              item.append('<div class="collapser">');
            }
            item.append("<span class=\"property\">" + k + ":</span>");
            if (isObj) {
              item.append("{ ");
            }
            if (isArr) {
              item.append("[ ");
            }
            if (!content.is('ul:empty,ol:empty')) {
              if (isObj || isArr) {
                item.append('<span class="ellipsis"></span>');
              }
              item.append(content);
            }
            if (isObj) {
              item.append("} ");
            }
            if (isArr) {
              item.append("] ");
            }
            container.append(item);
          }
          return container;
        }
        return $('<div>unknown</div>');
      };

      JSONView.prototype.render = function() {
        return this.$el.empty().append(this._generate(this.payload));
      };

      return JSONView;

    })(Backbone.View);
    SchemaView = (function(_super) {

      __extends(SchemaView, _super);

      function SchemaView() {
        return SchemaView.__super__.constructor.apply(this, arguments);
      }

      SchemaView.prototype.tagName = 'ol';

      SchemaView.prototype.attributes = {
        "class": 'schema jsonview'
      };

      SchemaView.prototype.events = {
        'click .collapser': 'collapse'
      };

      SchemaView.prototype.initialize = function(_arg) {
        this.payload = _arg.payload;
        return this.render();
      };

      SchemaView.prototype.collapse = function(e) {
        return $(e.currentTarget).parent('li').toggleClass('collapsed');
      };

      SchemaView.prototype._generateNode = function(node) {
        return $("<li class=\"" + node.type + "\">\n  " + (node.required === false && '*' || '') + node.name + ": <span class=\"" + node.type + "\">" + node.type + "</span>,\n</li>");
      };

      SchemaView.prototype._generateContainer = function(node, wrapStr) {
        if (node.name) {
          return $("<li class=\"" + node.type + "\">\n  " + (node.required === false && '*' || '') + node.name + ":\n  " + wrapStr[0] + "\n  <ol/>\n  " + wrapStr[1] + "\n</li>");
        }
        return $("<li class=\"" + node.type + "\">\n  " + (node.required === false && '*' || '') + "\n  " + wrapStr[0] + "\n  <ol/>\n  " + wrapStr[1] + "\n</li>");
      };

      SchemaView.prototype._generate = function(node, root) {
        var child, container, nested, type, wrapStr, _i, _len, _ref;
        if (root == null) {
          root = false;
        }
        type = node.type;
        if (type === 'IdentityType' || type === 'String' || type === 'Integer' || type === 'Float' || type === 'Boolean' || type === 'CommaSeparatedListType') {
          if (type === 'IdentityType') {
            node.type = 'Anything';
          }
          return this._generateNode(node);
        } else if (type === 'Sequence' || type === 'Mapping' || type === 'Tuple') {
          wrapStr = '{}';
          if (type === 'Sequence') {
            wrapStr = '[]';
          }
          if (type === 'Tuple') {
            wrapStr = '()';
          }
          container = this._generateContainer(node, wrapStr);
          if (!root) {
            container.append('<div class="collapser"/>');
          }
          if (node.children.length > 0) {
            nested = container.find('ol');
            _ref = node.children;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              nested.append(this._generate(child));
            }
          }
          return container;
        } else {
          return $("<li>" + type + "</li>");
        }
      };

      SchemaView.prototype.render = function() {
        return this.$el.empty().append(this._generate(this.payload, true));
      };

      return SchemaView;

    })(Backbone.View);
    SchemaBuildView = (function(_super) {

      __extends(SchemaBuildView, _super);

      function SchemaBuildView() {
        return SchemaBuildView.__super__.constructor.apply(this, arguments);
      }

      SchemaBuildView.prototype.tagName = 'table';

      SchemaBuildView.prototype.attributes = {
        "class": 'schema table'
      };

      SchemaBuildView.prototype.events = {
        'click .collapser': 'collapse'
      };

      SchemaBuildView.prototype.initialize = function(_arg) {
        this.payload = _arg.payload;
        return this.render();
      };

      SchemaBuildView.prototype.collapse = function(e) {
        return $(e.currentTarget).parent('li').toggleClass('collapsed');
      };

      SchemaBuildView.prototype._generateNode = function(node) {
        return $("<tr>\n    <td>" + node.name + "</td>\n    <td>" + node.required + "</td>\n    <td>" + node.type + "</td>\n    <td>" + node.description + "</td>\n</tr>");
      };

      SchemaBuildView.prototype._generateContainer = function(node) {
        return $("<tr>\n    <td>" + node.name + "</td>\n    <td>" + node.required + "</td>\n    <td>" + node.type + "</td>\n    <td>" + node.description + "</td>\n</tr>");
      };

      SchemaBuildView.prototype._generateWrap = function(wrapStr) {
        return $("<tr><td colspan=\"5\" class=\"wrap\">" + wrapStr + "</td></tr>");
      };

      SchemaBuildView.prototype._generate = function(node, root) {
        var child, container, generated, nested, target, type, wrapStr, _i, _len, _ref;
        if (root == null) {
          root = false;
        }
        type = node.type;
        if (type === 'String' || type === 'Integer' || type === 'Float' || type === 'Boolean' || type === 'CommaSeparatedListType') {
          return this._generateNode(node);
        } else if (type === 'Sequence' || type === 'Mapping' || type === 'Tuple') {
          generated = [];
          wrapStr = type === 'Sequence' ? '[]' : '{}';
          if (node.name) {
            generated.push(this._generateContainer(node));
          }
          generated.push(this._generateWrap(wrapStr[0]));
          if (node.children.length > 0) {
            container = $('<tr><td class="child" colspan="5"/></tr>');
            target = container.find('td');
            nested = $('<table/>');
            _ref = node.children;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              nested.append(this._generate(child));
            }
            target.append(nested);
            generated.push(container);
          }
          generated.push(this._generateWrap(wrapStr[1]));
          return generated;
        } else {
          return $("<div>" + type + "</div>");
        }
      };

      SchemaBuildView.prototype.render = function() {
        return this.$el.empty().append(this._generate(this.payload, true));
      };

      return SchemaBuildView;

    })(Backbone.View);
    return {
      JSONView: JSONView,
      SchemaView: SchemaView
    };
  });

}).call(this);
