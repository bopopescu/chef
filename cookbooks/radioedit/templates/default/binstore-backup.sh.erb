#!/usr/bin/env bash
# #################################################
# @FILE: binstore-backup.sh.erb
# @AUTHOR: GregoryPatmore <gregorypatmore@clearchannel.com>}
# @CHEF-COOKBOOK: radioedit (recipe[radioedit::binstore-backup])
# @PROJECT: radioedit
# @TICKETID: OPS-6354 ( https://jira.ccrd.clearchannel.com/browse/OPS-6354 )
# @TAB-SIZE: 2
# @SOFT-TABS: YES
# @DESC: Creates a local backup of the binstore directory in .tgz format and rsyncs the binstore directory delta changes to the backup server
# @NOTES: 
# #################################################

# including my old error library source (until I can automate a way to deploy together or something)
shopt -s expand_aliases;
p=$(which echo);
alias echo="${p}";
declare -x LERR_LIB_FILE=$0;    
# verbosity level 0=silent, 1=error, 2=warn+error, 3=info(error,warn and info), 4=debug(everything)
declare -x LERR_LVL=3;
# flag to enable/disable all lib.err functionality (1=enabled,2=disabled)
declare -x LERR_ENABLED=1;
# flag indicating whether to also log the message to syslog (1=true, 0=false);
declare -x LERR_SYSLOG_ENABLED=1;
# syslog facility to use for any syslog msgs
declare -x LERR_FACILITY='user'; 
# default severity to use for messages not providing one.
declare -x LERR_DEFAULT_PRIORITY='info';
# lookup hash for int<->name error levels
declare -x LERR_LVL_NAMES=(silent debug info warn err);
# backups in case they are disabled and enabled again
declare -x LERR_DEF_COLOR_ERR="\x1b[31;01m";
declare -x LERR_DEF_COLOR_WARN="\x1b[33;01m";
declare -x LERR_DEF_COLOR_INFO="\x1b[1;96m";
declare -x LERR_DEF_COLOR_DEBUG="\x1b[1;35m";
declare -x LERR_DEF_COLOR_NONE="\e[0m";
#color variables 
declare -x LERR_COLOR_ERR="$LERR_DEF_COLOR_ERR";
declare -x LERR_COLOR_WARN="$LERR_DEF_COLOR_WARN";
declare -x LERR_COLOR_INFO="$LERR_DEF_COLOR_INFO";
declare -x LERR_COLOR_DEBUG="$LERR_DEF_COLOR_DEBUG";
declare -x LERR_COLOR_NONE="$LERR_DEF_COLOR_NONE";
#date format handle
declare -x LERR_DATE_FMT;
#verified date command assignment
date "--rfc-3339=ns" >/dev/null 2>&1 \
  && LERR_DATE_FMT='--rfc-3339=ns' \
  || LERR_DATE_FMT='+%F %T';
#make sure we have a logger command before we blow everything up
hash logger >/dev/null 2>&1;
if [ $? -eq 0 ]; then
  # calls logger util to process message
  function lerr_log() {
    [[ $LERR_SYSLOG_ENABLED -lt 1 ]] && return 0;
    local pri=${1};
    shift;
    logger -i -p ${LERR_FACILITY}.${pri} "${@}"; #logger will handle stamping time
    return 0;
  };
else 
  # dummy function if logger command not found 
  function lerr_log() { return 0; };
  # disable syslog
  LERR_SYSLOG_ENABLED=0;
fi
# ##################################################################
# Error Reporting 
# ##################################################################
function pErr () {
  [[ $LERR_LVL -lt 1 ]] && return 0;
  # log to rsyslog
  lerr_log err "${@}";
  #prints a colorized and formatted error message (bold red text)
  echo -en $LERR_COLOR_ERR"** Error: $(date "${LERR_DATE_FMT}") : $0 : " >&2;
  echo -e "${@}" >&2;
  tput sgr0;
  return 0;
};
function pWarn() {
  #prints a colorized and formatted warning message (bold gold text)
  [[ $LERR_LVL -lt 2 ]] && return 0;
  # log to rsyslog
  lerr_log warn "${@}";
  echo -en $LERR_COLOR_WARN"** Warn: $(date "${LERR_DATE_FMT}") : $0 : " >&2;
  echo -e "${@}" >&2;
  tput sgr0;
  return 0;
};
function pInfo() {
  [[ $LERR_LVL -lt 3 ]] && return 0;
  # log to rsyslog
  lerr_log info "${@}";
  #prints a colorized and formatted information message (bold blue text)
  echo -en $LERR_COLOR_INFO"** Info: $(date "${LERR_DATE_FMT}") : $0 : " >&2;
  echo -e "${@}" >&2;
  tput sgr0;
  return 0;
};
function pDebug() {
  [[ $LERR_LVL -lt 4 ]] && return 0;
  # log to rsyslog
  lerr_log debug "${@}";
  #prints a colorized and formatted information message (bold pink text)
  echo -en $LERR_COLOR_DEBUG"** Debug: $(date "${LERR_DATE_FMT}") : $0 : " >&2;
  echo -e "${@}" >&2;
  tput sgr0;
  return 0;
};
function lerr_disableColor() {
  # disables color output 
  LERR_COLOR_ERR='';
  LERR_COLOR_WARN='';
  LERR_COLOR_INFO='';
  LERR_COLOR_DEBUG='';
  LERR_COLOR_NONE='';
  return 0;
};
function lerr_enableColor() {
  # enables color output 
  LERR_COLOR_ERR=$LERR_DEF_COLOR_ERR;
  LERR_COLOR_WARN=$LERR_DEF_COLOR_WARN;
  LERR_COLOR_INFO=$LERR_DEF_COLOR_INFO;
  LERR_COLOR_DEBUG=$LERR_DEF_COLOR_DEBUG;
  LERR_COLOR_NONE=$LERR_DEF_COLOR_NONE;
  return 0;
};

# export functions for external use
export -f lerr_log;
export -f pErr;
export -f pWarn;
export -f pInfo;
export -f pDebug;
export -f lerr_disableColor;
export -f lerr_enableColor;

# no color needed for this one guys
lerr_disableColor

# ##################################################################
# Begin script 
# ##################################################################

# local directory to process
declare LOCAL_DIR='<%= @local_dir %>';
# the remote directory to save to
declare REMOTE_DIR='<%= @remote_dir %>';
# the remote host to send to
declare REMOTE_HOST='<%= @remote_host %>';

# lets keep everything local
pushd $(dirname ${LOCAL_DIR});

  # save the last backup in case it fails this time.
  [[ -f ${LOCAL_DIR}.tgz ]] \
    && mv ${LOCAL_DIR}.tgz ${LOCAL_DIR}.tgz.1;

  # create the local backup (last test run before initial deployment this took 15m6.156s compressions 7.2GB -> 6.8GB)
  tar czf ${LOCAL_DIR}.tgz ${LOCAL_DIR} &
  ARCHIVE_PID=$!;

  # sync the delta of changes to the backup server
  rsync -azrv ${LOCAL_DIR} ${REMOTE_HOST}:${REMOTE_DIR}/;
  declare -i RES=$?;

  # if we didn't end cleanly report the error and pass along the exit status 
  [[ $RES -ne 0 ]] \
    && pErr "Backup sync failed with nonzero exit status (${RES}). Please manually verify backup validity and resync if needed"; 

popd; # $(dirname ${LOCAL_DIR})

# wait for the tar call to complete
wait $ARCHIVE_PID;
RES=$?;

# if it was successful, delete the .tgz.1 copy
if [[ $RES -eq 0 ]]; then
  pInfo "Local archive created successfully"
  rm -f ${LOCAL_DIR}.tgz.1;

# if it fails, complain a bit, but don't erase the only local backup we have, instead erase the current .tgz so no one tries to use it.
else
  pWarn "Local Archive process failed with nonzero status ($RES). previous archive saved with .tgz.1 filename suffix"
  rm -f ${LOCAL_DIR}.tgz
  
fi

