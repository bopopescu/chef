#!/bin/bash 
# #######################################################
# @CREATED 7/30/13 
# @AUTHOR Gregory Patmore
# @CONTACT gregorypatmore@clearchannel.com
# @DESC Script to scrape the amp extended access logs and checks the #500 http responses as a percentage of #200 responses for requests in the last 5 minutes
# @REF https://jira.ccrd.clearchannel.com/browse/OPS-4992
# 
# pipe flow:
# 1. awk : filter 2 most recent /<path>/<file>.log, filter out commented lines, and print the response code & url
# 2. perl: normalize urls by removing query string portion, replacing uids/resource ids/etc with '###'
# 3. awk : filter out only /[25]00/ responses, aggregate the counts by url, and print out '<url> <#200s> <#500s> <%500s>
# 4. awk : analyze the percentage and tack on the nagios threshold (<25% = OK, 25% = WARNING, >25% = CRITICAL)
# 5. outputs all the data to a temp file with 'YYMMDD-HH-MM.amp_log.rpt' suffix
#
# @CHANGELOG 
#		- 8/14/13 GP 
#			- Added in emailing to devs when warn/crit found (due to limitations on char length message + cronwrap issues)
#			- Adjusted math to (#200+#500)*100/#500 as it's a more accurate representation of the percentage
# #######################################################

NOTIFY_LIST=("gregorypatmore@clearchannel.com")

# create an easy to locate temp file
TFILE=$(mktemp --suffix .$(date +%Y%m%d-%H-%I).amp_log.rpt)

# craft a similar filename (s/rpt/err/) and redir stderr to it for any error output.
 # 2>${TFILE/rpt/err};

# see 'pipe flow' section in file header
awk -v d=$(date -u -d '5 minutes ago' +%H%I%M) '/^[^#]/{gsub(/:/,"",$3);if($3 >= d)print $6,$5}' $(ls -rt /data/apps/tomcat7/logs/extended_localhost_access_log.*-*-*-*.log | tail -2) \
	| perl -ane '$F[1]=~s/[?;].*$//;$F[1]=~s/\/[0-9]+\//\/###\//g;$F[1]=~s/\/[a-z0-9]+\/(get.*|thumbs.*|registerListen|remove)$/\/###\/\1/;$F[1]=~s/\//./g;print "$F[0] $F[1]\n";' \
	| awk '/^200|^500/{if($1 == "200"){r2[$2]++}else{r5[$2]++}}END{for(u in r5){printf "%s %d %d %.0f\n",u,r2[u],r5[u],(r5[u]+r2[u])*100/r2[u]}}' \
	| awk '$4>25{print $0,"CRITICAL"}$4==25{print $0,"WARNING"}{print $0,"OK"}' \
	> $TFILE 2>/dev/null;

# stash counts 
CCRIT=$(grep -c CRITICAL $TFILE);
CWARN=$(grep -c WARNING $TFILE);
COK=$(grep -c OK $TFILE);

# counts string
CNTSTR="#CRIT:${CCRIT},#WARN:${CWARN},#OK:${COK}";
# nags string to send with any CRITICAL|WARNING level notice
NAGMSG="Report:($(uname -n):${TFILE} RESULTS:(${CNTSTR})";

# check to see if there were any 'not OK' levels, if so, fire most fear inspiring one present to nagios
if [ $CCRIT -ne 0 ]; then #if critical level reported
	for i in $NOTIFY_LIST; do
		mutt -s "AMP-LOG-ALERT: ${NAGMSG}" $i < <(
			echo "REPORT FOR $(date +%Y%m%d-%H-%I)" \
			&& echo "[endpoint] [#200s] [#500s] [%500s] [STATUS]" \
			&& grep -v OK $TFILE
		)
	done;
	echo "CRITICAL: ${NAGMSG}" && exit 2;

elif [ $CWARN -ne 0 ]; then #if warning level reported
	for i in $NOTIFY_LIST; do
		mutt -s "AMP-LOG-ALERT: ${NAGMSG}" $i < <(
			echo "REPORT FOR $(date +%Y%m%d-%H-%I)" \
			&& echo "[endpoint] [#200s] [#500s] [%500s] [STATUS]" \
			&& grep -v OK $TFILE
		)
	done;
	echo "WARNING: ${NAGMSG}" && exit 1;

else # all levels ok
	#report ok to nags
	#kill the temp file since all is well
	echo "ALL OK: ${CNTSTR}" && rm -f $TFILE && exit 0;
	
fi
