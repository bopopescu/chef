#!/bin/bash
# git location -- git@github.com:iheartradio/rabbit-consumers.git amqp-fbgraph/scripts/fbgraph-consumer
#
# chkconfig: 345 99 05
# description: Java deamon script


# Set this to your Java installation
if [ -z "$JAVA_HOME" ]; then                               # if JAVA_HOME is undefined
    if [ -f /usr/share/java-utils/java-functions ]; then
        . /usr/share/java-utils/java-functions; set_jvm      # JPackage standard method to set JAVA_HOME
    elif [ -n "$(type -t setJava)" ]; then
        . setJava ""; fi                                     # old SUSE method to set JAVA_HOME
    if [ -z "$JAVA_HOME" ]; then
        JAVA_HOME=/usr/java/jdk1.6.0_26
    fi
fi

scriptFile=$(readlink -fn $(type -p $0))                   # the absolute, dereferenced path of this script file
scriptDir=$(dirname $scriptFile)
serviceNameLo="fbgraph-consumer"                        # service name with the first letter in lowercase
serviceName="fbgraph-consumer"                                    # service name
serviceUser="amqp-consumer"                                      # OS user name for the service
serviceGroup="amqp-consumer"                                    # OS group name for the service
applDir=$scriptDir                          # home directory of the service application
serviceUserHome="/home/$serviceUser"                       # home directory of the service user
serviceLogFile="/var/log/$serviceNameLo/$serviceNameLo-stdout.log"               # log file for StdOut/StdErr
maxShutdownTime=15                                         # maximum number of seconds to wait for the daemon to terminate normally
pidFile="/var/run/$serviceNameLo/$serviceNameLo.pid"                      # name of PID file (PID = process ID number)
javaCommand="java"                                         # name of the Java launcher without the path
javaExe="$JAVA_HOME/bin/$javaCommand"                      # file name of the Java application launcher executable
rcFileBaseName="rc$serviceNameLo"                          # basename of the "rc" symlink file for this script
rcFileName="/etc/rc3.d/S14$rcFileBaseName"               # full path of the "rc" symlink file for this script
etcInitDFile="/etc/init.d/$serviceNameLo"                  # symlink to this script from /etc/init.d
JPS=$JAVA_HOME/bin/jps
jar_dir=$applDir/target/lib
src_dir=$applDir/target/classes
facebook_jar="$serviceUserHome/$serviceNameLo/amqp-consumers-1.0-jar-with-dependencies.jar"

###################################################
PROPERTIES=$serviceUserHome/$serviceNameLo/env.properties
mainClass=com.ccrd.amqp.FBGraphConsumer
javaArgs="-Xmx1024M -Dlog4j.configuration=file://$serviceUserHome/$serviceNameLo/log4j.xml -Djava.rmi.server.hostname=`hostname -i` -Dcom.sun.management.jmxremote.port=8995 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -cp \""${serviceUserHome}/${serviceNameLo}/*"\"   $mainClass $PROPERTIES"
javaCommandLine="$javaExe $javaArgs"                       # command line to start the Java service application
javaCommandLineKeyword="fbgraph-consumer"                     # a keyword that occurs on the commandline, used to detect an already running service process and to distinguish it from others

# Makes the file $1 writable by the group $serviceGroup.
function makeFileWritable {
    local filename="$1"
    touch $filename || return 1
    chgrp $serviceGroup $filename || return 1
    chmod g+w $filename || return 1
    return 0; }

# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
    local pid="$1"
    if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
    if [ ! -e /proc/$pid ]; then return 1; fi
    return 0; }

# Returns 0 if the process with PID $1 is our Java service process.
function checkProcessIsOurService {
    local pid="$1"
    if [ "$(ps -p $pid --no-headers -o comm)" != "$javaCommand" ]; then return 1; fi
    jps=`$JPS -lvm | grep "$javaCommandLineKeyword" | awk '{ print $1 }'`
    #grep -q --binary -F "$javaCommandLineKeyword" /proc/$pid/cmdline
    if [ -z $jps ]; then
        jps=`$JPS -lvm  | grep "Launcher" | awk '{ print $1 }'`
        if [ -z $jps ]; then return 1; fi
    fi
    if [ $jps -ne $pid ]; then return 1; fi
    if [ $? -ne 0 ]; then return 1; fi
    return 0; }

# Returns 0 when the service is running and sets the variable $pid to the PID.
function getServicePID {
    if [ ! -f $pidFile ]; then return 1; fi
    pid="$(<$pidFile)"
    checkProcessIsRunning $pid || return 1
    checkProcessIsOurService $pid || return 1
    return 0; }

function startServiceProcess {
    cd $applDir || return 1
    rm -f $pidFile
    makeFileWritable $pidFile || return 1
    makeFileWritable $serviceLogFile || return 1
    cmd="cd $applDir; nohup $javaCommandLine >>$serviceLogFile 2>&1 & echo \$! >$pidFile"
    su -m $serviceUser -s $SHELL -c "$cmd" || return 1
    sleep 0.1
    pid="$(<$pidFile)"
    if checkProcessIsRunning $pid; then :; else
        echo -ne "\n$serviceName start failed, see logfile."
        return 1
    fi
    return 0; }

function stopServiceProcess {
    kill $pid || return 1
    for ((i=0; i<maxShutdownTime*10; i++)); do
        checkProcessIsRunning $pid
        if [ $? -ne 0 ]; then
            rm -f $pidFile
            return 0
        fi
        sleep 0.1
    done
    echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
    kill -s KILL $pid || return 1
    local killWaitTime=15
    for ((i=0; i<killWaitTime*10; i++)); do
        checkProcessIsRunning $pid
        if [ $? -ne 0 ]; then
            rm -f $pidFile
            return 0
        fi
        sleep 0.1
    done
    echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
    return 1; }

function startService {
    getServicePID
    if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
    echo -n "Starting $serviceName   "
    startServiceProcess
    if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
    echo "started PID=$pid"
    RETVAL=0
    return 0; }

function runJobManually {
    getServicePID
    if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
    echo -n "Starting $serviceName manually. Job name is $1"
    javaArgs="-Xmx1024M -cp $CLASSPATH $MANUALJOBLAUNCHER $1 "$(date +'%Y%m%d%H%M%s')" $2"
    javaCommandLine="$javaExe $javaArgs"                       # command line to start the Java service application
    startServiceProcess
    if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
    echo " started PID=$pid"
    RETVAL=0
    return 0; }

function stopService {
    getServicePID
    if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; RETVAL=0; echo ""; return 0; fi
    echo -n "Stopping $serviceName   "
    stopServiceProcess
    if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
    echo "stopped PID=$pid"
    RETVAL=0
    return 0; }

function checkServiceStatus {
    echo -n "Checking for $serviceName:   "
    if getServicePID; then
        echo "running PID=$pid"
        RETVAL=0
    else
        echo "stopped"
        RETVAL=3
    fi
    return 0; }


function installService {
    getent group $serviceGroup >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo Creating group $serviceGroup
        groupadd -r $serviceGroup || return 1
    fi
    id -u $serviceUser >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo Creating user $serviceUser
        useradd -r -c "user for $serviceName service" -g $serviceGroup -G users -d $serviceUserHome $serviceUser
    fi
    ln -s $scriptFile $rcFileName || return 1
    ln -s $scriptFile $etcInitDFile || return 1
    echo $serviceName installed.
    echo You may now use $rcFileBaseName to call this script.
    return 0; }

function uninstallService {
    echo remove $rcFileName
    rm -f $rcFileName
    echo remove $etcInitDFile
    rm -f $etcInitDFile
    echo $serviceName uninstalled.
    return 0; }

function main {
    RETVAL=0
    case "$1" in
        start)                                               # starts the Java program as a Linux service
            startService
            ;;
        stop)                                                # stops the Java program service
            stopService
            ;;
        restart)                                             # stops and restarts the service
            stopService && startService
            ;;
        status)                                              # displays the service status
            checkServiceStatus
            ;;
        install)
            installService
            ;;
        uninstall)
            uninstallService
            ;;
        *)
            echo "Usage: $0 {start|stop|restart|status|install|uninstall}"
            exit 1
            ;;
    esac
    exit $RETVAL
}

main $1
