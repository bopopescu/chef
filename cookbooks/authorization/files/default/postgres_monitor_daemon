#!/bin/bash

# This daemon will break heartbeat if the PostGres fails

LOG=/var/log/ha-log

POSTGRES=`which postgres`;

TMPLOG=/tmp/$$.psql.log
rm -f $TMPLOG

trap "rm -f $TMPLOG" EXIT

. ~postgres/.bash_profile

function test_connection
{
  ps aux | grep postmaster | grep -v grep -q > /dev/null 2>&1;
  EC=$?;

  if [ "$EC" -eq "0" ]
  then

    psql -d postgres -U postgres -c'select 1;' > $TMPLOG 2>&1;
    EC=$?

    grep 'the database system is starting up' $TMPLOG > /dev/null 2>&1
    RT=$?;

    if [ "$EC" -ne "0" ] && [ "$RT" -ne "0" ]
    then
        ISRUNNING=2 # running unresponsive
    else
        ISRUNNING=1 # running healthy
    fi
  else
    ISRUNNING=0 # not running
  fi
}


while true;
do

  test_connection;
 
  if [ "$ISRUNNING" -eq "2" ] 
  then
  
      echo "Server is not responding: attempting to restart postgres" | tee -a $LOG
      /etc/init.d/postgres restart | tee -a $LOG;
      echo "Sleeping 30 seconds" | tee -a $LOG
      sleep 30; #give postgres time to start up

      echo "Testing connection again" | tee -a $LOG
      test_connection;
  elif [ "$ISRUNNING" -eq "0" ]
  then
  
      echo "Server is down: attempting to start postgres" | tee -a $LOG
      /etc/init.d/postgres start | tee -a $LOG;
      echo "Sleeping 30 seconds" | tee -a $LOG
      sleep 30; #give postgres time to start up

      echo "Testing connection again" | tee -a $LOG
      test_connection;
  fi

  if [ "$ISRUNNING" -eq "2" ] || [ "$ISRUNNING" -eq "0" ]
  then
      echo "Restarting heartbeat to force failover" | tee -a $LOG
      /etc/init.d/heartbeat stop | tee -a $LOG; # stop heartbeat to force failover
  fi  

  sleep 10;

done;
